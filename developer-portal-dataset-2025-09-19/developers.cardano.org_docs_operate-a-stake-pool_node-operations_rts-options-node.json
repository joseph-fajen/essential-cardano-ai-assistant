{
  "url": "https://developers.cardano.org/docs/operate-a-stake-pool/node-operations/rts-options-node",
  "content": "![Cardano Logo](/img/cardano-black.svg)\n![Cardano Logo](/img/cardano-white.svg)\n\n# Runtime system options for Cardano Node\n\nThe Haskell runtime system (RTS) is a software layer that provides a set of services that enable Haskell programs to execute. At a high level, the Haskell runtime system provides the following services:\n\n[RTS Official documentation](https://downloads.haskell.org/ghc/latest/docs/users_guide/runtime_control.html#runtime-system-rts-options)\n\nIOG-released binaries are built with the following RTS options `-T -I0 -A16m -N2 --disable-delayed-os-memory-return` . This means that the node uses these options at runtime by default. You can check it with:\n\n`-T -I0 -A16m -N2 --disable-delayed-os-memory-return`\n`cardano-node +RTS --info`\n `[(\"GHC RTS\", \"YES\")  \n ,(\"GHC version\", \"8.10.7\")  \n ,(\"RTS way\", \"rts_thr\")  \n ,(\"Build platform\", \"x86_64-unknown-linux\")  \n ,(\"Build architecture\", \"x86_64\")  \n ,(\"Build OS\", \"linux\")  \n ,(\"Build vendor\", \"unknown\")  \n ,(\"Host platform\", \"x86_64-unknown-linux\")  \n ,(\"Host architecture\", \"x86_64\")  \n ,(\"Host OS\", \"linux\")  \n ,(\"Host vendor\", \"unknown\")  \n ,(\"Target platform\", \"x86_64-unknown-linux\")  \n ,(\"Target architecture\", \"x86_64\")  \n ,(\"Target OS\", \"linux\")  \n ,(\"Target vendor\", \"unknown\")  \n ,(\"Word size\", \"64\")  \n ,(\"Compiler unregisterised\", \"NO\")  \n ,(\"Tables next to code\", \"YES\")  \n ,(\"Flag -with-rtsopts\", \"-T -I0 -A16m -N2 --disable-delayed-os-memory-return\")  \n ]`\n\n## Customized RTS options[â€‹](#customized-rts-options \"Direct link to Customized RTS options\")\n\nUsers have the option to select different configurations by adjusting the `-with-rtsopts` in the node's [Cabal file](https://github.com/IntersectMBO/cardano-node/blob/master/cardano-node/cardano-node.cabal) and then building the node with the updated settings:\n\n`-with-rtsopts`\n`ghc-options: \"-with-rtsopts=-T -I0 -A16m -N2 --disable-delayed-os-memory-return\"`\n\nUsers can also extend and override options in `-with-rtsopts` by running `cardano-node` with command-line RTS options. For example, this extends the compilation options with `+RTS -B`, to sounds the bell at the start of each garbage collection.\n\n`-with-rtsopts`\n`cardano-node`\n`+RTS -B`\n`cardano-node run +RTS -B -RTS --topology topology.json \\  \n--database-path db \\  \n--socket-path node.socket \\  \n--port 3001 \\  \n--config config/config.json`\n\nTogether with the options set in the .cabal file, the above example uses:\n\n`-T`\n`-N2`\n`-I0`\n\nDiscover the available options for cardano-node with:\n\n`cardano-node +RTS -?`\n`cardano-node:  \ncardano-node: Usage: <prog> <args> [+RTS <rtsopts> | -RTS <args>] ... --RTS <args>  \ncardano-node:  \ncardano-node: +RTS Indicates run time system options follow  \ncardano-node: -RTS Indicates program arguments to follow  \ncardano-node: --RTS Indicates that ALL subsequent arguments will be given to the  \ncardano-node: program (including any of these RTS flags)  \ncardano-node:  \ncardano-node: The following run time system options are available:  \ncardano-node:  \ncardano-node: -? Prints this message and exits; the program is not executed  \ncardano-node: --info Print information about the RTS used by this program  \ncardano-node:  \ncardano-node: --nonmoving-gc  \ncardano-node: Selects the non-moving mark-and-sweep garbage collector to  \ncardano-node: manage the oldest generation.  \ncardano-node: --copying-gc  \ncardano-node: Selects the copying garbage collector to manage all generations.  \ncardano-node:  \ncardano-node: -K<size> Sets the maximum stack size (default: 80% of the heap)  \ncardano-node: Egs: -K32k -K512k -K8M  \ncardano-node: -ki<size> Sets the initial thread stack size (default 1k) Egs: -ki4k -ki2m  \ncardano-node: -kc<size> Sets the stack chunk size (default 32k)  \ncardano-node: -kb<size> Sets the stack chunk buffer size (default 1k)  \ncardano-node:  \ncardano-node: -A<size> Sets the minimum allocation area size (default 1m) Egs: -A20m -A10k  \ncardano-node: -AL<size> Sets the amount of large-object memory that can be allocated  \ncardano-node: before a GC is triggered (default: the value of -A)  \ncardano-node: -F<n> Sets the collecting threshold for old generations as a factor of  \ncardano-node: the live data in that generation the last time it was collected  \ncardano-node: (default: 2.0)  \ncardano-node: -n<size> Allocation area chunk size (0 = disabled, default: 0)  \ncardano-node: -O<size> Sets the minimum size of the old generation (default 1M)  \ncardano-node: -M<size> Sets the maximum heap size (default unlimited) Egs: -M256k -M1G  \ncardano-node: -H<size> Sets the minimum heap size (default 0M) Egs: -H24m -H1G  \ncardano-node: -xb<addr> Sets the address from which a suitable start for the heap memory  \ncardano-node: will be searched from. This is useful if the default address  \ncardano-node: clashes with some third-party library.  \ncardano-node: -xn Use the non-moving collector for the old generation.  \ncardano-node: -m<n> Minimum % of heap which must be available (default 3%)  \ncardano-node: -G<n> Number of generations (default: 2)  \ncardano-node: -c<n> Use in-place compaction instead of copying in the oldest generation  \ncardano-node: when live data is at least <n>% of the maximum heap size set with  \ncardano-node: -M (default: 30%)  \ncardano-node: -c Use in-place compaction for all oldest generation collections  \ncardano-node: (the default is to use copying)  \ncardano-node: -w Use mark-region for the oldest generation (experimental)  \ncardano-node: -I<sec> Perform full GC after <sec> idle time (default: 0.3, 0 == off)  \ncardano-node:  \ncardano-node: -T Collect GC statistics (useful for in-program statistics access)  \ncardano-node: -t[<file>] One-line GC statistics (if <file> omitted, uses stderr)  \ncardano-node: -s[<file>] Summary GC statistics (if <file> omitted, uses stderr)  \ncardano-node: -S[<file>] Detailed GC statistics (if <file> omitted, uses stderr)  \ncardano-node:  \ncardano-node:  \ncardano-node: -Z Don't squeeze out update frames on stack overflow  \ncardano-node: -B Sound the bell at the start of each garbage collection  \ncardano-node: -h Heap residency profile (output file <program>.hp)  \ncardano-node: -hT Produce a heap profile grouped by closure type  \ncardano-node: -i<sec> Time between heap profile samples (seconds, default: 0.1)  \ncardano-node:  \ncardano-node: -C<secs> Context-switch interval in seconds.  \ncardano-node: 0 or no argument means switch as often as possible.  \ncardano-node: Default: 0.02 sec.  \ncardano-node: -V<secs> Master tick interval in seconds (0 == disable timer).  \ncardano-node: This sets the resolution for -C and the heap profile timer -i,  \ncardano-node: and is the frequency of time profile samples.  \ncardano-node: Default: 0.01 sec.  \ncardano-node:  \ncardano-node: -N[<n>] Use <n> processors (default: 1, -N alone determines  \ncardano-node: the number of processors to use automatically)  \ncardano-node: -maxN[<n>] Use up to <n> processors automatically  \ncardano-node: -qg[<n>] Use parallel GC only for generations >= <n>  \ncardano-node: (default: 0, -qg alone turns off parallel GC)  \ncardano-node: -qb[<n>] Use load-balancing in the parallel GC only for generations >= <n>  \ncardano-node: (default: 1 for -A < 32M, 0 otherwise;  \ncardano-node: -qb alone turns off load-balancing)  \ncardano-node: -qn<n> Use <n> threads for parallel GC (defaults to value of -N)  \ncardano-node: -qa Use the OS to set thread affinity (experimental)  \ncardano-node: -qm Don't automatically migrate threads between CPUs  \ncardano-node: -qi<n> If a processor has been idle for the last <n> GCs, do not  \ncardano-node: wake it up for a non-load-balancing parallel GC.  \ncardano-node: (0 disables, default: 0)  \ncardano-node: --numa[=<node_mask>]  \ncardano-node: Use NUMA, nodes given by <node_mask> (default: off)  \ncardano-node: --install-signal-handlers=<yes|no>  \ncardano-node: Install signal handlers (default: yes)  \ncardano-node: -e<n> Maximum number of outstanding local sparks (default: 4096)  \ncardano-node: -xp Assume that all object files were compiled with -fPIC  \ncardano-node: -fexternal-dynamic-refs and load them anywhere in the address  \ncardano-node: space  \ncardano-node: -xm Base address to mmap memory in the GHCi linker  \ncardano-node: (hex; must be <80000000)  \ncardano-node: -xq The allocation limit given to a thread after it receives  \ncardano-node: an AllocationLimitExceeded exception. (default: 100k)  \ncardano-node:  \ncardano-node: -Mgrace=<n>  \ncardano-node: The amount of allocation after the program receives a  \ncardano-node: HeapOverflow exception before the exception is thrown again, if  \ncardano-node: the program is still exceeding the heap limit.  \ncardano-node:  \ncardano-node: RTS options may also be specified using the GHCRTS environment variable.  \ncardano-node:  \ncardano-node: Other RTS options may be available for programs compiled a different way.  \ncardano-node: The GHC User's Guide has full details.`",
  "images": [],
  "extraction_metadata": {
    "batch_number": 9,
    "extraction_timestamp": "2025-09-19T14:05:00.496633",
    "extraction_time": 2.430634021759033,
    "source": "tavily_api_raw"
  }
}