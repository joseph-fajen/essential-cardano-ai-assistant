{
  "url": "https://developers.cardano.org/docs/transaction-metadata/retrieving-metadata",
  "content": "![Cardano Logo](/img/cardano-black.svg)\n![Cardano Logo](/img/cardano-white.svg)\n\n# Retrieving your metadata\n\n## Overview[​](#overview \"Direct link to Overview\")\n\nThere are many ways to retrieve metadata stored in the **Cardano** blockchain. This article discusses the different components and ways that can help us retrieve all kinds of blockchain data.\n\n## Blockfrost[​](#blockfrost \"Direct link to Blockfrost\")\n\n[Blockfrost](/docs/get-started/blockfrost/get-started) provides an **API** to access the **Cardano** blockchain fast and easily.\n\nTo retrieve metadata using **Blockfrost**, we call a specific endpoint for **transaction metadata** that they provide.\n\n\\*\\* Query 1337 Metadata \\*\\*\n\n`curl -H 'project_id: <api_key>' https://cardano-mainnet.blockfrost.io/api/v0/metadata/txs/labels/1337 | jq`\n\nYou should see something like this:\n\n`[  \n {  \n \"tx_hash\": \"a54d000ad56cf5b4afe769b5d74b51a5817dc44102c7f8286887e28bf257a2fd\",  \n \"json_metadata\": \"gimbalabs-poc\"  \n },  \n {  \n \"tx_hash\": \"b26cc2323d6212a0396fa4ddb35578648853ef769e2e427d92019d50163f636a\",  \n \"json_metadata\": \"go build\"  \n }  \n]`\n\nIn this example, we query the **Cardano Mainnet** for any metadata under the key `1337`. We see a few of the many metadata that is already inserted into the **Cardano** blockchain under that key. It is now up to your implementation how you want to cache and sort through all the data that lives on-chain. **Blockfrost** provides `paging` and `ordering` parameters.\n\n`1337`\n`paging`\n`ordering`\n\nPlease visit their official [documentation](https://docs.blockfrost.io) to know more.\n\n## cardano-db-sync[​](#cardano-db-sync \"Direct link to cardano-db-sync\")\n\n@TODO\n\n## cardano-graphql[​](#cardano-graphql \"Direct link to cardano-graphql\")\n\n@TODO\n\n## cardano-wallet[​](#cardano-wallet \"Direct link to cardano-wallet\")\n\nThis Section assumes that you have basic understanding of `cardano-wallet`, how to use it and that you have installed it into your system. Otherwise we recommend reading [Installing cardano-node](/docs/operate-a-stake-pool/node-operations/installing-cardano-node), [Running cardano-node](/docs/operate-a-stake-pool/node-operations/running-cardano) and [Exploring Cardano Wallets](/docs/integrate-cardano/creating-wallet-faucet) guides first.\n\n`cardano-wallet`\n\nThis guide also assumes that you have `cardano-node` and `cardano-wallet` running in the background and connected to one of the `testnet` networks.\n\n`cardano-node`\n`cardano-wallet`\n`testnet`\n\nTo retrieve all the Metadata for the transactions of a selected Wallet you just need to query the wallet transactions, passing as filter '.[].metadata'\n\n`curl --url 'http://localhost:1337/v2/wallets/41263958f6668e06190be661900f7129be78d583/transactions' | jq '.[].metadata'`\n\n***It is important to note that the `41263958f6668e06190be661900f7129be78d583` string is actually the `wallet.id` of a previously generated wallet.***\n\n`41263958f6668e06190be661900f7129be78d583`\n`wallet.id`\n\nThe `JSON` returning all Wallet Transactions Metadata will have some format like below (**considering the Metadata created for these transactions has these values**):\n\n`JSON`\n`{  \n \"1337\": {  \n \"map\": [  \n {  \n \"k\": {  \n \"string\": \"name\"  \n },  \n \"v\": {  \n \"string\": \"hello world\"  \n }  \n },  \n {  \n \"k\": {  \n \"string\": \"completed\"  \n },  \n \"v\": {  \n \"int\": 0  \n }  \n }  \n ]  \n }  \n}`\n\nA similar command may be used to retrieve the Metadata of a single transaction.\n\n`curl --url 'http://localhost:1338/v2/wallets/41263958f6668e06190be661900f7129be78d583/transactions/fab2e2a42b465d0f86452521521a2853597a58d31c5b29663b7e615cd2b2eb47' | jq '.metadata'`\n\n`41263958f6668e06190be661900f7129be78d583` string is actually the `wallet.id` of a previously generated wallet.\n\n`41263958f6668e06190be661900f7129be78d583`\n`wallet.id`\n\n`fab2e2a42b465d0f86452521521a2853597a58d31c5b29663b7e615cd2b2eb47` string is the `transaction.id`.\n\n`fab2e2a42b465d0f86452521521a2853597a58d31c5b29663b7e615cd2b2eb47`\n`transaction.id`\n\nThe `JSON` returning the single Transaction Metadata will have some format like below (**considering the Metadata created for these transactions has these values**):\n\n`JSON`\n`{  \n \"1337\": {  \n \"map\": [  \n {  \n \"k\": {  \n \"string\": \"name\"  \n },  \n \"v\": {  \n \"string\": \"hello world\"  \n }  \n },  \n {  \n \"k\": {  \n \"string\": \"completed\"  \n },  \n \"v\": {  \n \"int\": 0  \n }  \n }  \n ]  \n }  \n}`\n\n## Ogmios[​](#ogmios \"Direct link to Ogmios\")\n\n@TODO",
  "images": [],
  "extraction_metadata": {
    "batch_number": 13,
    "extraction_timestamp": "2025-09-19T14:05:20.866384",
    "extraction_time": 0.7005529403686523,
    "source": "tavily_api_raw"
  }
}