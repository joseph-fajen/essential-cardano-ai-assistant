{
  "url": "https://developers.cardano.org/docs/smart-contracts/smart-contract-languages/plutarch/production-grade-dapps/bridge-template",
  "content": "![Cardano Logo](/img/cardano-black.svg)\n![Cardano Logo](/img/cardano-white.svg)\n\n# Bridge Contracts\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nIn the ever-evolving landscape of blockchain technology, interoperability has emerged as a critical feature, enabling disparate blockchain networks to communicate and share information seamlessly. Bridge contracts play a pivotal role in this domain, facilitating the secure and efficient transfer of assets and data across different blockchain ecosystems. This educational resource delves into the concept of bridge contracts, offering developers insights into their implementation and integration within decentralized applications (DApps).\n\nThe source code for these dApps can be found [here](https://github.com/Anastasia-Labs/bridge-template).\n\n## Understanding Bridge Contracts[​](#understanding-bridge-contracts \"Direct link to Understanding Bridge Contracts\")\n\nBridge contracts are smart contracts designed to connect two or more blockchain networks, allowing them to interact with each other. This interaction can involve the transfer of cryptocurrencies, tokenized assets, or arbitrary data, making it possible for DApps to leverage the unique strengths of multiple blockchains.\n\n### Key Features[​](#key-features \"Direct link to Key Features\")\n\n**Interoperability**: Enables DApps to function across different blockchain platforms, broadening their usability and reach.\n\n**Asset Transfer**: Facilitates the movement of digital assets, such as tokens or cryptocurrencies, between blockchains.\n\n**Data Sharing**: Allows for the exchange of information between networks, which can be critical for applications that rely on cross-chain data.\n\n### Flows[​](#flows \"Direct link to Flows\")\n\nThe following documentation describes the sequence of operations for bridge contracts that facilitate the wrapping and unwrapping of tokens between the Cardano blockchain and another blockchain, referred to as the X-chain. Two diagrams illustrate the processes of \"minting wrapped tokens\" and \"burning wrapped tokens,\" representing cross-chain interactions.\n\n#### Minting Wrapped Tokens[​](#minting-wrapped-tokens \"Direct link to Minting Wrapped Tokens\")\n\nThe minting process involves wrapping a token from the X-chain to the Cardano blockchain.\n\nProcess Description:\n\nThe User initiates a request to wrap a specific amount of token T using their X Wallet.\n\nThe X Wallet sends the request to the Bridge Node.\n\nThe Bridge Node communicates with the X Contract to verify the token T.\n\nUpon successful validation, the X Contract notifies the Bridge Node.\n\nThe Bridge Node then instructs the Cardano Contract to mint the equivalent wrap-T token.\n\nThe Cardano Contract deposits the wrap-T token into the User's Cardano Wallet.\n\nThe User receives the wrap-T token in their Cardano Wallet, completing the wrapping process.\n\n#### Burning Wrapped Tokens[​](#burning-wrapped-tokens \"Direct link to Burning Wrapped Tokens\")\n\nThe burning process involves unwrapping a wrapped token from the Cardano blockchain back to the original token on the X-chain.\n\nProcess Description:\n\nThe User requests to burn a specific amount of wrap-T token using their Cardano Wallet.\n\nThe Cardano Wallet sends the burn request to the Bridge Node.\n\nThe Bridge Node verifies the wrap-T token with the Cardano Contract.\n\nUpon successful validation, the Cardano Contract confirms with the Bridge Node.\n\nThe Bridge Node then instructs the X Contract to burn the wrap-T token.\n\nThe X Contract unwraps the burned token to the original token T and sends it to the User's X Wallet.\n\nThe User receives the original token T in their X Wallet, completing the unwrapping process\n\n## Cardano side contracts[​](#cardano-side-contracts \"Direct link to Cardano side contracts\")\n\n### GuardianValidator Contract[​](#guardianvalidator-contract \"Direct link to GuardianValidator Contract\")\n\nThe `GuardianValidator` contract serves as a crucial checkpoint in the transaction process. It receives and assesses requests, determining their eligibility based on specific criteria.\n\n`GuardianValidator`\n\n### MultiSigMintPolicy Contract[​](#multisigmintpolicy-contract \"Direct link to MultiSigMintPolicy Contract\")\n\nThe `MultiSigMintPolicy` contract is pivotal in managing the minting aspect of multisignature transactions. It is responsible for issuing minting certificates, which are essential for transactions involving the multisig Validator.\n\n`MultiSigMintPolicy`\n\n### MultiSigValidator Contract[​](#multisigvalidator-contract \"Direct link to MultiSigValidator Contract\")\n\nThe `MultiSigValidator` contract plays a key role in ensuring the integrity of transactions originating from the `GuardianValidator`. It verifies that all transactions have the necessary number of signatures before proceeding.\n\n`MultiSigValidator`\n`GuardianValidator`\n\n### WrapMintPolicy Contract[​](#wrapmintpolicy-contract \"Direct link to WrapMintPolicy Contract\")\n\nThe `WrapMintPolicy` contract is tasked with the controlled minting and burning of tokens in response to requests validated by the `GuardianValidator`.\n\n`WrapMintPolicy`\n`GuardianValidator`\n\nEach contract within this system contributes to a secure, efficient, and compliant framework for handling complex multisignature transactions on the Cardano blockchain, reinforcing the robustness and flexibility of blockchain operations.\n\n## Transactions[​](#transactions \"Direct link to Transactions\")\n\n### Deploy multisig validator[​](#deploy-multisig-validator \"Direct link to Deploy multisig validator\")\n\nThis step involves the initialization of the multisig validator. It includes minting Multisig Certification tokens and transferring them to the multisig validator address. Alongside the tokens, a datum is sent containing a list of public key hashes of the validators and the required number of signatures to authorize a multisig transaction.\n\n![deploy.png](/assets/images/deploy-28170508a8acbf19ebbe458a56ccc81c.png)\n\n![deploy.png](/assets/images/deploy-28170508a8acbf19ebbe458a56ccc81c.png)\n\n### User request[​](#user-request \"Direct link to User request\")\n\nUsers initiate requests to the guardian validator. These requests include a datum that specifies the number of tokens to be wrapped or burned, the target address on the other blockchain, and the user's own Cardano address. This process is the primary interface for users to interact with the multisig system for cross-chain transactions.\n\n![request.png](/assets/images/request-0de8e3de068bb732ea10c586562da2cb.png)\n\n![request.png](/assets/images/request-0de8e3de068bb732ea10c586562da2cb.png)\n\n### Multisig fulfill[​](#multisig-fulfill \"Direct link to Multisig fulfill\")\n\nIn this phase, the multisig system aggregates requests from the guardian validator. It utilizes the certification tokens in the multisig validator to mint or burn bridge tokens as specified in the user requests. This step ensures that the user's cross-chain transaction requests are processed and fulfilled accurately.\n\n![fulfill.png](/assets/images/fulfill-1ab239538764e6737fecccaf68fe3cf9.png)\n\n![fulfill.png](/assets/images/fulfill-1ab239538764e6737fecccaf68fe3cf9.png)\n\nThese operations are not merely transactions but represent the establishment of a cohesive and interconnected blockchain environment where assets and data move fluidly, unlocking new possibilities in the realm of DApps. The `GuardianValidator`, `MultiSigMintPolicy`, and `WrapMintPolicy` contracts, each play a distinct and critical role in ensuring these cross-chain interactions are performed without compromising the integrity and security of the networks involved.\n\n`GuardianValidator`\n`MultiSigMintPolicy`\n`WrapMintPolicy`\n\nFor developers and users alike, the understanding and application of bridge contracts will be instrumental in crafting DApps that are not just bound to a single blockchain but are truly global and universally accessible.",
  "images": [],
  "extraction_metadata": {
    "batch_number": 12,
    "extraction_timestamp": "2025-09-19T14:05:17.156321",
    "extraction_time": 1.6163160800933838,
    "source": "tavily_api_raw"
  }
}