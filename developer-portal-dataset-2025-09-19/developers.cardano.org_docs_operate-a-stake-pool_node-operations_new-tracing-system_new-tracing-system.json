{
  "url": "https://developers.cardano.org/docs/operate-a-stake-pool/node-operations/new-tracing-system/new-tracing-system",
  "content": "![Cardano Logo](/img/cardano-black.svg)\n![Cardano Logo](/img/cardano-white.svg)\n\n# Quick start\n\n`TraceOptions`\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nThis document provides an overview of the **New Tracing System**'s functionality, configuration, and modes of operation. The system has been designed to offer flexible and efficient monitoring of Cardano nodes through trace forwarding and hierarchical trace message handling.\n\n#### Functionality Split between Node and Tracer[​](#functionality-split-between-node-and-tracer \"Direct link to Functionality Split between Node and Tracer\")\n\nThe new system separates monitoring responsibilities between the **Cardano Node** and the **Cardano Tracer** services. This modular approach ensures the node focuses on core operations, while `cardano-tracer` manages logging, monitoring, and external communication.\n\n`cardano-tracer`\n\n#### Introducing Trace Forwarding[​](#introducing-trace-forwarding \"Direct link to Introducing Trace Forwarding\")\n\nTrace forwarding enables seamless transmission of trace data and metrics from nodes to a centralized tracer service. This feature simplifies remote monitoring and supports scenarios where multiple nodes are monitored by a single `cardano-tracer` instance. Forwarding via Unix domain sockets or Windows named pipes is the preferred option, although support for forwarding over TCP/IP exists.\n\n`cardano-tracer`\n\n#### Hierarchical Namespaces for Trace Messages[​](#hierarchical-namespaces-for-trace-messages \"Direct link to Hierarchical Namespaces for Trace Messages\")\n\nTo streamline configuration, the system now uses **hierarchical namespaces** for trace messages instead of directly referencing tracers. This change improves manageability and aligns trace configuration with logical groupings.\n\n#### Modes of Operation[​](#modes-of-operation \"Direct link to Modes of Operation\")\n\nThe new tracing system supports several modes of operation to suit different deployment scenarios:\n\n**Without Forwarding:** The node operates independently and writes trace messages to `stdout`. Metrics can be exposed by using the `PrometheusSimple` backend.\n\n`stdout`\n`PrometheusSimple`\n\n**One Node, One Cardano Tracer:** The tracer connects to a single node over socket (or loopback device). Trace output and metrics are forwarded to the tracer, and are available according to its configuration.\n\n**One Tracer, Many Nodes:** A single tracer connects to multiple nodes over socket (possibly via SSH tunnel between hosts) or over IPv4 / IPv6. Forwarding works exactly as described under the previous point.\n\n#### Two-Part Configuration[​](#two-part-configuration \"Direct link to Two-Part Configuration\")\n\nThe configuration for the new tracing system is distributed across two key components:\n\n**Node Configuration File**\n\n**Cardano Tracer Configuration File**\n\nThese configurations work together to ensure efficient communication between the node and the tracer, providing a flexible and robust monitoring setup.\n\n## Configuration and use of **Cardano Tracer**[​](#configuration-and-use-of-cardano-tracer \"Direct link to configuration-and-use-of-cardano-tracer\")\n\n`cardano-tracer` is a key component of the new tracing infrastructure. It operates as a standalone service that consumes trace messages from `cardano-node`, processes them, and provides outputs for monitoring and analysis.\n\n`cardano-tracer`\n`cardano-node`\n\n**Key Features:**\n\nBelow is an example of configuring a simple use case: a node and `cardano-tracer` running on the same machine.\n\n`cardano-tracer`\n\n#### Step 1: Transport from Node to Tracer[​](#step-1-transport-from-node-to-tracer \"Direct link to Step 1: Transport from Node to Tracer\")\n\nAdd the following option to the Cardano node's CLI arguments:\n\n`--tracer-socket-path-connect /tmp/forwarder.sock`\n\nThis instructs the node to forward trace messages to `cardano-tracer` via the specified socket path. The system only supports its own transport layer, the 'forwarding protocol'.\n\n`cardano-tracer`\n\n#### Step 2: Build and Run `cardano-tracer`[​](#step-2-build-and-run-cardano-tracer \"Direct link to step-2-build-and-run-cardano-tracer\")\n\n`cardano-tracer`\n\nBuild and run `cardano-tracer` using either `cabal` or `nix`. Below are examples for both methods.\n\n`cardano-tracer`\n`cabal`\n`nix`\n\n**Using Cabal:**\n\n`cabal build cardano-tracer && cabal install cardano-tracer --installdir=PATH_TO_DIR --overwrite-policy=always  \ncd PATH_TO_DIR  \n./cardano-tracer --config PATH_TO_CONFIG`\n\n**Using Nix:**\n\n`nix build github://github.com/IntersectMBO/cardano-node#cardano-tracer  \n./result/bin/cardano-tracer --config PATH_TO_CONFIG`\n\nReplace `PATH_TO_CONFIG` with the path to your `cardano-tracer` configuration file (see next step).\n\n`PATH_TO_CONFIG`\n`cardano-tracer`\n\n#### Step 3: Minimal Example Configuration[​](#step-3-minimal-example-configuration \"Direct link to Step 3: Minimal Example Configuration\")\n\nBelow is an example configuration for a single-node-to-single-tracer setup. The system's forwarding protocol encodes the network magic, so it is mandatory to provide one. Both ends of trace forwarding require the same magic; the example uses the one for mainnet:\n\n**Minimal Example:**\n\n`networkMagic: 764824073  \nnetwork:  \n tag: AcceptAt  \n contents: \"/tmp/forwarder.sock\"  \nlogging:  \n- logRoot: \"/tmp/cardano-tracer-logs\"  \n logMode: FileMode  \n logFormat: ForMachine`\n`network`\n`logging`\n`/tmp/cardano-tracer-logs`\n\n#### Step 4: Running the Setup[​](#step-4-running-the-setup \"Direct link to Step 4: Running the Setup\")\n\nStarting with Node `10.2`, the new tracing system is chosen by default. On previous versions, it can be explicitly enabled in the config by setting `UseTraceDispatcher: true`.\n\n`10.2`\n`UseTraceDispatcher: true`\n\nGo through the adjustments for your Node configuration file (next chapter). When this is done, and `cardano-tracer` is running, start the Node. It will establish a connection to `cardano-tracer` and begin forwarding trace messages. The tracer will process these messages and generate logs in the specified directory (`/tmp/cardano-tracer-logs`).\n\n`cardano-tracer`\n`cardano-tracer`\n`/tmp/cardano-tracer-logs`\n\n### Advanced Configuration[​](#advanced-configuration \"Direct link to Advanced Configuration\")\n\nFor more complex setups, such as monitoring multiple nodes or exposing metrics via Prometheus, additional configuration examples are available. Please refer to the [Cardano Tracer Documentation](https://github.com/intersectmbo/cardano-node/blob/master/cardano-tracer/docs/cardano-tracer.md) for detailed guidance on advanced setups and use cases.\n\n#### Forwarding over TCP[​](#forwarding-over-tcp \"Direct link to Forwarding over TCP\")\n\nIn addition to forwarding over sockets, forwarding over TCP/IP is supported. In both cases, the 'forwarding protocol' is identical. For TCP forwarding, adjust the following:\n\n*From Step 1* - replace node CLI option:\n\n`--tracer-socket-network-connect 10.0.0.2:34567`\n\n*From Step 3* - adjust value for `network` in `cardano-tracer`'s configuration:\n\n`network`\n`cardano-tracer`\n`network:  \n tag: AcceptAt  \n contents: \"0.0.0.0:34567\"`\n\nIn this example, `cardano-tracer` listens on port 34567. Nodes can connect via IPv4 for forwarding, with `10.0.0.2` being `cardano-tracer`'s IP in that example.\n\n`cardano-tracer`\n`10.0.0.2`\n`cardano-tracer`\n\nOn same-host setups sockets are always preferrable due to less overhead and better performance. On multi-host setups, socket connection via SSH tunnels is always preferrable due to increased security.\n\nUse TCP forwarding **if and only if** you control each and every aspect of the environment, such as port mapping or firewalls, or virtual network setup - the 'forwarding protocol' does not implement encrypting traffic nor authentication methods.\n\n## Node-side configuration of new tracing[​](#node-side-configuration-of-new-tracing \"Direct link to Node-side configuration of new tracing\")\n\n### Node-side configuration of new tracing: `TraceOptions`[​](#node-side-configuration-of-new-tracing-traceoptions \"Direct link to node-side-configuration-of-new-tracing-traceoptions\")\n\n`TraceOptions`\n\nThe new tracing system uses **namespaces** for configuration values, enabling fine-grained control down to individual messages. More specific configuration values will override general ones, allowing for a flexible hierarchical setup.\nThe values are provided in the new `TraceOptions` object in the node configuration file, which we'll further inspect here:\n\n`TraceOptions`\n\n#### 1. Specify Message Severity Filter[​](#1-specify-message-severity-filter \"Direct link to 1. Specify Message Severity Filter\")\n\nDefine the **severity level** of messages you want to be included in trace output. More specific namespaces override more general ones.\n\n**Example:**\n\n`# namespace root - applies to all dependent messages (*): show messages of severity Notice or higher  \n\"\":  \n severity: Notice  \n  \n# ChainDB messages: show messages of severity Info or higher  \n# Overrides setting from namespace root, being more specific, and applies to all dependent messages (ChainDB.*).  \nChainDB:  \n severity: Info`\n\nTo suppress all messages pertaining to a namespace, use the severity level `Silence`.\n\n`Silence`\n\nFor a map of the entire namespace of trace messages, please refer to the [Cardano Trace Documentation](https://github.com/input-output-hk/cardano-node-wiki/blob/main/docs/new-tracing/tracers_doc_generated.md).\n\n#### 2. Specify Message Detail Level[​](#2-specify-message-detail-level \"Direct link to 2. Specify Message Detail Level\")\n\nConfigure the **detail level** for the messages to control the amount of information rendered for each message.\n\n**Example:**\n\n`\"\":  \n severity: Notice  \n detail: DNormal`\n`DMinimal`\n`DNormal`\n`DDetailed`\n`DMaximum`\n\n*Note*: Trace messages might choose to not support every detail level in their implementation - or only one; the highest matching detail level will then be chosen for rendering.\n\n#### 3. Specify Message Frequency Limiters[​](#3-specify-message-frequency-limiters \"Direct link to 3. Specify Message Frequency Limiters\")\n\nUse **frequency limiters** to control how often messages are displayed. This replaces the old 'eliding tracers' functionality.\n\n**Example:**\n\n`ChainDB.AddBlockEvent.AddedBlockToQueue:  \n # Show a maximum of 2 messages per second  \n maxFrequency: 2.0`\n\nSetting `maxFrequency: 0.0` disables frequency limiting - which is the default.\n\n`maxFrequency: 0.0`\n\n#### 4. Specify backends for trace data[​](#4-specify-backends-for-trace-data \"Direct link to 4. Specify backends for trace data\")\n\nDefine the **backends** that will be enabled inside the Node to process trace data.\n\n**Example:**\n\n`\"\":  \n severity: Notice  \n detail: DNormal  \n backends:  \n - Stdout MachineFormat  \n - EKGBackend  \n - Forwarder  \n - PrometheusSimple 127.0.0.1 12798`\n`Stdout MachineFormat`\n`Stdout HumanFormatColoured`\n`Stdout HumanFormatUncoloured`\n`EKGBackend`\n`Forwarder`\n`cardano-tracer`\n`PrometheusSimple`\n`localhost:12798/metrics`\n\n*Note*: For standard output, trace messages that do not implement a text format might be displayed as JSON.\n\n*Note*: Metrics, although being based on trace data, are **independent** of trace messages. This means, you can access all metrics even if their corresponding trace messages are filtered out or silenced in your configuration. It also means, they can be forwarded to `cardano-tracer` even when you don't forward their corresponding trace messages\n\n`cardano-tracer`\n\nPlease make sure to enable the `Forwarder` backend **if and only if** you intend to consume the trace ouput with a running `cardano-tracer` instance. In case of unreliable forwarding connections, the Node generously buffers traces that have not been consumed; and though the buffer is bounded, you will experience permanently increased RAM usage if traces are never consumed at all.\n\n`Forwarder`\n`cardano-tracer`\n\nPlease make sure to enable the `PrometheusSimple` backend **if and only if** you intend to scrape the node process itself for metrics. This way, you avoid exposing the node over an open port unnecessarily.\n\n`PrometheusSimple`\n\n### Node-side configuration of new tracing: other fields[​](#node-side-configuration-of-new-tracing-other-fields \"Direct link to Node-side configuration of new tracing: other fields\")\n\nIn addition to providing a `TraceOptions` entry, the new tracing system introduces additional configuration values in the node configuration file:\n\n`TraceOptions`\n`TraceOptionNodeName`\n`cardano-tracer`\n`TraceOptionMetricsPrefix`\n`\"cardano.node.metrics.\"`\n`UseTraceDispatcher`\n\n### Configuration formats and fallback[​](#configuration-formats-and-fallback \"Direct link to Configuration formats and fallback\")\n\nConfigurations can be written in both **JSON** and **YAML**. The examples in this document are provided in **YAML** for readability.\n\nA full example of a mainnet node config file utilizing various settings for the new tracing system can be found here: [mainnet-config.json](https://github.com/IntersectMBO/cardano-node/blob/master/configuration/cardano/mainnet-config.json)\n\nThere's a sensible **fallback** configuration hard-coded inside a Haskell module of the Node: [Cardano.Node.Tracing.DefaultTraceConfig](https://github.com/intersectmbo/cardano-node/blob/master/cardano-node/src/Cardano/Node/Tracing/DefaultTraceConfig.hs). It is important to state the `TraceOptions` from this fallback will be used if and only if the `TraceOptions` object in your Node configuration is empty.\n\n`TraceOptions`\n`TraceOptions`\n\n### Old Tracing and New Tracing[​](#old-tracing-and-new-tracing \"Direct link to Old Tracing and New Tracing\")\n\nThe **old tracing system** is slated for decommissioning but will coexist with the **new tracing system** during a transitional grace period of approximately **3 to 6 months**. During this time, both systems will remain part of the default `cardano-node` build, ensuring compatibility and easing the migration process.\n\n`cardano-node`\n\n#### Switching Between Tracing Systems[​](#switching-between-tracing-systems \"Direct link to Switching Between Tracing Systems\")\n\n`UseTraceDispatcher: true`\n`UseTraceDispatcher: false`\n\n#### Deprecation of the `kind` field in trace messages[​](#deprecation-of-the-kind-field-in-trace-messages \"Direct link to deprecation-of-the-kind-field-in-trace-messages\")\n\n`kind`\n\nCertain legacy features will be deprecated to simplify and unify the tracing infrastructure. Specifically:\n\n`kind`\n`ns`\n\n## You're set![​](#youre-set \"Direct link to You're set!\")\n\n### Feedback and Reporting[​](#feedback-and-reporting \"Direct link to Feedback and Reporting\")\n\nYour feedback is invaluable during this transition. Please help us improve the system by reporting any regressions, issues or difficulties integrating with existing automations while using the new tracing infrastructure.\n\n### Developers only: developing new tracers during transition time[​](#developers-only-developing-new-tracers-during-transition-time \"Direct link to Developers only: developing new tracers during transition time\")\n\nDuring the transition from old to new tracing system, we recommend the following best practices for developing tracers:\n\n**Avoid Using Strictness Annotations for Trace types**\nTrace messages are either discarded immediately or quickly converted into another format for processing. They are never stored for long durations. Using strictness annotations can make the code less efficient without adding any tangible benefits. Additionally, strictness annotations do not align well with the prototype requirements for messages in the new framework.\n\n**Prioritize Developing New Tracers**\nFocus on developing new tracers first and then map them to the old tracers. This approach ensures compatibility while future-proofing your work, as the new tracers will remain in use after the old system is decommissioned. You can find numerous examples in\n`cardano-nodes` source code in module `Cardano.Node.Tracing.Tracers`.\n\n`cardano-nodes`\n`Cardano.Node.Tracing.Tracers`\n\n**Leverage Expertise**\nIf you have questions or need reviews for your tracers, reach out to the **Performance & Tracing Team**.\n\n**`kind` Fields**\nAs described above, keep in mind the `kind` field will be removed eventually; please rely on namespaces when analysing trace messages.\n\n`kind`\n`kind`\n\n### Documentation and References[​](#documentation-and-references \"Direct link to Documentation and References\")\n\nTo support users, administrators and developers, the following documentation provides comprehensive insights into trace messages, metrics, and data points:\n\n**Trace Messages and Default Configuration**:\nThis periodically regenerated document catalogs all trace messages, metrics, and data points in `cardano-node`. It also illustrates how these messages are handled with the current default configuration:\n[Cardano Trace Documentation](https://github.com/input-output-hk/cardano-node-wiki/blob/main/docs/new-tracing/tracers_doc_generated.md)\n\n`cardano-node`\n\n**Trace-Dispatcher Library**:\nThis document describes the underlying library powering the new tracing system. It provides details about its design, flexibility, and efficiency:\n[trace-dispatcher: Efficient, Simple, and Flexible Program Tracing](https://github.com/intersectmbo/cardano-node/blob/master/trace-dispatcher/doc/trace-dispatcher.md)\n\n**Cardano Tracer**:\nFor information about the `cardano-tracer` service, which facilitates logging and monitoring, refer to its dedicated documentation:\n[Cardano Tracer Documentation](https://github.com/intersectmbo/cardano-node/blob/master/cardano-tracer/docs/cardano-tracer.md)\n\n`cardano-tracer`\n`TraceOptions`",
  "images": [],
  "extraction_metadata": {
    "batch_number": 9,
    "extraction_timestamp": "2025-09-19T14:05:00.496633",
    "extraction_time": 2.430634021759033,
    "source": "tavily_api_raw"
  }
}