{
  "url": "https://developers.cardano.org/docs/get-started/cli-operations/basic-operations/stake-address-registration",
  "content": "![Cardano Logo](/img/cardano-black.svg)\n![Cardano Logo](/img/cardano-white.svg)\n\n# Stake address registration\n\nTo integrate the latest (Conway) era, which differs significantly from previous eras, `cardano-cli` has introduced `<era>` as a top-level command, replacing the former `<era>` flags. For example, instead of using era-specific flags like `--babbage-era` with commands such as `cardano-cli transaction build --babbage-era`, users must now utilize the syntax `cardano-cli <era> transaction build <options>`.\n\n`cardano-cli`\n`<era>`\n`<era>`\n`--babbage-era`\n`cardano-cli transaction build --babbage-era`\n`cardano-cli <era> transaction build <options>`\n\n## Registering a stake address[​](#registering-a-stake-address \"Direct link to Registering a stake address\")\n\nTo participate in the protocol, such as delegating stake to a stake pool to earn rewards or, in the Conway era, delegating stake to a delegate representative, you must first register your stake credentials on the chain. This registration is accomplished by submitting a **stake address registration certificate** within a transaction. The process includes paying a deposit, the amount of which is determined by the `stakeAddressDeposit` protocol parameter. You can get the deposit back when you submit a **stake address deregistration certificate**.\n\n`stakeAddressDeposit`\n\nDelegating to a stake pool also involves submitting a certificate to the chain, in this case, a **stake address delegation certificate**.\n\nYou can easily generate such certificates with `cardano-cli`. The corresponding commands can be found under `cardano-cli latest stake-address`:\n\n`cardano-cli`\n`cardano-cli latest stake-address`\n`cardano-cli latest stake-address  \nUsage: cardano-cli latest stake-address   \n ( key-gen  \n | key-hash  \n | build  \n | registration-certificate  \n | deregistration-certificate  \n | stake-delegation-certificate  \n | stake-and-vote-delegation-certificate  \n | vote-delegation-certificate  \n | registration-and-delegation-certificate  \n | registration-and-vote-delegation-certificate  \n | registration-stake-and-vote-delegation-certificate  \n )  \n  \n Stake address commands.`\n\n## Generating the stake address registration certificate[​](#generating-the-stake-address-registration-certificate \"Direct link to Generating the stake address registration certificate\")\n\nQuery the protocol parameters to find out the amount of lovelace required as a deposit for registering a stake address, in this case, it is 2000000 lovelace (two ada):\n\n`cardano-cli latest query protocol-parameters | jq .stakeAddressDeposit  \n2000000`\n\nTo generate the registration certificate, run:\n\n`cardano-cli latest stake-address registration-certificate \\  \n --stake-verification-key-file stake.vkey \\  \n --key-reg-deposit-amt 2000000 \\  \n --out-file registration.cert`\n\nThe 'cborHex' field encodes the details of the certificate:\n\n`cat registration.cert  \n{  \n \"type\": \"CertificateShelley\",  \n \"description\": \"Stake Address Registration Certificate\",  \n \"cborHex\": \"82008200581c521da955ad8f24bdff8d3cb8f5a155c49870037019fcdf20949e7e5e\"  \n}`\n\n## Submitting the stake address registration certificate in a transaction[​](#submitting-the-stake-address-registration-certificate-in-a-transaction \"Direct link to Submitting the stake address registration certificate in a transaction\")\n\nTo submit the registration certificate, you need to build, sign, and submit a transaction. You can use either the `build` or `build-raw` commands. In any case, you need to use the `--certificate-file` flag to include the `registration.cert` in the transaction body.\n\n`build`\n`build-raw`\n`--certificate-file`\n`registration.cert`\n\nIt's important to note that when using `build`, the deposit is automatically included, and the transaction is balanced accordingly. However, when using `build-raw`, you must manually include the deposit. Below, you'll find examples of both methods.\n\n`build`\n`build-raw`\n\n### Using the `build` command[​](#using-the-build-command \"Direct link to using-the-build-command\")\n\n`build`\n`cardano-cli latest transaction build \\  \n --tx-in $(cardano-cli latest query utxo --address $(< payment.addr) --output-json | jq -r 'keys[0]') \\  \n --change-address $(< payment.addr) \\  \n --certificate-file registration.cert \\  \n --out-file tx.raw`\n\nWith the `build` command, you don't need to worry about the transaction fees and deposit, it handles it automatically:\n\n`build`\n\nInspecting the `tx.raw` file reveals that this transaction includes the certificate, and is ready to be signed and submitted.\n\n`tx.raw`\n`cardano-cli debug transaction view --tx-file tx.raw`\n`{  \n \"auxiliary scripts\": null,  \n \"certificates\": [  \n {  \n \"stake address registration\": {  \n \"keyHash\": \"521da955ad8f24bdff8d3cb8f5a155c49870037019fcdf20949e7e5e\"  \n }  \n }  \n ],  \n \"collateral inputs\": [],  \n \"era\": \"Babbage\",  \n \"fee\": \"166733 Lovelace\",  \n \"inputs\": [  \n \"055c758abcc64653f106a55c42d4ff23d6b96e46b73c42a4f830a0aee2ffab11#0\"  \n ],  \n \"metadata\": null,  \n \"mint\": null,  \n \"outputs\": [  \n {  \n \"address\": \"addr_test1qp9khgeajxw8snjjvaaule727hpytrvpsnq8z7h9t3zeue2jrk54ttv0yj7llrfuhr66z4wynpcqxuqeln0jp9y70e0qvjewan\",  \n \"address era\": \"Shelley\",  \n \"amount\": {  \n \"lovelace\": 9997668118  \n },  \n \"network\": \"Testnet\",  \n \"payment credential key hash\": \"4b6ba33d919c784e52677bcfe7caf5c2458d8184c0717ae55c459e65\",  \n \"reference script\": null,  \n \"stake reference\": {  \n \"stake credential key hash\": \"521da955ad8f24bdff8d3cb8f5a155c49870037019fcdf20949e7e5e\"  \n }  \n }  \n ],  \n \"reference inputs\": [],  \n \"required signers (payment key hashes needed for scripts)\": null,  \n \"return collateral\": null,  \n \"total collateral\": null,  \n \"update proposal\": null,  \n \"validity range\": {  \n \"lower bound\": null,  \n \"upper bound\": null  \n },  \n \"withdrawals\": null,  \n \"witnesses\": []  \n}`\n\n### Using the `build-raw` command[​](#using-the-build-raw-command \"Direct link to using-the-build-raw-command\")\n\n`build-raw`\n\nUsing the `build-raw` command involves a slightly more intricate process. Similarly to the steps outlined in [simple transactions](/docs/get-started/cli-operations/basic-operations/simple-transactions), you should calculate the fee yourself, and handle the deposit accordingly.\n\n`build-raw`\n\nQuery the balance of the `payment.addr`:\n\n`payment.addr`\n`cardano-cli latest query utxo --address $(< paymentstake.addr)  \n TxHash TxIx Amount  \n--------------------------------------------------------------------------------------  \n0690c70f117281627fc128ede51b1fe762c2bbc15c2e3d4eff2101c9d2613cd8 0 9999834851 lovelace + TxOutDatumNone`\n\nYou can leverage `jq` by having `cardano-cli` return the output in JSON:\n\n`jq`\n`cardano-cli`\n`cardano-cli latest query utxo --address $(< paymentstake.addr) --output-json  \n{  \n \"0690c70f117281627fc128ede51b1fe762c2bbc15c2e3d4eff2101c9d2613cd8#0\": {  \n \"address\": \"addr_test1qp9khgeajxw8snjjvaaule727hpytrvpsnq8z7h9t3zeue2jrk54ttv0yj7llrfuhr66z4wynpcqxuqeln0jp9y70e0qvjewan\",  \n \"datum\": null,  \n \"datumhash\": null,  \n \"inlineDatum\": null,  \n \"referenceScript\": null,  \n \"value\": {  \n \"lovelace\": 9999834851  \n }  \n }  \n}`\n\nUsing `jq` to parse that JSON\n\n`jq`\n`cardano-cli latest query utxo --address $(< payment.addr) --output-json | jq -r .[].value.lovelace  \n9999834851`\n\nQuery the protocol parameters:\n\n`cardano-cli latest query protocol parameters --out-file pparams.json`\n\nDraft the transaction to calculate its transaction fee:\n\n`cardano-cli latest transaction build-raw \\  \n --tx-in $(cardano-cli latest query utxo --address $(< payment.addr) --output-json | jq -r 'keys[0]') \\  \n --tx-out $(< payment.addr)+\"$(cardano-cli latest query utxo --address $(< payment.addr) --out-file /dev/stdout | jq -r .[].value.lovelace)\" \\  \n --fee 0 \\  \n --certificate-file registration.cert \\  \n --out-file tx.draft`\n\nCalculate the transaction fee, it is useful to assign the output to a variable (`fee`):\n\n`fee`\n`cardano-cli latest transaction calculate-min-fee \\  \n --tx-body-file tx.draft \\  \n --protocol-params-file pparams.json \\  \n --tx-in-count 1 \\  \n --tx-out-count 1 \\  \n --witness-count 1  \n  \n>171089 Lovelace`\n\nCalculate the change of the transaction. Note that the deposit is not explicitly included, instead, you should deduct the deposit amount (2000000 lovelace) from the change **Change = currentBalance - fee - deposit**:\n\nQuery the protocol parameters to get the deposit amount:\n\n`cardano-cli latest query protocol-parameters | jq .stakeAddressDeposit  \n2000000`\n\nQuery the current balance of `payment.addr`:\n\n`payment.addr`\n`cardano-cli latest query utxo --address $(< payment.addr) --output-json | jq -r .[].value.lovelace  \n9999834851`\n`change=$((9999834851 - 171089 - 2000000))`\n\nBuild the transaction:\n\n`cardano-cli latest transaction build-raw \\  \n --tx-in $(cardano-cli latest query utxo --address $(< payment.addr) --output-json | jq -r 'keys[0]') \\  \n --tx-out $(< payment.addr)+$change \\  \n --fee 171089 \\  \n --certificate-file registration.cert \\  \n --out-file tx.raw`\n\n## Sign and submit the transaction[​](#sign-and-submit-the-transaction \"Direct link to Sign and submit the transaction\")\n\n`cardano-cli latest transaction sign \\  \n --tx-body-file tx.raw \\  \n --signing-key-file payment.skey \\  \n --signing-key-file stake.skey \\  \n --out-file tx.signed`\n`cardano-cli latest transaction submit \\  \n --tx-file tx.signed`\n`build`\n`build-raw`",
  "images": [],
  "extraction_metadata": {
    "batch_number": 4,
    "extraction_timestamp": "2025-09-19T14:04:34.999822",
    "extraction_time": 3.8223392963409424,
    "source": "tavily_api_raw"
  }
}