{
  "url": "https://developers.cardano.org/docs/operate-a-stake-pool/improve-grafana-security",
  "content": "![Cardano Logo](/img/cardano-black.svg)\n![Cardano Logo](/img/cardano-white.svg)\n\n# Improve Grafana Security\n\nOnce your Grafana Server is installed, up and running, you can drastically improve its security and accessibility by installing an SSL Reverse Proxy, and enabling 2-Factor Authentication with Google OAuth.\n\n## Prerequisites[​](#prerequisites \"Direct link to Prerequisites\")\n\nNGINX Reverse Proxy :\n\n2FA Google OAuth :\n\n## Nginx Reverse Proxy[​](#nginx-reverse-proxy \"Direct link to Nginx Reverse Proxy\")\n\nThe main issue if you want to access your Grafana Dashboard from anywhere, out-of-the-box, is that you have to expose the application port (http:3000 by default) on the public address of your server. To avoid that, a popular solution is to simply create an SSH tunnel with a port forwarding option to your Grafana Server. A more elegant and still secure solution is to configure a reverse proxy, with an SSL certificate.\n\n### Nginx installation[​](#nginx-installation \"Direct link to Nginx installation\")\n\n**Install nginx**\n\n`sudo apt install nginx`\n\n**Check nginx status**\n\n`sudo systemctl status nginx`\n\n**Create Firewall Rules on your server**\n\nPorts 80 and 443 need to be opened on your Grafana server. Nginx will automatically forward any HTTP requests to HTTPS, but it’s important to have both open, in order for Certbot to renew your SSL certificate every 3 month. Here is an example with UFW : deny any incoming connections, except SSH, HTTP and HTTPS, an allow any outgoing connections. Modify to suit your needs, especially if you are running Grafana on a Stake Pool Relay server, you'll need to add Cardano Port.\n\n`sudo ufw default deny incoming  \nsudo ufw default allow outgoing  \nsudo ufw allow ssh  \nsudo ufw allow 80/tcp  \nsudo ufw allow 443/tcp  \nsudo ufw enable`\n\nNow you should be able to visit your server's public IP address : `http://your-ip-address` which should lead to the default Nginx page.\n\n`http://your-ip-address`\n\n**Create and edit an nginx config file for your Grafana server**\n\n(change with your actual FQDN like grafana.yourdomain.com)\n\n`cd /etc/nginx/sites-enabled  \nsudo nano <your FQDN>.conf`\n\nAdd this block\n\n`server {   \nlisten 80;  \nserver_name <your FQDN>;  \n  \nlocation / {  \nproxy_set_header Host $http_host;  \nproxy_pass http://localhost:3000/;  \n}   \n}`\n\n**Save your file and restart Nginx**\n\n`sudo systemctl restart nginx`\n\nNow access your monitoring server `http://your-FQDN` : you should see the Grafana login page.\n\n`http://your-FQDN`\n\n**Nginx cleanup : remove the default enabled site**\n\n`rm /etc/nginx/sites-enabled/default`\n\n### SSL certificate installation[​](#ssl-certificate-installation \"Direct link to SSL certificate installation\")\n\nNow that we have a working Reverse Proxy on our monitoring server, we are going to add SSL layer to encrypt properly access to your Cardano Stakepool Grafana dashboard. To do this, we are going to use a free SSL certificate provider, Let’s Encrypt, with Certbot.\n\n**Use snap to install certbot**\n\n`sudo snap install core; sudo snap refresh core  \nsudo snap install --classic certbot`\n\n**Make a sym link so you can use certbot command anywhere**\n\n`sudo ln -s /snap/bin/certbot /usr/bin/certbot`\n\n**Start the installation and follow the instructions**\n\n`sudo certbot --nginx`\n\nRespond to prompts to configure your HTTPS settings (FQDN,email..).\nAt the end of installation, you should be able to access your Grafana Server with HTTPS :\n\n`https://your-FQDN`\n\n`https://your-FQDN`\n\n### Post install nginx hardening[​](#post-install-nginx-hardening \"Direct link to Post install nginx hardening\")\n\n**Block any unwanted HTTP method, except PUT POST GET and HEAD and configure websocket**\n\n`sudo nano /etc/nginx/sites-enabled/<your FQDN.conf>`\n\nPaste this line inside your \"location /\" block :\n\n`limit_except PUT GET HEAD POST { deny all; }`\n\nPaste this sub-block inside the first `server {` block\n\n`server {`\n`# Proxy Grafana Live WebSocket connections.  \n location /api/live/ {  \n proxy_http_version 1.1;  \n proxy_set_header Upgrade $http_upgrade;  \n proxy_set_header Connection $connection_upgrade;  \n proxy_set_header Host $http_host;  \n proxy_pass http://grafana;  \n }`\n\nSave and close.\n\n**Nginx configuration file hardening**\n\n`sudo nano /etc/nginx/nginx.conf`\n\nRemove old cipher suites TLSv1.0 and TLSv1.1 : the SSL Settings should look like this :\n\n`##  \n# SSL Settings  \n##  \n  \nssl_protocols TLSv1.2 TLSv1.3; # Dropping SSLv3, ref: POODLE  \nssl_prefer_server_ciphers on;`\n\nPrevent DoS and Buffer Oversized attacks : add this lines inside \"http\" block :\n\n`## Start: Size Limits & Buffer Overflows ##  \n client_body_buffer_size 3K;  \n client_header_buffer_size 3k;  \n client_max_body_size 80k;  \n large_client_header_buffers 2 10k;  \n ## END: Size Limits & Buffer Overflows ##  \n  \n### Directive describes the zone, in which the session states are stored i.e. store in slimits. ###  \n### 1m can handle 32000 sessions with 32 bytes/session, set to 5m x 32000 session ###  \n limit_conn_zone $binary_remote_addr zone=addr:5m;  \n  \n### Control maximum number of simultaneous connections for one session i.e. ###  \n### restricts the amount of connections from a single ip address ###  \n limit_conn addr 10;`\n\nSave and close.\n\n**Restart Nginx server**\n\n`sudo systemctl restart nginx`\n\n## Google OAuth setup[​](#google-oauth-setup \"Direct link to Google OAuth setup\")\n\nWe are going to replace the local login/password access to Grafana server, by a much more robust authentication : Google OAuth. Remember : you must have your mail address on your own domain (see Pre-Requisites), and create a Google account with that address.\n\n### Activate 2FA on your Google Account[​](#activate-2fa-on-your-google-account \"Direct link to Activate 2FA on your Google Account\")\n\nConnect to the Google account you created with your own mail address, and activate 2FA Authentication :\n\n1- In the navigation panel, select Security.\n\n2- Under “Signing in to Google,” select 2-Step Verification. Get started.\n\n3- Follow the on-screen steps.\n\n### Create Google API credentials[​](#create-google-api-credentials \"Direct link to Create Google API credentials\")\n\n1- Go to <https://console.developers.google.com/apis/credentials> and log in with the Google account you created with your own mail address.\n\n2- Click on \"Create Credentials\" on top of the page, and then click OAuth Client ID . (You may have to setup a “Consent page” first. Use defaults, it’s not very\nimportant in our case).\n\n3- Enter these settings :\n\n`https://your-FQDN-used-to-access-your-grafana-server`\n`https://your-FQDN-used-to-access-your-grafana-server/login/google`\n\n4- Click on Create\n\n5- You’ll get a Client ID and Client Secret. Copy them.\n\n### Edit Grafana config file[​](#edit-grafana-config-file \"Direct link to Edit Grafana config file\")\n\n**Open grafana.ini**\n\n`sudo nano /etc/grafana/grafana.ini`\n\n**In the Server section, find this setting and modify it**\n\n`root_url = https://your-FQDN-used-to-access-your-grafana-server/`\n\n**Next, go to the Google Auth section and modify these settings**\n\n`[auth.google] enabled = true  \nclient_id = <copy your Google API client id>  \nclient_secret = <copy your Google API clien secret>  \nscopes = https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email  \nauth_url = https://accounts.google.com/o/oauth2/auth  \ntoken_url = https://accounts.google.com/o/oauth2/token  \nallowed_domains = <your domain, like \"yourdomain.com\">  \nallow_sign_up =false`\n\nSave and close the file\n\n**Restart grafana server**\n\n`sudo systemctl restart grafana-server.service`\n\nAccess to your Grafana FQDN : `https://your-FQDN-used-to-access-your-grafana-server`\n\n`https://your-FQDN-used-to-access-your-grafana-server`\n\nYou should now have a “Sign-in with Google” option on the login page. You can now use the account you created with your own domain name to access your Grafana Cardano dashboards.\n\n### Optional: Admin configuration[​](#optional-admin-configuration \"Direct link to Optional: Admin configuration\")\n\n**Give the Google Account the administrator role, and then remove the local Admin/Password account**\n\n1- Access your Grafana UI with your local Admin account\n\n2- Go to \"Users\", and make your Google Account \"Admin\" by changing its role\n\n3- Log in with your Google Account, go to \"Users\", and remove the local Admin account.\n\n**Disable login form to allow only Google OAuth**\n\n`sudo nano /etc/grafana/grafana.ini`\n\nIn the [auth] section :\n\n`disable_login_form = true`\n\nSave and close the file",
  "images": [],
  "extraction_metadata": {
    "batch_number": 9,
    "extraction_timestamp": "2025-09-19T14:05:00.496633",
    "extraction_time": 2.430634021759033,
    "source": "tavily_api_raw"
  }
}