{
  "url": "https://developers.cardano.org/docs/smart-contracts/smart-contract-languages/aiken/overview",
  "content": "![Cardano Logo](/img/cardano-black.svg)\n![Cardano Logo](/img/cardano-white.svg)\n\n# Aiken\n\n**Aiken** is a modern smart contract platform for Cardano, a pure functional programming language that's small, easy to learn, and built for robustness. This means\nthat most of the time, the compiler is smart enough to determine the type of something\nwithout requiring user annotation. Writing smart contracts should be easy and safe. With Aiken, you can get started in minutes, not days, and rapidly build confidence that your on-chain code does what's intended.\n\n## A Language Built for Smart Contracts[​](#a-language-built-for-smart-contracts \"Direct link to A Language Built for Smart Contracts\")\n\nAiken brings strong static typing with inference, first-class functions, custom types, and modules. The language compiles directly to **Untyped Plutus Core (UPLC)**, Cardano's native smart contract execution format, giving you full access to the blockchain's capabilities. Its syntax resembles other modern languages like Rust, Elm and Gleam, but Aiken is specifically designed for smart contract development and natively supports the mental model required on Cardano.\n\nUnlike many other languages adapted for blockchain use, Aiken was designed from the ground up for smart contract development. This focused approach means every feature serves the goal of writing secure, auditable on-chain code.\n\n## Modern Development Experience[​](#modern-development-experience \"Direct link to Modern Development Experience\")\n\nThe platform provides a **single toolchain with minimal configuration** that handles everything from compilation to testing. You get quick, friendly feedback with helpful error diagnostics that actually make sense, plus Language Server Protocol support for autocompletion and real-time error checking in VS Code, Zed, Vim/Neovim, and Emacs.\n\nThe built-in testing framework supports both unit tests and property-based testing. Execution cost evaluation and trace reporting help you optimize your contracts before deployment.\n\n## Understanding the Architecture[​](#understanding-the-architecture \"Direct link to Understanding the Architecture\")\n\nA common misconception is that Cardano smart contracts must be written in Haskell. The reality is that Cardano's virtual machine executes **Untyped Plutus Core (UPLC)**, and Aiken compiles straight to UPLC—just like Plinth or Plutarch which are written in Haskell. Haskell is just one of several ways to \"generate\" UPLC, not a requirement.\n\n**Aiken focuses exclusively on on-chain validator scripts.** These define the logic that validates Cardano transactions. For off-chain stuff like building transactions, wallet integration, and UIs, you'll use other tools from the Cardano ecosystem.\n\n## Getting Started[​](#getting-started \"Direct link to Getting Started\")\n\nInstall Aiken using `aikup`, the official installer and version manager:\n\n`aikup`\n`npm install -g @aiken-lang/aikup`\n`brew install aiken-lang/tap/aikup`\n`# Download and run the installer script  \ncurl -sSfL https://install.aiken-lang.org | bash`\n\n## Next Steps[​](#next-steps \"Direct link to Next Steps\")\n\nVisit **[aiken-lang.org](https://aiken-lang.org)** for the complete language guide, tutorials, and API documentation. The **[GitHub repository](https://github.com/aiken-lang/aiken)** contains examples and an active community of over 200 contributors.\n\n### Educational Resources[​](#educational-resources \"Direct link to Educational Resources\")\n\n#### Aiken Smart Contract Development Course[​](#aiken-smart-contract-development-course \"Direct link to Aiken Smart Contract Development Course\")\n\n| Course | Name | Video |\n| --- | --- | --- |\n| **1/15** | Intro Orientation | [Watch Video →](https://www.youtube.com/watch?v=N-JmswJuQRU&list=PLCuyQuWCJVQ1Zz9ySRMH_J6EymxhnZ0Hu&index=1) |\n| **2/15** | Installation and Setup | [Watch Video →](https://www.youtube.com/watch?v=5p8r6KE3rWE&list=PLCuyQuWCJVQ1Zz9ySRMH_J6EymxhnZ0Hu&index=2) |\n| **3/15** | First Validator | [Watch Video →](https://www.youtube.com/watch?v=-bP00YVbv8w&list=PLCuyQuWCJVQ1Zz9ySRMH_J6EymxhnZ0Hu&index=3) |\n| **4/15** | Marketplace Setup | [Watch Video →](https://www.youtube.com/watch?v=DXlqeTSOAA8&list=PLCuyQuWCJVQ1Zz9ySRMH_J6EymxhnZ0Hu&index=4) |\n| **5/15** | Datums and Redeemers | [Watch Video →](https://www.youtube.com/watch?v=QQdk5JWZ8l4&list=PLCuyQuWCJVQ1Zz9ySRMH_J6EymxhnZ0Hu&index=5) |\n| **6/15** | Delist Redeemer | [Watch Video →](https://www.youtube.com/watch?v=niFiov4kz0s&list=PLCuyQuWCJVQ1Zz9ySRMH_J6EymxhnZ0Hu&index=6) |\n| **7/15** | Buy Redeemer | [Watch Video →](https://www.youtube.com/watch?v=Is8VFfrF3Kc&list=PLCuyQuWCJVQ1Zz9ySRMH_J6EymxhnZ0Hu&index=7) |\n| **8/15** | Edit Redeemer | [Watch Video →](https://www.youtube.com/watch?v=1namBsoysYM&list=PLCuyQuWCJVQ1Zz9ySRMH_J6EymxhnZ0Hu&index=8) |\n| **9/15** | Unit Tests | [Watch Video →](https://www.youtube.com/watch?v=DMobhNH4HOs&list=PLCuyQuWCJVQ1Zz9ySRMH_J6EymxhnZ0Hu&index=9) |\n| **10/15** | Testing - Buy | [Watch Video →](https://www.youtube.com/watch?v=mKNRXrXWXiM&list=PLCuyQuWCJVQ1Zz9ySRMH_J6EymxhnZ0Hu&index=10) |\n| **11/15** | Testing Library | [Watch Video →](https://www.youtube.com/watch?v=JlxOluOFCCE&list=PLCuyQuWCJVQ1Zz9ySRMH_J6EymxhnZ0Hu&index=11) |\n| **12/15** | Testing - Edit | [Watch Video →](https://www.youtube.com/watch?v=_yKhqCkyvCg&list=PLCuyQuWCJVQ1Zz9ySRMH_J6EymxhnZ0Hu&index=12) |\n| **13/15** | Testing - Testing Tracing | [Watch Video →](https://www.youtube.com/watch?v=k-wW1IGvb1Y&list=PLCuyQuWCJVQ1Zz9ySRMH_J6EymxhnZ0Hu&index=13) |\n| **14/15** | Project - Transaction Counter | [Watch Video →](https://www.youtube.com/watch?v=rjj4bs65imA&list=PLNnM9sJabyj44xUjXtsbMHsgs-XtyH-JR&index=2) |\n| **15/15** | Project - Fractionalized NFT | [Watch Video →](https://www.youtube.com/watch?v=GiKnbrKHDkg&list=PLNnM9sJabyj44xUjXtsbMHsgs-XtyH-JR&index=1) |\n\n#### Project Based Learning with Andamio[​](#project-based-learning-with-andamio \"Direct link to Project Based Learning with Andamio\")\n\nContinue with Aiken Project Based Learning that takes you from beginner to advanced Cardano smart contract development concepts.\n\n| Course | Name | Video |\n| --- | --- | --- |\n| [**101**](https://app.andamio.io/course/db22e013578fcead6c2fed5446d61891ad31f3cb4955e88d980107e7/101) | Getting Started with Aiken | [Watch Video →](https://www.youtube.com/watch?v=4YRr8rAbFhU) |\n| [**102**](https://app.andamio.io/course/db22e013578fcead6c2fed5446d61891ad31f3cb4955e88d980107e7/102) | Writing Your First Smart Contract | [Watch Video →](https://www.youtube.com/watch?v=LUNfi3-ep0I) |\n| [**103**](https://app.andamio.io/course/db22e013578fcead6c2fed5446d61891ad31f3cb4955e88d980107e7/103) | Running Tests with Mock Transaction | [Watch Video →](https://www.youtube.com/watch?v=XpvuLxeWIiI) |\n| [**201**](https://app.andamio.io/course/db22e013578fcead6c2fed5446d61891ad31f3cb4955e88d980107e7/201) | Writing Smart Contracts with Validation Logic | [Watch Video →](https://www.youtube.com/watch?v=Yi0vIqLV49w) |\n| [**202**](https://app.andamio.io/course/db22e013578fcead6c2fed5446d61891ad31f3cb4955e88d980107e7/202) | Writing Smart Contracts with Validation Logic on Inputs | [Watch Video →](https://www.youtube.com/watch?v=SVhl5nJ_g74) |\n| [**300**](https://app.andamio.io/course/db22e013578fcead6c2fed5446d61891ad31f3cb4955e88d980107e7/300) | Blueprint - Compile Scripts for DApp | [Watch Video →](https://www.youtube.com/watch?v=I8h2Wjc9CQM) |\n| [**301**](https://app.andamio.io/course/db22e013578fcead6c2fed5446d61891ad31f3cb4955e88d980107e7/301) | Architecture for your Decentralized Application | [Watch Video →](https://www.youtube.com/watch?v=I8h2Wjc9CQM) |\n| [**302**](https://app.andamio.io/course/db22e013578fcead6c2fed5446d61891ad31f3cb4955e88d980107e7/302) | Bad Contract Examples | [Watch Video →](https://www.youtube.com/watch?v=JgIhzix7rMo) |\n\n#### I Can Aiken (Book)[​](#i-can-aiken-book \"Direct link to I Can Aiken (Book)\")\n\n**[I Can Aiken](https://book.io/book/i-can-aiken/)** is an open-source developer’s guide to writing secure, modern blockchain scripts on Cardano using the Aiken language.  \nWritten by John Greene, the book is designed to be approachable for new developers while still offering depth for advanced readers.\n\nThe book covers essential topics like:\n\nThe project is open source and available in the [Cardano Academy GitHub repository](https://github.com/cardano-foundation/cardano-academy/tree/main/books).  \nThis makes it easy for the community to contribute improvements and for educators to integrate it into courses and workshops.\n\n#### Danolearn[​](#danolearn \"Direct link to Danolearn\")\n\nVisit [Danolearn](https://danolearn.com/en/course/cardano-smart-contract-development-with-aiken-language-1366) for an interactive learning experience.\n\n#### Blogs[​](#blogs \"Direct link to Blogs\")\n\n### Examples[​](#examples \"Direct link to Examples\")\n\n## Development Workflow[​](#development-workflow \"Direct link to Development Workflow\")\n\n`.ak`\n`aiken build`\n`plutus.json`\n\n## Common Utilities/Helpers[​](#common-utilitieshelpers \"Direct link to Common Utilities/Helpers\")\n\nThese functions create reusable validation logic for common operations. These utility functions eliminate repetitive code and provide safe, tested implementations for common validator operations:\n\n## Testing in Aiken[​](#testing-in-aiken \"Direct link to Testing in Aiken\")\n\nAiken provides first-class support for both unit tests and property-based [tests](https://aiken-lang.org/language-tour/tests). Tests run on the same virtual machine as your on-chain code and report CPU/memory costs, making them effective benchmarks. Tests must return `True` to pass.\n\n`True`\n\n### Debugging[​](#debugging \"Direct link to Debugging\")",
  "images": [],
  "extraction_metadata": {
    "batch_number": 11,
    "extraction_timestamp": "2025-09-19T14:05:12.534540",
    "extraction_time": 3.978458881378174,
    "source": "tavily_api_raw"
  }
}