{
  "url": "https://developers.cardano.org/docs/get-started/cli-operations/governance/register%20drep",
  "content": "![Cardano Logo](/img/cardano-black.svg)\n![Cardano Logo](/img/cardano-white.svg)\n\n# Registering as Delegated Representative (DReps)\n\nDelegated representatives (DReps) serve as the community's spokesperson, actively participating in voting on governance actions and advocating for the community's collective interests. DReps hold significant responsibilities in the governance process, voting on important system updates. Approval depends on the governance action type and requires a majority vote from the corresponding governance bodies.\n\nDReps can register on chain using Ed25519 keys, Simple scripts or Plutus scripts.\n\n## Register a Key-based DRep[​](#register-a-key-based-drep \"Direct link to Register a Key-based DRep\")\n\n### Generate DRep keys:[​](#generate-drep-keys \"Direct link to Generate DRep keys:\")\n\n`cardano-cli conway governance drep key-gen \\  \n --verification-key-file drep.vkey \\  \n --signing-key-file drep.skey`\n\nThis returns the keys wrapped on text envelopes:\n\n`{  \n \"type\": \"DRepSigningKey_ed25519\",  \n \"description\": \"Delegated Representative Signing Key\",  \n \"cborHex\": \"5820eba7053fdc9cb3b8aacf142d3d4ad575bb48fb92f4082d81605ac8e2ccfead5d\"  \n}`\n`{  \n \"type\": \"DRepVerificationKey_ed25519\",  \n \"description\": \"Delegated Representative Verification Key\",  \n \"cborHex\": \"5820c19e0e939609531cfd04dcfa5bf1a5f3e245aa88e163759341aba296af34cc7e\"  \n}`\n\n### Generate the DRep Id:[​](#generate-the-drep-id \"Direct link to Generate the DRep Id:\")\n\nThe hash of the verification key is the DRep ID, get it with:\n\n`cardano-cli conway governance drep id \\  \n --drep-verification-key-file drep.vkey \\  \n --output-format hex`\n`687c9849e1792f9b43d2a78153c412406950ee0c6f2b417226da9dcc`\n\nOr in bech32 format\n\n`cardano-cli conway governance drep id \\  \n --drep-verification-key-file drep.vkey \\  \n --output-format bech32`\n`drep124w9k5ml25kcshqet8r3g2pwk6kqdhj79thg2rphf5u5urve0an`\n\n### Prepare the DRep metadata file:[​](#prepare-the-drep-metadata-file \"Direct link to Prepare the DRep metadata file:\")\n\nDReps have the option to include metadata in their registration certificate to convey their motivations and positions regarding the current and future state of the Cardano blockchain. Stakeholders looking to delegate their voting power can review this metadata to make informed decisions about whom to delegate their vote to. [CIP-119](https://cips.cardano.org/cip/CIP-0119) provides a specification for off-chain DReps metadata.\n\nTo add metadata to the registration certificate, you need to provide an anchor, which is a URL pointing to the metadata payload, along with a hash of the metadata content.\n\nIn this example we use the [test vector of CIP119](https://github.com/cardano-foundation/CIPs/blob/master/CIP-0119/test-vector.md).\n\n### Get the metadata hash:[​](#get-the-metadata-hash \"Direct link to Get the metadata hash:\")\n\nDownload the metadata from its URL:\n\n`wget https://raw.githubusercontent.com/cardano-foundation/CIPs/master/CIP-0119/examples/drep.jsonld`\n\nUse cardano-cli or b2sum to get its hash\n\n`cardano-cli conway governance drep metadata-hash \\  \n --drep-metadata-file drep.jsonld   \n  \na14a5ad4f36bddc00f92ddb39fd9ac633c0fd43f8bfa57758f9163d10ef916de`\n`b2sum -l 256 drep.jsonld   \na14a5ad4f36bddc00f92ddb39fd9ac633c0fd43f8bfa57758f9163d10ef916de drep.jsonld`\n\n### Generate the DRep registration certificate:[​](#generate-the-drep-registration-certificate \"Direct link to Generate the DRep registration certificate:\")\n\nRegistering a DRep requires a deposit, query the protocol parameters to find the amount:\n\n`cardano-cli query protocol-parameters | jq .dRepDeposit  \n500000000`\n\nGenerate the certificate Using the `drep.vkey` file:\n\n`drep.vkey`\n`cardano-cli conway governance drep registration-certificate \\  \n --drep-verification-key-file drep.vkey \\  \n --key-reg-deposit-amt 500000000 \\  \n --drep-metadata-url https://raw.githubusercontent.com/cardano-foundation/CIPs/master/CIP-0119/examples/drep.jsonld \\  \n --drep-metadata-hash a14a5ad4f36bddc00f92ddb39fd9ac633c0fd43f8bfa57758f9163d10ef916de \\  \n --out-file drep-reg.cert`\n\nOr using the DRep verification key:\n\n`cardano-cli conway governance drep registration-certificate \\  \n --drep-verification-key c19e0e939609531cfd04dcfa5bf1a5f3e245aa88e163759341aba296af34cc7e \\  \n --key-reg-deposit-amt 500000000 \\  \n --drep-metadata-url https://raw.githubusercontent.com/cardano-foundation/CIPs/master/CIP-0119/examples/drep.jsonld \\  \n --drep-metadata-hash a14a5ad4f36bddc00f92ddb39fd9ac633c0fd43f8bfa57758f9163d10ef916de \\  \n --out-file drep-reg.cert`\n\nOr using the DRep ID:\n\n`cardano-cli conway governance drep registration-certificate \\  \n --drep-key-hash \"$(< drep.id)\" \\  \n --key-reg-deposit-amt 500000000 \\  \n --drep-metadata-url https://raw.githubusercontent.com/cardano-foundation/CIPs/master/CIP-0119/examples/drep.jsonld \\  \n --drep-metadata-hash a14a5ad4f36bddc00f92ddb39fd9ac633c0fd43f8bfa57758f9163d10ef916de \\  \n --out-file drep-reg.cert`\n\nAny of the above methods produces `drep-reg.cert`  in a text envelope:\n\n`drep-reg.cert` \n`{  \n \"type\": \"CertificateConway\",  \n \"description\": \"DRep Key Registration Certificate\",  \n \"cborHex\": \"84108200581c555c5b537f552d885c1959c714282eb6ac06de5e2aee850c374d394e1a1dcd650082785e68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f63617264616e6f2d666f756e646174696f6e2f434950732f6d61737465722f4349502d303131392f6578616d706c65732f647265702e6a736f6e6c645820a14a5ad4f36bddc00f92ddb39fd9ac633c0fd43f8bfa57758f9163d10ef916de\"  \n}`\n\n### Submit the Registration certificate in a transaction:[​](#submit-the-registration-certificate-in-a-transaction \"Direct link to Submit the Registration certificate in a transaction:\")\n\nBuild the transaction. Note that we use `--witness-override 2` because this tranaction will contain 2 signatures, with the `payment.skey` and with the `drep.skey`.\n\n`--witness-override 2`\n`payment.skey`\n`drep.skey`\n`cardano-cli conway transaction build \\  \n --tx-in $(cardano-cli query utxo --address $(< payment.addr) --output-json | jq -r 'keys[0]') \\  \n --change-address $(< payment.addr) \\  \n --certificate-file drep-reg.cert \\  \n --witness-override 2 \\  \n --out-file tx.raw`\n\nSign it with payment and DRep signing keys:\n\n`cardano-cli conway transaction sign \\  \n --tx-body-file tx.raw \\  \n --signing-key-file payment.skey \\  \n --signing-key-file drep.skey \\  \n --out-file tx.signed`\n\nSubmit it to the chain:\n\n`cardano-cli conway transaction submit \\  \n --tx-file tx.signed`\n\n### Query the DRep state to confirm:[​](#query-the-drep-state-to-confirm \"Direct link to Query the DRep state to confirm:\")\n\n`cardano-cli conway query drep-state --all-dreps  \n  \n  \ncardano-cli conway query drep-state --drep-key-hash 687c9849e1792f9b43d2a78153c412406950ee0c6f2b417226da9dcc   \n[  \n [  \n {  \n \"keyHash\": \"687c9849e1792f9b43d2a78153c412406950ee0c6f2b417226da9dcc\"  \n },  \n {  \n \"anchor\": null,  \n \"deposit\": 2000000,  \n \"expiry\": 188  \n }  \n ]  \n]`\n\n## Register a Simple script based DRep[​](#register-a-simple-script-based-drep \"Direct link to Register a Simple script based DRep\")\n\nA basic example of a DRep using a native script is a DRep that consists of various memebers where, to issue votes, a minimum number of members must sign the transaction.\n\n### Generate a DRep key pair for each member[​](#generate-a-drep-key-pair-for-each-member \"Direct link to Generate a DRep key pair for each member\")\n\n`cardano-cli conway governance drep key-gen \\  \n --verification-key-file drep1.vkey \\  \n --signing-key-file drep1.skey`\n`{  \n \"type\": \"DRepSigningKey_ed25519\",  \n \"description\": \"Delegate Representative Signing Key\",  \n \"cborHex\": \"5820eba7053fdc9cb3b8aacf142d3d4ad575bb48fb92f4082d81605ac8e2ccfead5d\"  \n}`\n`{  \n \"type\": \"DRepVerificationKey_ed25519\",  \n \"description\": \"Delegate Representative Verification Key\",  \n \"cborHex\": \"5820c19e0e939609531cfd04dcfa5bf1a5f3e245aa88e163759341aba296af34cc7e\"  \n}`\n\n### Get verification key hashes:[​](#get-verification-key-hashes \"Direct link to Get verification key hashes:\")\n\nEach member generates the hash of the verification key (This is exactly what the `governance drep id` command do)\n\n`governance drep id`\n`cardano-cli conway governance drep id \\  \n --drep-verification-key-file drep1.vkey \\  \n --output-format hex \\  \n --out-file drep1.id`\n`cat drep1.id  \ne6d27c194fd18f39e080073e5ea02aa78abe4b6c84d78a498302461c`\n\n### Build the Simple script:[​](#build-the-simple-script \"Direct link to Build the Simple script:\")\n\nMulti-signature scripts can be written using JSON syntax, which is the format accepted by the cardano-cli tool.\n\nIn this example, the DRep consists of three members, so we include the DRep ID of each member. The script should evaluate to `True` if and only if **at least two valid signatures are present**. This requirement is specified by the `type` and `required` fields.\n\n`True`\n`type`\n`required`\n\nUse your favorite text editor to create your script, and save it as drep-multisig.json:\n\n`{  \n \"type\": \"atLeast\",  \n \"required\": 2,  \n \"scripts\": [  \n {  \n \"type\": \"sig\",  \n \"keyHash\": \"e6d27c194fd18f39e080073e5ea02aa78abe4b6c84d78a498302461c\"  \n },  \n {  \n \"type\": \"sig\",  \n \"keyHash\": \"5ab00e8cd1142fcffc5f7a2c2e3549874afd89e26995d7686c2714d4\"  \n },  \n {  \n \"type\": \"sig\",  \n \"keyHash\": \"db5a8cbb0df0359c36541727229993b21371f834202733c9bbabc1fd\"  \n }  \n ]  \n}`\n\nWe can choose a different type of script, for example type \"any\", where the script evaluates to `True` with a single valid signature from the list:\n\n`True`\n`{  \n \"type\": \"any\",  \n \"scripts\": [  \n {  \n \"type\": \"sig\",  \n \"keyHash\": \"e6d27c194fd18f39e080073e5ea02aa78abe4b6c84d78a498302461c\"  \n },  \n {  \n \"type\": \"sig\",  \n \"keyHash\": \"5ab00e8cd1142fcffc5f7a2c2e3549874afd89e26995d7686c2714d4\"  \n },  \n {  \n \"type\": \"sig\",  \n \"keyHash\": \"db5a8cbb0df0359c36541727229993b21371f834202733c9bbabc1fd\"  \n }  \n ]  \n}`\n\nOr for a more strict setup we can use type \"all\", where all the signatures are required:\n\n`{  \n \"type\": \"all\",  \n \"scripts\": [  \n {  \n \"type\": \"sig\",  \n \"keyHash\": \"e6d27c194fd18f39e080073e5ea02aa78abe4b6c84d78a498302461c\"  \n },  \n {  \n \"type\": \"sig\",  \n \"keyHash\": \"5ab00e8cd1142fcffc5f7a2c2e3549874afd89e26995d7686c2714d4\"  \n },  \n {  \n \"type\": \"sig\",  \n \"keyHash\": \"db5a8cbb0df0359c36541727229993b21371f834202733c9bbabc1fd\"  \n }  \n ]  \n}`\n\n### Prepare the DRep metadata file:[​](#prepare-the-drep-metadata-file-1 \"Direct link to Prepare the DRep metadata file:\")\n\nOptionally, DReps can include metadata in their registration certificate to convey their motivations and positions regarding the current and future state of the Cardano blockchain. Stakeholders looking to delegate their voting power can review this metadata to make informed decisions about whom to delegate their vote to. [CIP-119](https://cips.cardano.org/cip/CIP-0119) provides a specification for off-chain DReps metadata.\n\nTo add metadata to the registration certificate, you need to provide an anchor, which is a URL pointing to the metadata payload, along with a hash of the metadata content.\n\nIn this example we use the [test vector of CIP119](https://github.com/cardano-foundation/CIPs/blob/master/CIP-0119/test-vector.md).\n\n### Get the metadata hash:[​](#get-the-metadata-hash-1 \"Direct link to Get the metadata hash:\")\n\nDownload the metadata from its URL:\n\n`wget https://raw.githubusercontent.com/cardano-foundation/CIPs/master/CIP-0119/examples/drep.jsonld`\n\nUse cardano-cli or b2sum to get its hash:\n\n`cardano-cli conway governance drep metadata-hash \\  \n --drep-metadata-file drep.jsonld   \n  \na14a5ad4f36bddc00f92ddb39fd9ac633c0fd43f8bfa57758f9163d10ef916de`\n`b2sum -l 256 drep.jsonld   \na14a5ad4f36bddc00f92ddb39fd9ac633c0fd43f8bfa57758f9163d10ef916de drep.jsonld`\n\n### Generate the DRep ID:[​](#generate-the-drep-id-1 \"Direct link to Generate the DRep ID:\")\n\nThis DRep will be registered on-chain as a script, therefore, the hash of the script will serve as the DRep ID. Calculate it with:\n\n`cardano-cli hash script \\  \n --script-file drep-multisig.json \\  \n --out-file drep-multisig.id`\n`cat drep-multisig.id  \nd862ee2eb3ce246b23ff7e1f62ae0705013e793787485cb6e1845356`\n\n### Generate the DRep registration certificate:[​](#generate-the-drep-registration-certificate-1 \"Direct link to Generate the DRep registration certificate:\")\n\nRegistering a DRep requires a deposit, query the protocol parameters to find the amount:\n\n`drepDeposit=$(cardano-cli query protocol-parameters | jq .dRepDeposit)  \n  \necho $drepDeposit  \n500000000`\n\nGenerate the registration certificate:\n\n`cardano-cli conway governance drep registration-certificate \\  \n --drep-script-hash \"$(< drep-multisig.id)\" \\  \n --key-reg-deposit-amt \"$drepDeposit\" \\  \n --out-file drep-multisig-reg.cert`\n\n### Submit the Registration certificate in a transaction[​](#submit-the-registration-certificate-in-a-transaction-1 \"Direct link to Submit the Registration certificate in a transaction\")\n\nBuild the transaction. Note that we use `--witness-override 4` because this tranaction will contain up to 4 signatures, 1 from the payment key and up to 3 members of the DRep.\n\n`--witness-override 4`\n`cardano-cli conway transaction build \\  \n --tx-in $(cardano-cli conway query utxo --address $(< payment.addr) --output-json | jq -r 'keys[0]') \\  \n --change-address $(< payment.addr) \\  \n --certificate-file drep-multisig-reg.cert \\  \n --certificate-script-file drep-multisig.json \\  \n --witness-override 4 \\  \n --out-file tx.raw`\n\nEach member of the DRep will witness the transaction with its individual keys from step 1. In addition, we need the witness from the payment address to pay for the transaction fee.\n\nWitnessing the transaction with the payment key:\n\n`cardano-cli conway transaction witness \\  \n \\  \n --tx-body-file tx.raw \\  \n --signing-key-file payment.skey \\  \n --out-file payment.witness`\n\nWitnessing the transaction with the DRep keys from each member:\n\n`cardano-cli conway transaction witness \\  \n --tx-body-file tx.raw \\  \n --signing-key-file drep1.skey \\  \n --out-file drep1.witness`\n`cardano-cli conway transaction witness \\  \n --tx-body-file tx.raw \\  \n --signing-key-file drep2.skey \\  \n --out-file drep2.witness`\n`cardano-cli conway transaction witness \\  \n --tx-body-file tx.raw \\  \n --signing-key-file drep3.skey \\  \n --out-file drep3.witness`\n\nAssemble the tranaction with all the witnesses from previous step:\n\n`cardano-cli conway transaction assemble \\  \n --tx-body-file tx.raw \\  \n --witness-file payment.witness \\  \n --witness-file drep1.witness \\  \n --witness-file drep2.witness \\  \n --witness-file drep3.witness \\  \n --out-file tx.signed`\n\nSubmit the transaction\n\n`cardano-cli conway transaction submit \\  \n --tx-file tx.signed`\n\n### Query the DRep state to confirm:[​](#query-the-drep-state-to-confirm-1 \"Direct link to Query the DRep state to confirm:\")\n\n`cardano-cli conway query drep-state \\  \n --drep-script-hash $(< drep-multisig.id)`\n`[  \n [  \n {  \n \"scriptHash\": \"d862ee2eb3ce246b23ff7e1f62ae0705013e793787485cb6e1845356\"  \n },  \n {  \n \"anchor\": null,  \n \"deposit\": 2000000,  \n \"expiry\": 270  \n }  \n ]  \n]`\n\n## Register a Plutus script based DRep[​](#register-a-plutus-script-based-drep \"Direct link to Register a Plutus script based DRep\")\n\nWriting the Plutus script is out of the scope of this tutorial. As an example of what can be done, Thomas Vellekoop (@perturbing) wrote this [Plutus Script DRep\nthat can only vote 'YES'](https://github.com/perturbing/always-yes-drep)\n\nOnce you have compiled the Plutus script, the process to register is very similar to Simple scripts.\n\n### Prepare the DRep metadata file:[​](#prepare-the-drep-metadata-file-2 \"Direct link to Prepare the DRep metadata file:\")\n\nDReps have the option to include metadata in their registration certificate to convey their motivations and positions regarding the current and future state of the Cardano blockchain. Stakeholders looking to delegate their voting power can review this metadata to make informed decisions about whom to delegate their vote to. [CIP-119](https://cips.cardano.org/cip/CIP-0119) provides a specification for off-chain DReps metadata.\n\nTo add metadata to the registration certificate, you need to provide an anchor, which is a URL pointing to the metadata payload, along with a hash of the metadata content.\n\nIn this example we use the [test vector of CIP119](https://github.com/cardano-foundation/CIPs/blob/master/CIP-0119/test-vector.md).\n\n### Get the metadata hash:[​](#get-the-metadata-hash-2 \"Direct link to Get the metadata hash:\")\n\nDownload the metadata from its URL:\n\n`wget https://raw.githubusercontent.com/cardano-foundation/CIPs/master/CIP-0119/examples/drep.jsonld`\n\nUse cardano-cli or b2sum to get its hash:\n\n`cardano-cli conway governance drep metadata-hash \\  \n --drep-metadata-file drep.jsonld   \n  \na14a5ad4f36bddc00f92ddb39fd9ac633c0fd43f8bfa57758f9163d10ef916de`\n`b2sum -l 256 drep.jsonld   \na14a5ad4f36bddc00f92ddb39fd9ac633c0fd43f8bfa57758f9163d10ef916de drep.jsonld`\n\n### Generate the DRep ID:[​](#generate-the-drep-id-2 \"Direct link to Generate the DRep ID:\")\n\nThis DRep will be registered on-chain as a script, therefore, the hash of the script will serve as the DRep ID. Calculate it with:\n\n `cardano-cli hash script \\  \n --script-file alwaysVoteYesDrep.plutus \\  \n --out-file alwaysVoteYesDrep.id`\n`cat alwaysVoteYesDrep.id   \n3b943c3e9598ef0e8d6bf504e7ddeee73232b1825380765c04e25055`\n\n### Generate the DRep registration certificate:[​](#generate-the-drep-registration-certificate-2 \"Direct link to Generate the DRep registration certificate:\")\n\nRegistering a DRep requires a deposit, query the protocol parameters to find the amount:\n\n`drepDeposit=$(cardano-cli query protocol-parameters | jq .dRepDeposit)  \n  \necho $drepDeposit  \n500000000`\n\nGenerate the registration certificate:\n\n`cardano-cli conway governance drep registration-certificate \\  \n --drep-script-hash \"$(< alwaysVoteYesDrep.id)\" \\  \n --key-reg-deposit-amt \"$drepDeposit\" \\  \n --out-file alwaysVoteYesDrep.cert`\n\n### Submit the Registration certificate in a transaction[​](#submit-the-registration-certificate-in-a-transaction-2 \"Direct link to Submit the Registration certificate in a transaction\")\n\nBuild the transaction, we need to provide a collateral and a redeemer value:\n\n`cardano-cli conway transaction build \\  \n --tx-in $(cardano-cli conway query utxo --address $(< payment.addr) --output-json | jq -r 'keys[0]') \\  \n --tx-in-collateral $(cardano-cli query utxo --address $(< payment.addr) --output-json | jq -r 'keys[0]') \\  \n --certificate-file alwaysVoteYesDrep.cert \\  \n --certificate-script-file alwaysVoteYesDrep.plutus \\  \n --certificate-redeemer-value {} \\  \n --change-address $(< payment.addr) \\  \n --out-file tx.raw`\n`cardano-cli conway transaction sign \\  \n --signing-key-file payment.skey \\  \n --tx-body-file tx.raw \\  \n --out-file tx.signed`\n`cardano-cli conway transaction submit --tx-file tx.signed`",
  "images": [],
  "extraction_metadata": {
    "batch_number": 5,
    "extraction_timestamp": "2025-09-19T14:04:40.000976",
    "extraction_time": 1.9930140972137451,
    "source": "tavily_api_raw"
  }
}