{
  "url": "https://developers.cardano.org/docs/get-started/evolution-sdk/transactions",
  "content": "![Cardano Logo](/img/cardano-black.svg)\n![Cardano Logo](/img/cardano-white.svg)\n\n# Transactions\n\n## Your first transaction[​](#your-first-transaction \"Direct link to Your first transaction\")\n\nA couple of fundamentals to remember are that in Cardano's eUTxO model, a transaction can consume one or more UTxOs as inputs, create one or more UTxOs as outputs, and must be balanced (sum of inputs = sum of outputs + fees).\n\n### 1. Build[​](#1-build \"Direct link to 1. Build\")\n\nLet's create a simple transaction where we send `5 ada` to two recipients each:\n\n`5 ada`\n`const tx = await lucid  \n .newTx()  \n .pay.ToAddress(\"addr_testa...\", { lovelace: 5000000n })  \n .pay.ToAddress(\"addr_testb...\", { lovelace: 5000000n })  \n .complete();`\n\nTo balance the transaction and initiate coin selection, transactions always\nneed to end with `.complete()`\n\n`.complete()`\n\n### 2. Sign[​](#2-sign \"Direct link to 2. Sign\")\n\n`const signedTx = await tx.sign.withWallet().complete();`\n\nYou could also choose to sign the transaction with a private key:\n\n`const signedTx = await tx.sign.withPrivateKey(privateKey).complete();`\n\n### 3. Submit[​](#3-submit \"Direct link to 3. Submit\")\n\nLastly we submit the transaction:\n\n`const txHash = await signedTx.submit();  \nconsole.log(txHash);`\n\nThe wallet selection methods we discussed in the [previous section](/docs/get-started/evolution-sdk/wallets) should be implemented before building the transaction.\n\n## Putting everything together[​](#putting-everything-together \"Direct link to Putting everything together\")\n\n`import { Lucid, Blockfrost } from \"@evolution-sdk/lucid\";  \n  \n// Initialize Lucid with a provider  \nconst lucid = await Lucid(  \n new Blockfrost(\"https://cardano-preprod.blockfrost.io/api/v0\", \"<projectId>\"),  \n \"Preprod\"  \n);  \n  \n// Select a wallet for signing - in this case we're using a private key  \nlucid.selectWallet.fromPrivateKey(privateKey);  \n  \n// Build, sign and submit transaction  \nconst tx = await lucid  \n .newTx()  \n .pay.ToAddress(\"addr_testa...\", { lovelace: 5000000n }) // Pay 5 ada to addr_testa  \n .complete(); // Balances the transaction and initiates coin selection  \n  \nconst signedTx = await tx.sign.withWallet().complete();  \nconst txHash = await signedTx.submit();  \nconsole.log(txHash);`\n\n## You want to learn more?[​](#you-want-to-learn-more \"Direct link to You want to learn more?\")\n\n### Next Steps[​](#next-steps \"Direct link to Next Steps\")\n\nExplore the following sections to learn more about Evolution SDK:\n\n## Resources[​](#resources \"Direct link to Resources\")\n\nYou now have all you need to start playing around with Evolution SDK. If you have any questions, please refer to the library's [Discord community](https://discord.com/invite/eqZDvHvW6k).",
  "images": [],
  "extraction_metadata": {
    "batch_number": 5,
    "extraction_timestamp": "2025-09-19T14:04:40.000976",
    "extraction_time": 1.9930140972137451,
    "source": "tavily_api_raw"
  }
}