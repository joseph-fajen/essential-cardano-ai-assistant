{
  "url": "https://developers.cardano.org/docs/get-started/mesh/transactions-governance",
  "content": "![Cardano Logo](/img/cardano-black.svg)\n![Cardano Logo](/img/cardano-white.svg)\n\n# Governance Transactions\n\n## DRep Registration[​](#drep-registration \"Direct link to DRep Registration\")\n\nIn Voltaire, stake credentials can delegate their stake to Decentralized Representatives (DReps) for voting, in addition to the current delegation to stake pools for block production. This DRep delegation will work similarly to the current stake delegation process, using on-chain certificates. Registering as a DRep will also follow the same process as stake registration.\n\n`const dRep = await wallet.getDRep();  \nconst dRepId = dRep.dRepIDCip105;  \n  \nconst anchorUrl = '';  \nconst anchorHash = await getMeshJsonHash(anchorUrl);  \n  \n// get utxo to pay for the registration  \nconst utxos = await wallet.getUtxos();  \nconst registrationFee = \"500000000\";  \nconst assetMap = new Map<Unit, Quantity>();  \nassetMap.set(\"lovelace\", registrationFee);  \nconst selectedUtxos = keepRelevant(assetMap, utxos);  \n  \nconst changeAddress = await wallet.getChangeAddress();  \n  \ntxBuilder  \n .drepRegistrationCertificate(dRepId, {  \n anchorUrl: anchorUrl,  \n anchorDataHash: anchorHash,  \n })  \n .changeAddress(changeAddress)  \n .selectUtxosFrom(selectedUtxos);  \n  \nconst unsignedTx = await txBuilder.complete();  \nconst signedTx = await wallet.signTx(unsignedTx);  \nconst txHash = await wallet.submitTx(signedTx);`\n\n[Try demo](https://meshjs.dev/apis/txbuilder/governance#registration)\n\n## Vote Delegation[​](#vote-delegation \"Direct link to Vote Delegation\")\n\nAny wallet can delegate its voting power to another DRep. This is done by creating a vote delegation certificate and submitting it to the blockchain.\n\n`const utxos = await wallet.getUtxos();  \nconst rewardAddresses = await wallet.getRewardAddresses();  \nconst rewardAddress = rewardAddresses[0];  \n  \nconst changeAddress = await wallet.getChangeAddress();  \n  \nconst assetMap = new Map<Unit, Quantity>();  \nassetMap.set(\"lovelace\", \"5000000\");  \nconst selectedUtxos = keepRelevant(assetMap, utxos);  \n  \nconst txBuilder = getTxBuilder();  \n  \nfor (const utxo of selectedUtxos) {  \n txBuilder.txIn(  \n utxo.input.txHash,  \n utxo.input.outputIndex,  \n utxo.output.amount,  \n utxo.output.address,  \n );  \n}  \n  \ntxBuilder  \n .voteDelegationCertificate(  \n {  \n dRepId: drepid,  \n },  \n rewardAddress,  \n )  \n .changeAddress(changeAddress);  \n  \nconst unsignedTx = await txBuilder.complete();  \nconst signedTx = await wallet.signTx(unsignedTx);  \nconst txHash = await wallet.submitTx(signedTx);`\n\n[Try demo](https://meshjs.dev/apis/txbuilder/governance#delegation)\n\n## Vote[​](#vote \"Direct link to Vote\")\n\nVoting is done by creating a vote certificate and submitting it to the blockchain.\n\n`const dRep = await wallet.getDRep();  \nconst dRepId = dRep.dRepIDCip105;  \n  \nconst utxos = await wallet.getUtxos();  \nconst changeAddress = await wallet.getChangeAddress();  \n  \nconst txBuilder = getTxBuilder();  \ntxBuilder  \n .vote(  \n {  \n type: \"DRep\",  \n drepId: dRepId,  \n },  \n {  \n txHash: 'aff2909f8175ee02a8c1bf96ff516685d25bf0c6b95aac91f4dfd53a5c0867cc',  \n txIndex: 0,  \n },  \n {  \n voteKind: \"Yes\",  \n },  \n )  \n .selectUtxosFrom(utxos)  \n .changeAddress(changeAddress);  \n  \nconst unsignedTx = await txBuilder.complete();  \nconst signedTx = await wallet.signTx(unsignedTx);  \nconst txHash = await wallet.submitTx(signedTx);`\n\n[Try demo](https://meshjs.dev/apis/txbuilder/governance#vote)",
  "images": [],
  "extraction_metadata": {
    "batch_number": 6,
    "extraction_timestamp": "2025-09-19T14:04:44.452431",
    "extraction_time": 1.4428989887237549,
    "source": "tavily_api_raw"
  }
}