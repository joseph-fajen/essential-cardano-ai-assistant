{
  "url": "https://developers.cardano.org/docs/smart-contracts/smart-contract-languages/marlowe",
  "content": "![Cardano Logo](/img/cardano-black.svg)\n![Cardano Logo](/img/cardano-white.svg)\n\n# Marlowe\n\n## Get started with Marlowe[​](#get-started-with-marlowe \"Direct link to Get started with Marlowe\")\n\nMarlowe is a domain-specific language (DSL) that enables users to create blockchain applications that are specifically designed for financial contracts.\n\nIf you want to learn Marlowe from the ground up, start with [Marlowe Tutorial](https://docs.marlowe-lang.org/tutorials), or jump right into the [Marlowe Playground](https://playground.marlowe-lang.org):\n\n![Marlowe Playground](/assets/images/marlowe-playground-ad4f570c50f0d11af5d0095fcb18c65d.jpg)\n\n![Marlowe Playground](/assets/images/marlowe-playground-ad4f570c50f0d11af5d0095fcb18c65d.jpg)\n\nOn the Cardano Forum, you can [discuss Marlowe](https://forum.cardano.org/tag/marlowe) or if you prefer Telegram, there is a special [Marlowe Telegram Group](https://t.me/IOHK_Marlowe).\n\n## The Marlowe platform[​](#the-marlowe-platform \"Direct link to The Marlowe platform\")\n\nWhen compared to a [Turing-complete](https://en.wikipedia.org/wiki/Turing_completeness) language, the Marlowe DSL provides significantly greater security, certainty, [guarantees of termination](https://en.wikipedia.org/wiki/Halting_problem), and behavior correctness.\n\nThe design guarantees the following:\n\n## Marlowe Playground[​](#marlowe-playground \"Direct link to Marlowe Playground\")\n\nThe Marlowe Playground is a plug-and-play smart contract builder and simulator that is simple to use, visual, and modular. Build, simulate, and analyze Marlowe contracts in this 4-minute tour of the Marlowe Playground.\n\n## Resources for Developing and Deploying Marlowe Contracts[​](#resources-for-developing-and-deploying-marlowe-contracts \"Direct link to Resources for Developing and Deploying Marlowe Contracts\")\n\n### How do I run my Marlowe contract on the Cardano blockchain?[​](#how-do-i-run-my-marlowe-contract-on-the-cardano-blockchain \"Direct link to How do I run my Marlowe contract on the Cardano blockchain?\")\n\n`Send to Simulator`\n`Download as JSON`\n`marlowe-cli`\n`marlowe-cli`\n`marlowe-cli`\n`nix develop --command jupyter-lab`\n`marlowe-cli/`\n\n## High level technical summary[​](#high-level-technical-summary \"Direct link to High level technical summary\")\n\nMarlowe is implemented for the Cardano blockchain as a validator script that uses the Marlowe DSL in transaction datums for describing the contract states.\n\nThe [script](https://github.com/marlowe-lang/marlowe-cardano/blob/main/marlowe/src/Language/Marlowe/Scripts.hs) is implemented in Plutus and plays a crucial role in validating state transitions for Marlowe contracts. Its purpose is to ensure that transitions caused by transactions comply with both the general rules defined in the Marlowe specification and the current state of the contract, as described in the datum using the Marlowe DSL.\n\nOne important rule enforced by the Marlowe validator is that [a transaction can only consume a single UTXO](https://github.com/marlowe-lang/marlowe-cardano/blob/main/marlowe/specification/marlowe-cardano-specification.md#constraint-2-single-marlowe-script-input) and [output at most one from the same Marlowe script address](https://github.com/marlowe-lang/marlowe-cardano/blob/main/marlowe/specification/marlowe-cardano-specification.md#constraint-3-single-marlowe-output). Consequently, a Marlowe contract can be envisioned as a chain of transactions that concludes with a transaction consuming an input from the Marlowe address but producing no output to the same address.\n\nWhen a transaction consumes the final UTXO of a contract chain without outputting a new UTXO to the same validator address, it indicates the closure of the contract. Such a transaction will contain a redeemer but does not require a datum.\n\nA transaction that consumes the final UTXO and outputs a new one to the same validator address, effectively extending the contract's transaction chain, will also include a redeemer describing the action being applied to the previous state. Additionally, a datum is required to describe the new contract state using the Marlowe DSL. The validator script applies the action to the previous state and returns true (allowing the transaction) only if the transition is permitted by the previous state and results in the provided new state.\n\nMarlowe contracts using the same validator version will utilize the same script address by default. However, it is also possible to derive a staked version of the script address. In this case, only the payment part of the address remains constant for a specific script version. To identify a transaction containing a Marlowe contract, one needs to examine the payment part of the address, which would correlate to a well-known script hash for a validator script version.\n\n### Validator versions[​](#validator-versions \"Direct link to Validator versions\")\n\nCurrently, there is only a single known implementation of Marlowe available for Cardano: [marlowe-lang/marlowe-cardano](https://github.com/marlowe-lang/marlowe-cardano).\n\nThe well-known versions of the validator script are specified in the [ScriptRegistry.hs](https://github.com/marlowe-lang/marlowe-cardano/blob/main/marlowe-runtime/src/Language/Marlowe/Runtime/Core/ScriptRegistry.hs) file.\n\nVersion hashes as of January 20, 2024:\n\nMarlowe uses two validators: the *semantics validator* for the Marlowe DSL and a *role-payout* validator that allows the holder of a role token to withdraw funds paid by the semantics validator.\nThere is also an optional *open-role validator* which enables just-in-time assignment of roles to a contract.\n\n| Version | Technical Notes | Hash for Semantics Validator | Hash for Role-Payout Validator | Hash for Open-Role Validator |\n| --- | --- | --- | --- | --- |\n| V5 | Optimized using `PlutusTx.asData` | `377325ad84a55ba0282d844dff2d5f0f18c33fd4a28a0a9d73c6f60d` | `fcb8885eb5e4f9a5cfca3c75e8c7280e482af32dcdf2d13e47d05d27` | `2722e12a53dfb4fe3742b8a2c0534bd16b0b5ae492a3d76554bbe8a5` |\n| v4 | Optimized using PlutusTx 1.15 | `6027a8010c555a4dd6b08882b899f4b3167c6e4524047132202dd984` | `fdade3b86107bc715037b468574dd8d3f884a0da8c9956086b9a1a51` | `36a5c7e49a6b11c7fb65fb61db69ed5ceaa35326af9d952fd30185c0` |\n| v3 | Recompiled with Node 8.1.2 dependencies | `d85fa9bc2bdfd97d5ebdbc5e3fc66f7476213c40c21b73b41257f09d` | `10ec7e02d25f5836b3e1098e0d4d8389e71d7a97a57aa737adc1d1fa` | `b1d61d0c8a3c0f081a7ccebf0050e3f2c9751e82a4f3953a769dddfb` |\n| v2 | Changes in response to audit | `2ed2631dbb277c84334453c5c437b86325d371f0835a28b910a91a6e` | `e165610232235bbbbeff5b998b233daae42979dec92a6722d9cda989` |  |\n| v1 | Audited | `6a9391d6aa51af28dd876ebb5565b69d1e83e5ac7861506bd29b56b0` | `49076eab20243dc9462511fb98a9cfb719f86e9692288139b7c91df3` |  |\n\n`PlutusTx.asData`\n`377325ad84a55ba0282d844dff2d5f0f18c33fd4a28a0a9d73c6f60d`\n`fcb8885eb5e4f9a5cfca3c75e8c7280e482af32dcdf2d13e47d05d27`\n`2722e12a53dfb4fe3742b8a2c0534bd16b0b5ae492a3d76554bbe8a5`\n`6027a8010c555a4dd6b08882b899f4b3167c6e4524047132202dd984`\n`fdade3b86107bc715037b468574dd8d3f884a0da8c9956086b9a1a51`\n`36a5c7e49a6b11c7fb65fb61db69ed5ceaa35326af9d952fd30185c0`\n`d85fa9bc2bdfd97d5ebdbc5e3fc66f7476213c40c21b73b41257f09d`\n`10ec7e02d25f5836b3e1098e0d4d8389e71d7a97a57aa737adc1d1fa`\n`b1d61d0c8a3c0f081a7ccebf0050e3f2c9751e82a4f3953a769dddfb`\n`2ed2631dbb277c84334453c5c437b86325d371f0835a28b910a91a6e`\n`e165610232235bbbbeff5b998b233daae42979dec92a6722d9cda989`\n`6a9391d6aa51af28dd876ebb5565b69d1e83e5ac7861506bd29b56b0`\n`49076eab20243dc9462511fb98a9cfb719f86e9692288139b7c91df3`\n\n## More resources[​](#more-resources \"Direct link to More resources\")\n\n### Documentation & overview[​](#documentation--overview \"Direct link to Documentation & overview\")\n\n### GitHub repositories[​](#github-repositories \"Direct link to GitHub repositories\")\n\n### Developer Discussions[​](#developer-discussions \"Direct link to Developer Discussions\")\n\n### Specifications[​](#specifications \"Direct link to Specifications\")\n\n### Testing and debugging[​](#testing-and-debugging \"Direct link to Testing and debugging\")\n\n### Tools[​](#tools \"Direct link to Tools\")\n\n### Examples[​](#examples \"Direct link to Examples\")\n\n### Videos[​](#videos \"Direct link to Videos\")\n\n## Presentations[​](#presentations \"Direct link to Presentations\")\n\n## Further Tutorials[​](#further-tutorials \"Direct link to Further Tutorials\")\n\n## Metrics, Adoption, Audit[​](#metrics-adoption-audit \"Direct link to Metrics, Adoption, Audit\")",
  "images": [],
  "extraction_metadata": {
    "batch_number": 11,
    "extraction_timestamp": "2025-09-19T14:05:12.534540",
    "extraction_time": 3.978458881378174,
    "source": "tavily_api_raw"
  }
}