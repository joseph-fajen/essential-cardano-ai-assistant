{
  "url": "https://developers.cardano.org/docs/get-started/cardano-testnet",
  "content": "![Cardano Logo](/img/cardano-black.svg)\n![Cardano Logo](/img/cardano-white.svg)\n\n# Test Custom Clusters Locally With cardano-testnet\n\nIn the future, cardano-testnet will be available from [cardano-node GitHub Releases](https://github.com/IntersectMBO/cardano-node/releases) page. Until then, it is obtained by building [cardano-node](https://github.com/IntersectMBO/cardano-node) from source.\n\n## Building cardano-testnet[​](#building-cardano-testnet \"Direct link to Building cardano-testnet\")\n\nWe refer to [the instructions](https://developers.cardano.org/docs/operate-a-stake-pool/node-operations/installing-cardano-node) for building cardano-node from source. Once you are done with these instructions, run the following to build cardano-testnet.\n\n`cabal build cardano-testnet`\n\nThis should succeed 🙂 Now, define two environment variables pointing to your `cardano-node` and `cardano-cli` executables (which you can obtain from [cardano-node's GitHub releases](https://github.com/IntersectMBO/cardano-node/releases)):\n\n`cardano-node`\n`cardano-cli`\n`export CARDANO_CLI=path to your executable  \nexport CARDANO_NODE=path to your executable`\n\n## Options for launching a local cluster[​](#options-for-launching-a-local-cluster \"Direct link to Options for launching a local cluster\")\n\nTo launch a local cluster, you should use the `cardano-testnet cardano` command, whose API is as follows:\n\n`cardano-testnet cardano`\n`Usage: cardano-testnet cardano [--num-pool-nodes COUNT | --node-config FILEPATH]  \n [ --shelley-era  \n | --allegra-era  \n | --mary-era  \n | --alonzo-era  \n | --babbage-era  \n | --conway-era  \n ]  \n [--max-lovelace-supply WORD64]  \n [--enable-p2p BOOL]  \n [--nodeLoggingFormat LOGGING_FORMAT]  \n [--num-dreps NUMBER]  \n [--enable-new-epoch-state-logging]  \n [--output-dir DIRECTORY]  \n --testnet-magic INT  \n [--epoch-length SLOTS]  \n [--slot-length SECONDS]  \n [--active-slots-coeff DOUBLE]  \n  \n Start a testnet in any era  \n  \nAvailable options:  \n --num-pool-nodes COUNT Number of pool nodes. Note this uses a default node  \n configuration for all nodes. (default: 1)  \n --node-config FILEPATH Path to the node's configuration file (which is  \n generated otherwise). If you use this option, you  \n should also pass all the genesis files (files pointed  \n to by the fields \"AlonzoGenesisFile\",  \n \"ShelleyGenesisFile\", etc.).  \n --shelley-era Specify the Shelley era - DEPRECATED - will be  \n removed in the future  \n --allegra-era Specify the Allegra era - DEPRECATED - will be  \n removed in the future  \n --mary-era Specify the Mary era - DEPRECATED - will be removed  \n in the future  \n --alonzo-era Specify the Alonzo era - DEPRECATED - will be removed  \n in the future  \n --babbage-era Specify the Babbage era (default) - DEPRECATED - will  \n be removed in the future  \n --conway-era Specify the Conway era  \n --max-lovelace-supply WORD64  \n Max lovelace supply that your testnet starts with.  \n Ignored if a custom Shelley genesis file is passed.  \n (default: 100000020000000)  \n --enable-p2p BOOL Enable P2P (default: False)  \n --nodeLoggingFormat LOGGING_FORMAT  \n Node logging format (json|text)  \n (default: NodeLoggingFormatAsJson)  \n --num-dreps NUMBER Number of delegate representatives (DReps) to  \n generate. Ignored if a custom Conway genesis file is  \n passed. (default: 3)  \n --enable-new-epoch-state-logging  \n Enable new epoch state logging to  \n logs/ledger-epoch-state.log  \n --output-dir DIRECTORY Directory where to store files, sockets, and so on.  \n It is created if it doesn't exist. If unset, a  \n temporary directory is used.  \n --testnet-magic INT Specify a testnet magic id.  \n --epoch-length SLOTS Epoch length, in number of slots. Ignored if a custom  \n Shelley genesis file is passed. (default: 500)  \n --slot-length SECONDS Slot length. Ignored if a custom Shelley genesis file  \n is passed. (default: 0.1)  \n --active-slots-coeff DOUBLE  \n Active slots coefficient. Ignored if a custom Shelley  \n genesis file is passed. (default: 5.0e-2)  \n -h,--help Show this help text`\n\nWe now go over these different options as there are many interactions between them.\n\n### Using a custom node configuration file and custom genesis files[​](#using-a-custom-node-configuration-file-and-custom-genesis-files \"Direct link to Using a custom node configuration file and custom genesis files\")\n\ncardano-testnet has two behaviors, depending on whether you want to use defaults or not. You can either:\n\n`--node-config`\n`--node-config`\n`AlonzoGenesisFile`\n`ShelleyGenesisFile`\n`ConwayGenesisFile`\n\nRight now, for scenario 2., there is no way to generate the node configuration file and the genesis files automatically, but this will be [made available soon](https://github.com/IntersectMBO/cardano-node/issues/6153).\n\n### Using a custom output directory[​](#using-a-custom-output-directory \"Direct link to Using a custom output directory\")\n\nIf you don't specify `--output-dir`, cardano-testnet will create a fresh temporary directory to run.\nThis directory will contain both (SPO, dreps, etc.) keys as well the nodes' data. If you specify `--output-dir`,\ncardano-testnet will use the specified directory to store the keys and the nodes' data. In this case we recommend using\na fresh directory every time, otherwise there is a risk that one run poisons the other.\nIn addition, using your own directory makes it easier to inspect the logs after the testnet has finished, or while\nit is running. The structure of the directory is as follows (using bash pseudo-syntax to avoid enumerations):\n\n`--output-dir`\n`--output-dir`\n`├── byron-gen-command  \n│   └── genesis-keys.00{0,1,2}.key  \n├── delegate-keys  \n│   ├── delegate{1,2,3}  \n│   │   ├── kes.{skey,vkey}  \n│   │   ├── key.{skey,vkey}  \n│   │   ├── opcert.{cert,counter}  \n│   │   └── vrf.{skey,vkey}  \n│   └── README.md  \n├── drep-keys  \n│   ├── drep{1,2,3}  \n│   │   └── drep.{skey,vkey}  \n│   └── README.md  \n├── genesis-keys  \n│   ├── genesis{1,2,3}  \n│   │   └── key.{skey,vkey}  \n│   └── README.md  \n├── logs  \n│   ├── node{1,2,3}  \n│   │   └── {stderr,stdout}.log  \n│   ├── ledger-epoch-state-diffs.log  \n│   ├── ledger-epoch-state.log  \n│   ├── node-20241010121635.log  \n│   └── node.log -> node-20241010121635.log  \n├── node-data  \n│   ├── node{1,2,3}  \n│   │   ├── db  \n│   │   │   └── <node database files>  \n│   │   ├── port  \n│   │   └── topology.json  \n├── pools-keys  \n│   ├── pool1  \n│   │   ├── byron-delegate.key  \n│   │   ├── byron-delegation.cert  \n│   │   ├── cold.{skey,vkey}  \n│   │   ├── kes.{skey,vkey}  \n│   │   ├── opcert.{cert,counter}  \n│   │   ├── staking-reward.{skey,vkey}  \n│   │   └── vrf.{skey,vkey}  \n│   └── README.md  \n├── socket  \n│   ├── node{1,2,3}  \n│   │   └── sock  \n├── stake-delegators  \n│   ├── delegator{1,2,3}  \n│   │   ├── payment.{skey,vkey}  \n│   │   └── staking.{skey,vkey}  \n├── utxo-keys  \n│   ├── utxo{1,2,3}  \n│   │   └── utxo.{addr,skey,vkey}  \n│   └── README.md  \n├── {alonzo,byron,conway,shelley}-genesis.json  \n├── configuration.json  \n└── current-stake-pools.json`\n\nWe draw the reader's attention to two things:\n\n`logs/node1/`\n`logs/node2/`\n\n### Era-specific flags: Shelley[​](#era-specific-flags-shelley \"Direct link to Era-specific flags: Shelley\")\n\nThere are four flags that control values specified in the Shelley genesis file:\n\n `--max-lovelace-supply WORD64  \n Max lovelace supply that your testnet starts with.  \n Ignored if a custom Shelley genesis file is passed.  \n (default: 100000020000000)  \n --epoch-length SLOTS Epoch length, in number of slots. Ignored if a custom  \n Shelley genesis file is passed. (default: 500)  \n --slot-length SECONDS Slot length. Ignored if a custom Shelley genesis file  \n is passed. (default: 0.1)  \n --active-slots-coeff DOUBLE  \n Active slots coefficient. Ignored if a custom Shelley  \n genesis file is passed. (default: 5.0e-2)`\n\nNote that all of these flags are ignored when a node configuration file and Shelley genesis file are specified.\n\n### Era-specific flags: Conway[​](#era-specific-flags-conway \"Direct link to Era-specific flags: Conway\")\n\nThere is one flag that control values that appear in the Conway genesis file and that's the number of dreps:\n\n `--num-dreps NUMBER Number of delegate representatives (DReps) to  \n generate. Ignored if a custom Conway genesis file is  \n passed. (default: 3)`\n\nLike the Shelley flags, this flag is ignored if a node configuration file and a Conway genesis file are specified.\n\n## Launching a local cluster: an example script[​](#launching-a-local-cluster-an-example-script \"Direct link to Launching a local cluster: an example script\")\n\nA typical way to launch a testnet cluster will look like this, using a Bash script:\n\n`#!/usr/bin/env bash  \nset -eux  \n  \nTMP_DIR=$(mktemp -d)  \n  \n# Install your custom configuration files (node configuration + genesis files)  \ncp <FROM_SOMEWHERE>/configuration.json $TMP_DIR/.  \n# This assumes the AlonzoGenesisFile JSON field in the node configuration file is \"alonzo-genesis.json\"  \n# Same for Shelley and Conway  \nfor era in shelley alonzo conway  \ndo  \n cp <FROM_SOMEWHERE>/$era-genesis.json $TMP_DIR/.  \ndone  \n  \ncabal run cardano-testnet -- cardano --node-config $TMP_DIR/configuration.json --output-dir $TMP_DIR --testnet-magic 42`\n\nWhen you execute this script, you will see output similar to this:\n\n `✗ <interactive> failed at src/Testnet/Property/Run.hs:89:7  \n after 1 test.  \n shrink path: 1:  \n   \n forAll0 =  \n ━━━━ File: /tmp/nix-shell.iZ2TPc/tmp.ly3nO21w1e/current-stake-pools.json ━━━━  \n [  \n \"pool1r8fuwkk3kkfekh6el0kzydrn009yqd89mrv4zpjq77wg6639ese\"  \n ]  \n   \n forAll1 =  \n Reading file: /tmp/nix-shell.iZ2TPc/tmp.ly3nO21w1e/current-stake-pools.json  \n   \n forAll2 =  \n ━━━━ command ━━━━  \n /home/churlin/.local/state/cabal/store/ghc-8.10.7/cardano-cli-10.4.0.0-e-cardano-cli-3b9fee1097cc434bbca7740006a83745fcc229aa57d45fcca2712990862bc6b9/bin/cardano-cli latest query stake-pools --out-file /tmp/nix-shell.iZ2TPc/tmp.ly3nO21w1e/current-stake-pools.json  \n   \n forAll3 =  \n /tmp/nix-shell.iZ2TPc/tmp.ly3nO21w1e/current-stake-pools.json  \n...  \n... lots of output  \n...  \nforAll75 =  \n Reusing /tmp/nix-shell.iZ2TPc/tmp.ly3nO21w1e  \n   \n This failure can be reproduced by running:  \n > recheckAt (Seed 1622863211725641548 12217359344083085813) \"1:\" <property>  \n   \nTestnet is running. Type CTRL-C to exit.`\n\nYou can ignore the initial `✗ <interactive> failed` log. This is an artifact from the fact that cardano-testnet relies\non a test library to run. The same applies to all `forAllX = ...` logs. That being said, those logs give the location of the output directory being used: it is `/tmp/nix-shell.iZ2TPc/tmp.ly3nO21w1e/` in the log above. This can be useful if you didn't specify `--output-dir` yourself and rely on cardano-testnet's default behavior.\n\n`✗ <interactive> failed`\n`forAllX = ...`\n`/tmp/nix-shell.iZ2TPc/tmp.ly3nO21w1e/`\n`--output-dir`\n\nOnce the line `Testnet is running. Type CTRL-C to exit.` appears, the testnet is running and building blocks, and regular queries commands (for example using [cardano-cli](https://developers.cardano.org/docs/get-started/cli-operations/basic-operations/)) can be executed against it.\n\n`Testnet is running. Type CTRL-C to exit.`\n\n## Stopping a local cluster[​](#stopping-a-local-cluster \"Direct link to Stopping a local cluster\")\n\nRight now, there is no built-in way to stop a running cluster (this will be improved in the future). We recommend using one of these methods to kill a running testnet:\n\n`pidof cardano-node`\n`kill`\n`killall cardano-node`",
  "images": [],
  "extraction_metadata": {
    "batch_number": 4,
    "extraction_timestamp": "2025-09-19T14:04:34.999822",
    "extraction_time": 3.8223392963409424,
    "source": "tavily_api_raw"
  }
}