{
  "url": "https://developers.cardano.org/docs/integrate-cardano/listening-for-payments-wallet",
  "content": "![Cardano Logo](/img/cardano-black.svg)\n![Cardano Logo](/img/cardano-white.svg)\n\n# Listening for ada payments using cardano-wallet\n\n## Overview[​](#overview \"Direct link to Overview\")\n\nThis guide assumes that you have basic understanding of `cardano-wallet`, how to use it and that you have installed it into your system. Otherwise we recommend reading [Installing cardano-node](/docs/operate-a-stake-pool/node-operations/installing-cardano-node), [Running cardano-node](/docs/operate-a-stake-pool/node-operations/running-cardano) and [Exploring Cardano Wallets](/docs/integrate-cardano/creating-wallet-faucet) guides first.\n\n`cardano-wallet`\n\nThis guide also assumes that you have `cardano-node` and `cardano-wallet` running in the background and connected to a [testnet network](/docs/get-started/testnets-and-devnets).\n\n`cardano-node`\n`cardano-wallet`\n\n## Use case[​](#use-case \"Direct link to Use case\")\n\nThere are many possible reasons why you would want to have the functionality of listening for `ada` payments, but a very obvious use case would be for something like an **online shop** or a **payment gateway** that uses `ada` tokens as the currency.\n\n`ada`\n`ada`\n\n![img](/assets/images/ada-online-shop-0dee5526d39fa5fc40c8e722f1fd0f6b.png)\n\n![img](/assets/images/ada-online-shop-0dee5526d39fa5fc40c8e722f1fd0f6b.png)\n\n## Technical flow[​](#technical-flow \"Direct link to Technical flow\")\n\nTo understand how something like this could work in a technical point of view, let's take a look at the following diagram:\n\n![img](/assets/images/ada-payment-flow-wallet-ca3d46bbad3e6722fabf41a8201b6bc1.png)\n\n![img](/assets/images/ada-payment-flow-wallet-ca3d46bbad3e6722fabf41a8201b6bc1.png)\n\nSo let's imagine a very basic scenario where a **customer** is browsing an online shop. Once the user has chosen and added all the items into the **shopping cart**. The next step would then be to checkout and pay for the items, Of course we will be using **Cardano** for that!\n\nThe **front-end** application would then request for a **wallet address** from the backend service and render a QR code to the **customer** to be scanned via a **Cardano wallet**. The backend service would then know that it has to query the `cardano-wallet` with a certain time interval to confirm and alert the **front-end** application that the payment has completed successfully.\n\n`cardano-wallet`\n\nIn the meantime the transaction is then being processed and settled within the **Cardano** network. We can see in the diagram above that both parties are ultimately connected to the network via the `cardano-node` software component.\n\n`cardano-node`\n\n## Time to code[​](#time-to-code \"Direct link to Time to code\")\n\nNow let's get our hands dirty and see how we can implement something like this in actual code.\n\n### Generate wallet and request tAda[​](#generate-wallet-and-request-tada \"Direct link to Generate wallet and request tAda\")\n\nFirst, we create our new **wallet** via `cardano-wallet` **REST API**:\n\n`cardano-wallet`\n\n#### Generate seed[​](#generate-seed \"Direct link to Generate seed\")\n\n`// Please add this dependency using npm install node-cmd  \nimport cmd from 'node-cmd';  \nconst mnemonic = cmd.runSync([\"cardano-wallet\",\"recovery-phrase\", \"generate\"].join(\" \")).data;`\n`import subprocess  \n  \nmnemonic = subprocess.check_output([  \n 'cardano-wallet', 'recovery-phrase', 'generate'  \n])`\n`using System;  \nusing SimpleExec; // dotnet add package SimpleExec --version 7.0.0  \n  \nvar mnemonic = await Command.ReadAsync(\"cardano-wallet\", \"recovery-phrase generate\", noEcho: true);`\n`// Please add this dependency using npm install node-cmd but there is no @type definition for it  \nconst cmd: any = require('node-cmd');  \n  \nconst mnemonic: string = cmd.runSync([\"cardano-wallet\", \"recovery-phrase\", \"generate\"].join(\" \")).data;`\n\n#### Restore wallet from seed[​](#restore-wallet-from-seed \"Direct link to Restore wallet from seed\")\n\nWe will then pass the generated seed to the wallet create / restore endpoint of `cardano-wallet`.\n\n`cardano-wallet`\n`// Please add this dependency using npm install node-fetch  \nimport fetch from 'node-fetch';  \n  \nconst resp = await fetch(\"http://localhost:9998/v2/wallets\", {  \n method: 'POST',  \n headers: {  \n 'Content-Type': 'application/json'  \n },  \n body: JSON.stringify({  \n name: \"test_cf_1\",  \n mnemonic_sentence: [\"expose\", \"biology\", \"will\", \"pause\", \"taxi\", \"behave\", \"inquiry\", \"lock\", \"matter\", \"pride\", \"divorce\", \"model\", \"little\", \"easily\", \"solid\", \"need\", \"dose\", \"sadness\", \"kitchen\", \"pyramid\", \"erosion\", \"shoulder\", \"double\", \"fragile\"],  \n passphrase: \"test123456\"  \n })  \n});`\n`// Please add this dependency using npm install node-fetch and npm install @types/node-fetch  \nimport fetch from 'node-fetch';  \nimport { Response } from 'node-fetch';  \n  \nconst resp: Response = await fetch(\"http://localhost:9998/v2/wallets\", {  \n method: 'POST',  \n headers: {  \n 'Content-Type': 'application/json'  \n },  \n body: JSON.stringify({  \n name: \"test_cf_1\",  \n mnemonic_sentence: [\"expose\", \"biology\", \"will\", \"pause\", \"taxi\", \"behave\", \"inquiry\", \"lock\", \"matter\", \"pride\", \"divorce\", \"model\", \"little\", \"easily\", \"solid\", \"need\", \"dose\", \"sadness\", \"kitchen\", \"pyramid\", \"erosion\", \"shoulder\", \"double\", \"fragile\"],  \n passphrase: \"test123456\"  \n })  \n});`\n`# pip install requests  \nimport requests  \n  \ndata = {  \n 'name' : 'test_cf_1',  \n 'mnemonic_sentence' : [\"expose\", \"biology\", \"will\", \"pause\", \"taxi\", \"behave\", \"inquiry\", \"lock\", \"matter\", \"pride\", \"divorce\", \"model\", \"little\", \"easily\", \"solid\", \"need\", \"dose\", \"sadness\", \"kitchen\", \"pyramid\", \"erosion\", \"shoulder\", \"double\", \"fragile\"],  \n 'passphrase' : 'test123456'  \n}  \n  \nr = requests.post(\"http://localhost:9998/v2/wallets\", json=data)`\n`using System;  \nusing System.Net.Http;  \nusing System.Net.Http.Json;  \n  \n// Restore the wallet using the previously generated seed. Assuming cardano-wallet is listening on port 9998  \nusing var http = new HttpClient() { BaseAddress = new Uri(\"http://localhost:9998/v2/\") };  \n  \nvar resp = await http.PostAsJsonAsync(\"wallets\", new {  \n name = \"test_cf_1\",   \n mnemonic_sentence = new[] { \"expose\", \"biology\", \"will\", \"pause\", \"taxi\", \"behave\", \"inquiry\", \"lock\", \"matter\", \"pride\", \"divorce\", \"model\", \"little\", \"easily\", \"solid\", \"need\", \"dose\", \"sadness\", \"kitchen\", \"pyramid\", \"erosion\", \"shoulder\", \"double\", \"fragile\" },   \n passphrase = \"test123456\"  \n});`\n\n#### Get unused wallet address to receive some payments[​](#get-unused-wallet-address-to-receive-some-payments \"Direct link to Get unused wallet address to receive some payments\")\n\nWe will get a **wallet address** to show to the customers and for them to send payments to the wallet. In this case we can use the address to request some `tAda` from the [Cardano Testnet Faucet](/docs/integrate-cardano/testnet-faucet) and simulate a payment:\n\n`tAda`\n`// Please add this dependency using npm install node-fetch  \nimport fetch from 'node-fetch';  \nconst walletId = \"101b3814d6977de4b58c9dedc67b87c63a4f36dd\";  \nconst resp = await fetch(`http://localhost:9998/v2/wallets/${walletId}/addresses?state=unused`);  \nconst addresses = await resp.json();  \nconst firstWalletAddress = addresses[0].id;`\n`// Please add this dependency using npm install node-fetch and npm install @types/node-fetch  \nimport fetch from 'node-fetch';  \nimport { Response } from 'node-fetch';  \n  \nconst walletId: string = \"101b3814d6977de4b58c9dedc67b87c63a4f36dd\";  \nconst resp: Response = await fetch(`http://localhost:9998/v2/wallets/${walletId}/addresses?state=unused`);  \nconst addresses: any = await resp.json();  \nconst firstWalletAddress: string = addresses[0].id;`\n`# pip install requests  \nimport requests  \nwalletId = '101b3814d6977de4b58c9dedc67b87c63a4f36dd'  \nr = requests.get('http://localhost:9998/v2/wallets/%s/addresses?state=unused' % walletId)  \naddresses = r.json()  \nfirstWalletAddress = addresses[0]['id']`\n`using System;  \nusing System.Net.Http;  \nusing System.Net.Http.Json;  \nusing System.Text.Json;  \n  \nusing var http = new HttpClient() { BaseAddress = new Uri(\"http://localhost:9998/v2/\") };  \n// Retrieve wallet address from previously created wallet  \n// Replace with the wallet Id you previously generated above  \nvar walletId = \"101b3814d6977de4b58c9dedc67b87c63a4f36dd\";  \nvar address = await http.GetFromJsonAsync<JsonElement>($\"wallets/{walletId}/addresses?state=unused\");  \nvar firstWalletAddress = addressResponse[0].GetProperty(\"id\");`\n\n### Retrieve wallet balance[​](#retrieve-wallet-balance \"Direct link to Retrieve wallet balance\")\n\nWe will then retrieve the wallet details to get stuff like its `sync status`, `native assets` and `balance (lovelace)`. We can then use the `balance` to check if we have received a some payment.\n\n`sync status`\n`native assets`\n`balance (lovelace)`\n`balance`\n`// Please add this dependency using npm install node-fetch  \nimport fetch from 'node-fetch';  \nconst walletId = \"101b3814d6977de4b58c9dedc67b87c63a4f36dd\";  \n// The total payment we expect in lovelace unit  \nconst totalExpectedLovelace = 1000000;  \nconst resp = await fetch(`http://localhost:9998/v2/wallets/${walletId}`);  \nconst wallet = await resp.json();  \nconst balance = wallet.balance.total.quantity;`\n`// Please add this dependency using npm install node-fetch and npm install @types/node-fetch  \nimport fetch from 'node-fetch';  \nimport { Response } from 'node-fetch';  \nconst walletId: string = \"101b3814d6977de4b58c9dedc67b87c63a4f36dd\";  \n// The total payment we expect in lovelace unit  \nconst totalExpectedLovelace = 1000000;  \nconst resp: Response = await fetch(`http://localhost:9998/v2/wallets/${walletId}`);  \nconst wallet: any = await resp.json();  \nconst balance: number = wallet.balance.total.quantity;`\n`# pip install requests  \nimport requests  \nwalletId = '101b3814d6977de4b58c9dedc67b87c63a4f36dd'  \n# The total payment we expect in lovelace unit  \ntotalExpectedLovelace = 1000000;  \nr = requests.get('http://localhost:9998/v2/wallets/%s' % walletId)  \nwallet = r.json()  \nbalance = wallet['balance']['total']['quantity']`\n`using System;  \nusing System.Net.Http;  \nusing System.Net.Http.Json;  \nusing System.Text.Json;  \n  \nusing var http = new HttpClient() { BaseAddress = new Uri(\"http://localhost:9998/v2/\") };  \n// Get Wallet Details / Balance  \n// Replace with your wallet Id  \nvar walletId = \"101b3814d6977de4b58c9dedc67b87c63a4f36dd\";  \n// The total payment we expect in lovelace unit  \nvar totalExpectedLovelace = 1000000;  \n  \nvar wallet = await http.GetFromJsonAsync<JsonElement>($\"wallets/{walletId}\");  \nvar balance = wallet.GetProperty(\"balance\").GetProperty(\"total\").GetProperty(\"quantity\").GetInt32();`\n\n### Determine if payment is successful[​](#determine-if-payment-is-successful \"Direct link to Determine if payment is successful\")\n\nOnce we have the total lovelace amount, we will then determine using our code if a specific payment is a success, ultimately sending or shipping the item if it is indeed successful. In our example, we expect that the payment is equal to `1,000,000 lovelace` that we defined in our `totalExpectedLovelace` constant.\n\n`1,000,000 lovelace`\n`totalExpectedLovelace`\n`// Check if payment is complete  \nconst isPaymentComplete = balance >= totalExpectedLovelace;  \n  \nconsole.log(`Total Received: ${balance} LOVELACE`);  \nconsole.log(`Expected Payment: ${totalExpectedLovelace} LOVELACE`);  \nconsole.log(`Payment Complete: ${(isPaymentComplete ? \"✅\":\"❌\")}`);`\n`// Check if payment is complete  \nconst isPaymentComplete: boolean = balance >= totalExpectedLovelace;  \n  \nconsole.log(`Total Received: ${balance} LOVELACE`);  \nconsole.log(`Expected Payment: ${totalExpectedLovelace} LOVELACE`);  \nconsole.log(`Payment Complete: ${(isPaymentComplete ? \"✅\":\"❌\")}`);`\n`# Check if payment is complete  \nisPaymentComplete = balance >= totalExpectedLovelace  \n  \nprint(\"Total Received: %s LOVELACE\" % balance)  \nprint(\"Expected Payment: %s LOVELACE\" % totalExpectedLovelace)  \nprint(\"Payment Complete: %s\" % {True: \"✅\", False: \"❌\"} [isPaymentComplete])`\n`// Check if payment is complete  \nvar isPaymentComplete = balance >= totalExpectedLovelace;  \n  \nConsole.WriteLine($\"Total Received: {balance} LOVELACE\");  \nConsole.WriteLine($\"Expected Payment: {totalExpectedLovelace} LOVELACE\");  \nConsole.WriteLine($\"Payment Complete: {(isPaymentComplete ? \"✅\":\"❌\")}\");`\n\n## Running and testing[​](#running-and-testing \"Direct link to Running and testing\")\n\nOur final code should look something like this:\n\n`// Please add this dependency using npm install node-fetch  \nimport fetch from 'node-fetch';  \nconst walletId = \"101b3814d6977de4b58c9dedc67b87c63a4f36dd\";  \n// The total payment we expect in lovelace unit  \nconst totalExpectedLovelace = 1000000;  \nconst resp = await fetch(`http://localhost:9998/v2/wallets/${walletId}`);  \nconst wallet = await resp.json();  \nconst balance = wallet.balance.total.quantity;  \n  \n// Check if payment is complete  \nconst isPaymentComplete = balance >= totalExpectedLovelace;  \n  \nconsole.log(`Total Received: ${balance} LOVELACE`);  \nconsole.log(`Expected Payment: ${totalExpectedLovelace} LOVELACE`);  \nconsole.log(`Payment Complete: ${(isPaymentComplete ? \"✅\":\"❌\")}`);`\n`// Please add this dependency using npm install node-fetch and npm install @types/node-fetch  \nimport fetch from 'node-fetch';  \nimport { Response } from 'node-fetch';  \nconst walletId: string = \"101b3814d6977de4b58c9dedc67b87c63a4f36dd\";  \nconst totalExpectedLovelace: number = 1000000;  \nconst resp: Response = await fetch(`http://localhost:9998/v2/wallets/${walletId}`);  \nconst wallet: any = await resp.json();  \nconst balance: number = wallet.balance.total.quantity;  \n  \n// Check if payment is complete  \nconst isPaymentComplete: boolean = balance >= totalExpectedLovelace;  \n  \nconsole.log(`Total Received: ${balance} LOVELACE`);  \nconsole.log(`Expected Payment: ${totalExpectedLovelace} LOVELACE`);  \nconsole.log(`Payment Complete: ${(isPaymentComplete ? \"✅\":\"❌\")}`);`\n`# coding: utf-8  \n# pip install requests  \nimport requests  \nwalletId = '101b3814d6977de4b58c9dedc67b87c63a4f36dd'  \nr = requests.get('http://localhost:9998/v2/wallets/%s' % walletId)  \nwallet = r.json()  \nbalance = wallet['balance']['total']['quantity']  \ntotalExpectedLovelace = 1000000  \n  \n# Check if payment is complete  \nisPaymentComplete = balance >= totalExpectedLovelace  \n  \nprint(\"Total Received: %s LOVELACE\" % balance)  \nprint(\"Expected Payment: %s LOVELACE\" % totalExpectedLovelace)  \nprint(\"Payment Complete: %s\" % {True: \"✅\", False: \"❌\"} [isPaymentComplete])`\n`using System;  \nusing System.Net.Http;  \nusing System.Net.Http.Json;  \nusing System.Text.Json;  \n  \nusing var http = new HttpClient() { BaseAddress = new Uri(\"http://localhost:9998/v2/\") };  \n// Get Wallet Details / Balance  \n// Replace with your wallet Id  \nvar walletId = \"101b3814d6977de4b58c9dedc67b87c63a4f36dd\";  \n// The total payment we expect in lovelace unit  \nvar totalExpectedLovelace = 1000000;  \n  \nvar wallet = await http.GetFromJsonAsync<JsonElement>($\"wallets/{walletId}\");  \nvar balance = wallet.GetProperty(\"balance\").GetProperty(\"total\").GetProperty(\"quantity\").GetInt32();  \n  \n// Check if payment is complete  \nvar isPaymentComplete = balance >= totalExpectedLovelace;  \n  \nConsole.WriteLine($\"Total Received: {balance} LOVELACE\");  \nConsole.WriteLine($\"Expected Payment: {totalExpectedLovelace} LOVELACE\");  \nConsole.WriteLine($\"Payment Complete: {(isPaymentComplete ? \"✅\":\"❌\")}\");`\n\nNow we are ready to test 🚀, running the code should give us the following result:\n\n`❯ node checkPayment.js  \nTotal Received: 0 LOVELACE  \nExpected Payment: 1000000 LOVELACE  \nPayment Complete: ❌`\n`❯ ts-node checkPayment.ts  \nTotal Received: 0 LOVELACE  \nExpected Payment: 1000000 LOVELACE  \nPayment Complete: ❌`\n`❯ dotnet run  \nTotal Received: 0 LOVELACE  \nExpected Payment: 1000000 LOVELACE  \nPayment Complete: ❌`\n`❯ python checkPayment.py   \nTotal Received: 0 LOVELACE  \nExpected Payment: 1000000 LOVELACE  \nPayment Complete: ❌`\n\nThe code is telling us that our current wallet has received a total of `0 lovelace` and it expected `1,000,000 lovelace`, therefore it concluded that the payment is not complete.\n\n`0 lovelace`\n`1,000,000 lovelace`\n\n## Complete the payment[​](#complete-the-payment \"Direct link to Complete the payment\")\n\nWhat we can do to simulate a successful payment is to send at least `1,000,000 lovelace` into the **wallet address** that we have just generated for this project. We show how you can get the **wallet address** via code in the examples above.\n\n`1,000,000 lovelace`\n\nNow simply send at least `1,000,000 lovelace` to this **wallet address** or request some `test ada` funds from the [Cardano Testnet Faucet](/docs/integrate-cardano/testnet-faucet). Once complete, we can now run the code again and we should see a successful result this time.\n\n`1,000,000 lovelace`\n`test ada`\n`❯ node checkPayment.js  \nTotal Received: 1000000000 LOVELACE  \nExpected Payment: 1000000 LOVELACE  \nPayment Complete: ✅`\n`❯ ts-node checkPayment.ts  \nTotal Received: 1000000000 LOVELACE  \nExpected Payment: 1000000 LOVELACE  \nPayment Complete: ✅`\n`❯ dotnet run  \nTotal Received: 1000000000 LOVELACE  \nExpected Payment: 1000000 LOVELACE  \nPayment Complete: ✅`\n`❯ python checkPayment.py   \nTotal Received: 1000000000 LOVELACE  \nExpected Payment: 1000000 LOVELACE  \nPayment Complete: ✅`\n\nIt might take 20 seconds or more for the transaction to propagate within the network depending on the network health, so you will have to be patient.\n\nCongratulations, you are now able to detect successful **Cardano** payments programmatically. This should help you bring integrations to your existing or new upcoming applications. 🎉🎉🎉",
  "images": [],
  "extraction_metadata": {
    "batch_number": 7,
    "extraction_timestamp": "2025-09-19T14:04:49.862174",
    "extraction_time": 2.4011168479919434,
    "source": "tavily_api_raw"
  }
}