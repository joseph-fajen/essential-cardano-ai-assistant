{
  "url": "https://developers.cardano.org/docs/smart-contracts/advanced/design-patterns/normalization-techniques/validity-range-normalization",
  "content": "![Cardano Logo](/img/cardano-black.svg)\n![Cardano Logo](/img/cardano-white.svg)\n\n# Validity Range Normalization\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nIn the intricate landscape of developing validators for the Cardano protocol, one encounters the\nnecessity to implement checks that meticulously consider time-related factors. To circumvent the\nredundancy of executing smart contract code multiple times, Cardano has devised an approach that\nsets it apart from other blockchains. Specifically, validators, at runtime, are intentionally\ndeprived of direct access to the current time. Instead, they are equipped with information solely\nabout the validity range of a transaction. This design choice guarantees that a transaction is only\nadmitted to the chain within its designated validity range. Consequently, smart contracts can\nimplement checks based on the current time, while maintaining computational purity—wherein functions\nexhibit mathematical purity devoid of side-causes or side-effects.\n\n## The Problem[​](#the-problem \"Direct link to The Problem\")\n\nThe representation of validity ranges in Plutus introduces a subtle complexity with its lower and\nupper bounds, both capable of assuming the extremal values of `-∞` and `+∞`. Additionally, a boolean\nflag signifies whether the range is open or closed at each end. This flexibility, however, leads to\nmultiple representations of the same validity range. For instance, the range `(a, b)` (open on both\nends) is equivalent to the range `[a+1, b-1]` (closed on both ends) if both a and b are finite.\nFurther complexity arises from the fact that infinite ranges are occasionally represented as closed\non the \"open\" sides. For example, the always range is (at the time of writing) denoted as `[-∞, +∞]`, despite the inconsistency with the actual time values that do not include `-∞` or `+∞`.\n\n`-∞`\n`+∞`\n`(a, b)`\n`[a+1, b-1]`\n`[-∞, +∞]`\n`-∞`\n`+∞`\n\nThis ambiguity can potentially result in unintended consequences for validators ill-equipped to\nhandle these diverse representations. Moreover, as the standard method of communicating the range\nmay change with any hard fork, long-lived smart contracts must be designed to accommodate various\nrepresentations to prevent funds from being indefinitely locked within them.\n\nAn example on how to handle every case correctly:\n\n`isTimeValid :: Datum -> POSIXTimeRange -> Bool  \nisTimeValid datum (Interval (LowerBound (Finite l) False) (UpperBound (Finite u) False)) = ...  \nisTimeValid datum (Interval (LowerBound NegInf False) (UpperBound (Finite u) False)) = ...  \nisTimeValid datum (Interval (LowerBound (Finite l) False) (UpperBound PosInf False)) = ...  \nisTimeValid datum (Interval (LowerBound PosInf False) (UpperBound (Finite u) False)) = ...  \n...  \nisTimeValid datum (Interval (LowerBound PosInf True) (UpperBound PosInf True)) = ...`\n\n## The Solution[​](#the-solution \"Direct link to The Solution\")\n\nIn our endeavor to establish best practices, we advocate for the adoption of normalized versions of\nvalidity ranges within the design patterns library. We propose incorporating functions that\nfacilitate the normalization procedure to ensure consistency in the representation of these ranges.\nThe recommended formats for normalized validity ranges are as follows:\n\n`[a, b]`: Denotes a closed range if both a and b are finite.  \n`(-∞, x]` and `[x, +∞)`: Represents a half-open range on the infinite side, where x is a finite value.  \n`(-∞, +∞)`: Signifies an open range on both sides, specifically used for the representation of the\nalways range, aligning with the standard convention in mathematics.\n\n`[a, b]`\n`(-∞, x]`\n`[x, +∞)`\n`(-∞, +∞)`\n\nWith this the example above can be implemented in a much cleaner way:\n\n`isTimeValid :: Datum -> POSIXTimeRange -> Bool  \nisTimeValid datum r =  \n case normalizedTimeRange r of  \n ClosedRange l u -> ...  \n FromNegInf u -> ...  \n ToPosInf l -> ...  \n Always -> ...`",
  "images": [],
  "extraction_metadata": {
    "batch_number": 10,
    "extraction_timestamp": "2025-09-19T14:05:05.551444",
    "extraction_time": 2.0458879470825195,
    "source": "tavily_api_raw"
  }
}