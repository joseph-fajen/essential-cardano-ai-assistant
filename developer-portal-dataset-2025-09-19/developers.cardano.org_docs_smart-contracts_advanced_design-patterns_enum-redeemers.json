{
  "url": "https://developers.cardano.org/docs/smart-contracts/advanced/design-patterns/enum-redeemers",
  "content": "![Cardano Logo](/img/cardano-black.svg)\n![Cardano Logo](/img/cardano-white.svg)\n\n# Enum Data Mapping Functions\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nIn the Cardano blockchain ecosystem, smart contract UTxOs often come equipped with redeemers, which\nare crucial components indicating the purpose or cause of the transaction. These redeemers may carry\nadditional data to facilitate computations within the validator function. However, in many\nscenarios, a straightforward enumeration suffices:\n\n`data AuctionRedeemer = Initializing | Bidding | Closing  \n  \nPlutusTx.makeLift ''AuctionRedeemer  \nPlutusTx.makeIsDataIndexed ''AuctionRedeemer [('Initializing, 0), ('Bidding, 1), ('Closing, 2)]`\n\nThe problem and solution described in this document, of course, also applies to other onchain data\nstructures, but most frequently it appears in relation to redeemers. The same techniques apply for\nother data mapping as well, it is not spcific to redeemers.\n\n## The Challenge[​](#the-challenge \"Direct link to The Challenge\")\n\nTypically, the generated data conversion functions associate `AuctionRedeemer` values with Plutus\ndata constructors such as `Constr 0 []`, `Constr 1 []`, or `Constr 2 []`. While semantically sound,\nthis mapping incurs a bit more complexity and cost than necessary. A more streamlined approach would\ninvolve a simpler mapping, directly converting these cases to their corresponding `Integer` values\nof `0`, `1`, and `2`.\n\n`AuctionRedeemer`\n`Constr 0 []`\n`Constr 1 []`\n`Constr 2 []`\n`Integer`\n`0`\n`1`\n`2`\n\n## A Simpler Approach[​](#a-simpler-approach \"Direct link to A Simpler Approach\")\n\nTo address this, our library introduces a set of new mapping code that streamlines the\nimplementation process, making it as straightforward as the original Plutus, Plutarch, and Aiken\nversions.\n\n## Benefits of the Solution[​](#benefits-of-the-solution \"Direct link to Benefits of the Solution\")\n\nBy adopting this approach, we aim to simplify and optimize the mapping functions specifically\ntailored for these cases. This not only reduces unnecessary complexity but also lowers the\nassociated costs of standard mapping functions.\n\n## Conclusion[​](#conclusion \"Direct link to Conclusion\")\n\nThis enhancement offers a cleaner and more efficient solution, diminishing the complexity and cost\nof standard mapping functions for these specific use cases. Users can now benefit from a\nstraightforward implementation that aligns with the simplicity of the original versions.",
  "images": [],
  "extraction_metadata": {
    "batch_number": 10,
    "extraction_timestamp": "2025-09-19T14:05:05.551444",
    "extraction_time": 2.0458879470825195,
    "source": "tavily_api_raw"
  }
}