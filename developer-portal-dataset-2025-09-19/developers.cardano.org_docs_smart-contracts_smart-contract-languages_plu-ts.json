{
  "url": "https://developers.cardano.org/docs/smart-contracts/smart-contract-languages/plu-ts",
  "content": "![Cardano Logo](/img/cardano-black.svg)\n![Cardano Logo](/img/cardano-white.svg)\n\n# Plu-ts\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\n[`Plu-ts`](https://github.com/HarmonicLabs/plu-ts) is a Typescript-embedded programming language and library for developing smart contracts on the Cardano blockchain. It is designed for smart contract efficiency while staying as close as possible to the Typescript syntax.\n\n`Plu-ts`\n\nThe tool is composed by the eDSL that allows you to create smart contracts and compile them; and an off-chain library that introduces all the types required to interact with the Cardano ledger and create transactions.\n\n## Getting started[​](#getting-started \"Direct link to Getting started\")\n\nTo get started with `plu-ts`, you can install it using `npm` and set up your project following the instructions in the [`plu-ts` documentation](https://pluts.harmoniclabs.tech/).\n\n`plu-ts`\n`npm`\n`plu-ts`\n\nYou can find the documentation for `plu-ts` at [pluts.harmoniclabs.tech](https://pluts.harmoniclabs.tech/).\n\n`plu-ts`\n\nIf you need help feel free to open issues at the [`plu-ts` git repository](https://github.com/HarmonicLabs/plu-ts).\n\n`plu-ts`\n\n### Example contract[​](#example-contract \"Direct link to Example contract\")\n\nSome example projects can be found [in the `plu-ts` documentation](https://pluts.harmoniclabs.tech/category/examples);\n\n`plu-ts`\n\nHere we report the `Hello plu-ts` contract; to see how it works you can follow [the example project](https://pluts.harmoniclabs.tech/examples/Hello_world_v0).\n\n`Hello plu-ts`\n`import { bool, compile, makeValidator, PaymentCredentials, pBool, pfn, Script, ScriptType, PScriptContext, bs, PPubKeyHash } from \"@harmoniclabs/plu-ts\";  \n  \nconst contract = pfn([  \n PPubKeyHash.type,  \n bs,  \n PScriptContext.type  \n], bool)  \n(( owner, message, ctx ) => {  \n  \n const isBeingPolite = message.eq(\"Hello plu-ts\");  \n  \n const signedByOwner = ctx.tx.signatories.some( owner.eqTerm );  \n  \n return isBeingPolite.and( signedByOwner );  \n});  \n  \n// all validators must be untyped once on-chain  \nexport const untypedValidator = makeValidator( contract );  \n  \n// here we get the raw bytes of the contract  \nexport const compiledContract = compile( untypedValidator );  \n  \n// the `script` object can be used offchain  \nexport const script = new Script(  \n ScriptType.PlutusV2,  \n compiledContract  \n);`\n\n## Resources[​](#resources \"Direct link to Resources\")\n\n`Plu-ts`\n`Plu-ts`",
  "images": [],
  "extraction_metadata": {
    "batch_number": 12,
    "extraction_timestamp": "2025-09-19T14:05:17.156321",
    "extraction_time": 1.6163160800933838,
    "source": "tavily_api_raw"
  }
}