{
  "url": "https://developers.cardano.org/docs/smart-contracts/advanced/design-patterns/transaction-level-validation/transaction-level-validation-minting-policy",
  "content": "![Cardano Logo](/img/cardano-black.svg)\n![Cardano Logo](/img/cardano-white.svg)\n\n# Transaction Level Validation via Minting Policies\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nWhen crafting transactions to process a single script (smart contract) UTxO, enforcing spending\nrequirements seems straightforward. However, in high-throughput applications, a more efficient\napproach is desired – allowing the processing (spending) of these script UTxOs in a \"batch.\"\nUnfortunately, invoking the validator script for each input UTxO in a transaction repeats\npre-processing steps, making it less optimal. To overcome this, the technique of \"transaction level\nvalidation\" is employed.\n\nFor a detailed implementation of transaction level validation using staking validators, refer to the\n[Stake Validator Design pattern](/docs/smart-contracts/advanced/design-patterns/transaction-level-validation/stake-validators/stake-validator). This document outlines the details of\nimplementing the same pattern via minting policies.\n\n## The Problem[​](#the-problem \"Direct link to The Problem\")\n\nA batch transaction involves multiple input UTxOs at a specific script address, and spending can\nonly occur when specific conditions apply (i.e., the validator function does not reject the\ntransaction). In this scenario, the validator script is executed for each UTxO, and the transaction\nfails if any of the scripts reject it.\n\n## The Solution[​](#the-solution \"Direct link to The Solution\")\n\nA more efficient way to perform all the validations is by delegating them to a minting script, which\nwill only be executed once for the entire transaction.\n\nThe drawback of this approach is that the minted validation tokens must be included in one of the\noutputs, potentially consuming unnecessary block space.\n\nA more desirable solution involves burning the validation tokens instead of minting them in the\nbatch transaction. However, this requires minting and storing the validation tokens in the input\nUTxOs beforehand, allowing for pre-validation steps attached to their creation.\n\n## Conclusion[​](#conclusion \"Direct link to Conclusion\")\n\nTransaction level validation can be implemented using minting policies. However, if minting\nvalidation tokens is impractical, the recommended approach is to implement transaction level\nvalidation using a staking validator due to lower ExUnits cost compared to minting policy checks,\nbased on our experience.\n\nYou can find a sample implementation of a tx level minter written in Aiken in this[repository](https://github.com/keyan-m/aiken-delegation-sample/blob/main/validators/spend-logic.ak).",
  "images": [],
  "extraction_metadata": {
    "batch_number": 10,
    "extraction_timestamp": "2025-09-19T14:05:05.551444",
    "extraction_time": 2.0458879470825195,
    "source": "tavily_api_raw"
  }
}