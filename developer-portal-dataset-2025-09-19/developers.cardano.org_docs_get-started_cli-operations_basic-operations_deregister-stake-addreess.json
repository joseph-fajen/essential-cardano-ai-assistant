{
  "url": "https://developers.cardano.org/docs/get-started/cli-operations/basic-operations/deregister-stake-addreess",
  "content": "![Cardano Logo](/img/cardano-black.svg)\n![Cardano Logo](/img/cardano-white.svg)\n\n# Deregister stake address\n\nThe process outlined below involves transferring funds from the payment address associated with the stake address we plan to deregister. This is followed by withdrawing rewards over several consecutive epochs until the rewards are negligible. Only then do we deregister the stake address. This ensures that all earned rewards are collected.\n\n![Deregister stake address](/assets/images/deregister-stake-address-10b12eeedf9e7fa1d7abbb7dd1dc6db3.png)\n\n![Deregister stake address](/assets/images/deregister-stake-address-10b12eeedf9e7fa1d7abbb7dd1dc6db3.png)\n\nAt Epoch N:\n\nAt the Beginning of Epoch N+1:\n\nSubsequent Epochs:\n\nFinal step:\n\n### Generate the Stake address deregistration certificate[​](#generate-the-stake-address-deregistration-certificate \"Direct link to Generate the Stake address deregistration certificate\")\n\nHere we only show step 7, previous steps can be performed following the corrsponding tutorial for that particular workflow. To generate the **stake address deregistration certificate** we run:\n\n`cardano-cli conway stake-address deregistration-certificate \\  \n--stake-verification-key-file stake.vkey \\  \n--out-file dereg.cert`\n\nAs most of the CLI-produced artificats it is in a text envelope format, with the `cborHex` field encoding the details of the certificate:\n\n`cborHex`\n`cat dereg.cert`\n`{  \n \"type\": \"CertificateShelley\",  \n \"description\": \"Stake Address Deregistration Certificate\",  \n \"cborHex\": \"82018200581c521da955ad8f24bdff8d3cb8f5a155c49870037019fcdf20949e7e5e\"  \n}`\n\n### Query information required for the transaction:[​](#query-information-required-for-the-transaction \"Direct link to Query information required for the transaction:\")\n\nWe will submit the deregistration certificate, withdraw the last rewards from the stake address and collect the stake address deposit on the same transaction, let's query all the information we will need for our transaciton:\n\n#### Get the stake address balance[​](#get-the-stake-address-balance \"Direct link to Get the stake address balance\")\n\nThis is required for withdrawing the rewards still available on `stake.addr`\n\n`stake.addr`\n`cardano-cli conway query stake-address-info --address $(< stake.addr)`\n`[  \n {  \n \"address\": \"stake_test1upfpm2244k8jf00l357t3adp2hzfsuqrwqvleheqjj08uhswme5cn\",  \n \"delegationDeposit\": 2000000,  \n \"rewardAccountBalance\": 291385529,  \n \"stakeDelegation\": \"pool1l9u9ss9xtww8qkt4zqda84z945f6tgq4753jqhtdr4r8yaw7d6g\",  \n \"voteDelegation\": \"scriptHash-59aa3f091b3bcef254abfb89aea64973a61b78fdb2ac44839c7ccba8\"  \n }  \n]`\n\nand use the syntax `stake_address+balance` with the `--withdrawal` option when building the transaction, for example:\n`--withdrawal stake_test1upfpm2244k8jf00l357t3adp2hzfsuqrwqvleheqjj08uhswme5cn+291385529`\n\n`stake_address+balance`\n`--withdrawal`\n`--withdrawal stake_test1upfpm2244k8jf00l357t3adp2hzfsuqrwqvleheqjj08uhswme5cn+291385529`\n\n#### Get the utxo from new-payment.addr[​](#get-the-utxo-from-new-paymentaddr \"Direct link to Get the utxo from new-payment.addr\")\n\nSteps 1 and 2 suggest creating a new payment address and transfer funds to it. On the transaction below, we'll use `new_payment.addr` to pay for the transaction fees.\n\n`new_payment.addr`\n`cardano-cli conway query utxo --address $(< payment.addr)  \n TxHash TxIx Amount  \n--------------------------------------------------------------------------------------  \n77b95d3c0031f918d2dcd796352d123dd3fec9f8599377ef96f1ee0e488f5ec1 0 9997495621 lovelace + TxOutDatumNone`\n\n#### Get the stake address deposit amount[​](#get-the-stake-address-deposit-amount \"Direct link to Get the stake address deposit amount\")\n\n`cardano-cli conway query protocol-parameters | jq .stakeAddressDeposit  \n  \n> 2000000`\n\n### Build sign and submit the transaction[​](#build-sign-and-submit-the-transaction \"Direct link to Build sign and submit the transaction\")\n\nHere we use the information from the above queries to build the transaction:\n\n`cardano-cli conway transaction build \\  \n--tx-in 77b95d3c0031f918d2dcd796352d123dd3fec9f8599377ef96f1ee0e488f5ec1#0 \\  \n--change-address addr_test1vp9khgeajxw8snjjvaaule727hpytrvpsnq8z7h9t3zeuegh55grh \\  \n--withdrawal stake_test1upfpm2244k8jf00l357t3adp2hzfsuqrwqvleheqjj08uhswme5cn+291385529 \\  \n--certificate-file dereg.cert \\  \n--witness-override 2 \\  \n--out-file tx.raw`\n\nOf course, we could use command substitution and run all the queries within `build`, so this is equivalent:\n\n`build`\n`cardano-cli conway transaction build \\  \n--tx-in \"$(cardano-cli conway query utxo --address \"$(< new-payment.addr)\" --output-json | jq -r 'keys[0]')\" \\  \n--change-address \"$(< new-payment.addr)\" \\  \n--withdrawal \"$(< stake.addr)+$(cardano-cli conway query stake-address-info --address \"$(< stake.addr)\" | jq -r .[].rewardAccountBalance)\" \\  \n--certificate-file dereg.cert \\  \n--witness-override 2 \\  \n--out-file tx.raw`\n`Estimated transaction fee: Coin 180505`\n\nInspect the transaction before signing:\n\n`cardano-cli debug transaction view --tx-file tx.raw`\n`{  \n \"auxiliary scripts\": null,  \n \"certificates\": [  \n {  \n \"stake address deregistration\": {  \n \"keyHash\": \"521da955ad8f24bdff8d3cb8f5a155c49870037019fcdf20949e7e5e\"  \n }  \n }  \n ],  \n \"collateral inputs\": [],  \n \"era\": \"Babbage\",  \n \"fee\": \"180505 Lovelace\",  \n \"inputs\": [  \n \"77b95d3c0031f918d2dcd796352d123dd3fec9f8599377ef96f1ee0e488f5ec1#0\"  \n ],  \n \"metadata\": null,  \n \"mint\": null,  \n \"outputs\": [  \n {  \n \"address\": \"addr_test1vp9khgeajxw8snjjvaaule727hpytrvpsnq8z7h9t3zeuegh55grh\",  \n \"address era\": \"Shelley\",  \n \"amount\": {  \n \"lovelace\": 10290700645  \n },  \n \"network\": \"Testnet\",  \n \"payment credential key hash\": \"4b6ba33d919c784e52677bcfe7caf5c2458d8184c0717ae55c459e65\",  \n \"reference script\": null,  \n \"stake reference\": null  \n }  \n ],  \n \"redeemers\": [],  \n \"reference inputs\": [],  \n \"required signers (payment key hashes needed for scripts)\": null,  \n \"return collateral\": null,  \n \"total collateral\": null,  \n \"update proposal\": null,  \n \"validity range\": {  \n \"lower bound\": null,  \n \"upper bound\": null  \n },  \n \"withdrawals\": [  \n {  \n \"address\": \"stake_test1upfpm2244k8jf00l357t3adp2hzfsuqrwqvleheqjj08uhswme5cn\",  \n \"amount\": \"291385529 Lovelace\",  \n \"network\": \"Testnet\",  \n \"stake credential key hash\": \"521da955ad8f24bdff8d3cb8f5a155c49870037019fcdf20949e7e5e\"  \n }  \n ],  \n \"witnesses\": []  \n}`\n\nConfirm that the keyHash for the stake address deregistration is correct with:\n\n`cardano-cli conway stake-address key-hash --stake-verification-key-file stake.vkey   \n521da955ad8f24bdff8d3cb8f5a155c49870037019fcdf20949e7e5e`\n\nAll good! Ready to sign the transaction:\n\n`cardano-cli conway transaction sign \\  \n --tx-file tx.raw \\  \n --signing-key-file new-payment.skey \\  \n --signing-key-file stake.skey \\  \n --out-file tx.signed`\n\nAnd submit it to the chain:\n\n`cardano-cli conway transaction submit --tx-file tx.signed   \nTransaction successfully submitted.`\n\nTo confirm, we query the balance of `new-payment.addr`, rewards are withdrawn and deposit has been returned:\n\n`new-payment.addr`\n`cardano-cli conway query utxo --address $(< new-payment.addr)  \n TxHash TxIx Amount  \n--------------------------------------------------------------------------------------  \nc09bf08fdf6ae655d8ba7c5e9f44b5cbe11b6bb9621eabb9b1b08c1b27b987eb 0 10290700645 lovelace + TxOutDatumNone`\n\nIf we query the stake address info, we get `[]`, meaning that the deregistration has been sucessful:\n\n`[]`\n`cardano-cli conway query stake-address-info --address $(< stake.addr)  \n[]`",
  "images": [],
  "extraction_metadata": {
    "batch_number": 4,
    "extraction_timestamp": "2025-09-19T14:04:34.999822",
    "extraction_time": 3.8223392963409424,
    "source": "tavily_api_raw"
  }
}