{
  "url": "https://developers.cardano.org/docs/smart-contracts/lessons/02-multisig.mdx",
  "content": "![Cardano Logo](/img/cardano-black.svg)\n![Cardano Logo](/img/cardano-white.svg)\n\n# Multi-signature Transactions\n\nA multi-signature (multi-sig) transaction requires more than one user to sign a transaction before it is broadcast on the blockchain. Think of it like a joint savings account where both parties must approve spending. Multi-sig transactions can include two or more required signers, which can be wallets or scripts.\n\nIn this lesson, you'll learn how to:\n\n## System setup[​](#system-setup \"Direct link to System setup\")\n\n### Download CIP30 Wallet Extension[​](#download-cip30-wallet-extension \"Direct link to Download CIP30 Wallet Extension\")\n\nTo interact with the blockchain, you'll need a [wallet extension](https://developers.cardano.org/showcase/?tags=wallet) that supports the CIP30 standard.\n\nAfter downloading the wallet, restore it using the seed phrase you created in the previous lesson.\n\n### Set Up NextJS and Mesh[​](#set-up-nextjs-and-mesh \"Direct link to Set Up NextJS and Mesh\")\n\nOpen your terminal and run the following command to create a new NextJS application:\n\n`npx create-next-app@latest --typescript mesh-multisig`\n\nFollow the prompts:\n\n`Need to install the following packages:  \nOk to proceed? (y)  \n  \n✔ Would you like to use ESLint? … Yes  \n✔ Would you like to use Tailwind CSS? … Yes  \n✔ Would you like your code inside a `src/` directory? … Yes  \n✔ Would you like to use App Router? … No  \n✔ Would you like to use Turbopack for next dev? … No  \n✔ Would you like to customize the import alias (@/* by default)? … No`\n\nNavigate to the newly created folder:\n\n`cd mesh-multisig`\n\nInstall the latest version of Mesh:\n\n`npm install @meshsdk/core @meshsdk/react`\n\n### Add MeshProvider[​](#add-meshprovider \"Direct link to Add MeshProvider\")\n\nTo use Mesh React, wrap your application with the `MeshProvider` component. Open the `src/app/layout.tsx` file and add:\n\n`MeshProvider`\n`src/app/layout.tsx`\n`import \"@/styles/globals.css\";  \nimport type { AppProps } from \"next/app\";  \nimport \"@meshsdk/react/styles.css\";  \nimport { MeshProvider } from \"@meshsdk/react\";  \n  \nexport default function App({ Component, pageProps }: AppProps) {  \n return (  \n <MeshProvider>  \n <Component {...pageProps} />  \n </MeshProvider>  \n );  \n}`\n\n### Add CardanoWallet Component[​](#add-cardanowallet-component \"Direct link to Add CardanoWallet Component\")\n\nAdd a wallet React component to connect to the wallet and interact with the blockchain. Open the `src/pages/index.tsx` file, delete the existing code, and replace it with:\n\n`src/pages/index.tsx`\n`import { CardanoWallet, useWallet } from \"@meshsdk/react\";  \n  \nexport default function Home() {  \n const { wallet, connected } = useWallet();  \n return (  \n <div>  \n <CardanoWallet isDark={true} />  \n </div>  \n );  \n}`\n\nStart the development server:\n\n`npm run dev`\n\nVisit [http://localhost:3000](http://localhost:3000/) to view your application. Press **CTRL+C** to stop the server.\n\nYou should see a \"Connect Wallet\" component. Try connecting to your wallet.\n\n## Minting Script[​](#minting-script \"Direct link to Minting Script\")\n\nIn this section, you'll create a minting script to mint a token using a multi-signature transaction.\n\n### Define the Minting Script[​](#define-the-minting-script \"Direct link to Define the Minting Script\")\n\nSet up constants for the minting script:\n\n`const provider = new BlockfrostProvider(\"YOUR_KEY_HERE\");  \n  \nconst demoAssetMetadata = {  \n name: \"Mesh Token\",  \n image: \"ipfs://QmRzicpReutwCkM6aotuKjErFCUD213DpwPq6ByuzMJaua\",  \n mediaType: \"image/jpg\",  \n description: \"This NFT was minted by Mesh (https://meshjs.dev/).\",  \n};  \n  \nconst mintingWallet = [\"your\", \"mnemonic\", \"...\", \"here\"];`\n`YOUR_KEY_HERE`\n`demoAssetMetadata`\n\n### Create Minting Application Wallet[​](#create-minting-application-wallet \"Direct link to Create Minting Application Wallet\")\n\nCreate a function to build the minting transaction:\n\n`async function buildMintTx(inputs: UTxO[], changeAddress: string) {  \n const wallet = new MeshWallet({  \n networkId: 0,  \n key: {  \n type: \"mnemonic\",  \n words: mintingWallet,  \n },  \n });  \n  \n const { pubKeyHash: keyHash } = deserializeAddress(  \n await wallet.getChangeAddress()  \n );  \n}`\n`inputs`\n`pubKeyHash`\n\n### Create Native Script[​](#create-native-script \"Direct link to Create Native Script\")\n\nDefine the native script:\n\n`const nativeScript: NativeScript = {  \n type: \"all\",  \n scripts: [  \n {  \n type: \"before\",  \n slot: \"99999999\",  \n },  \n {  \n type: \"sig\",  \n keyHash: keyHash,  \n },  \n ],  \n};  \nconst forgingScript = ForgeScript.fromNativeScript(nativeScript);`\n`nativeScript`\n`ForgeScript.fromNativeScript`\n\n### Define Asset Metadata[​](#define-asset-metadata \"Direct link to Define Asset Metadata\")\n\nSet up asset metadata:\n\n`const policyId = resolveScriptHash(forgingScript);  \nconst tokenName = \"MeshToken\";  \nconst tokenNameHex = stringToHex(tokenName);  \nconst metadata = { [policyId]: { [tokenName]: { ...demoAssetMetadata } } };`\n`policyId`\n`tokenName`\n`metadata`\n\n### Create Transaction[​](#create-transaction \"Direct link to Create Transaction\")\n\nBuild the minting transaction:\n\n`const txBuilder = new MeshTxBuilder({  \n fetcher: provider,  \n verbose: true,  \n});  \n  \nconst unsignedTx = await txBuilder  \n .mint(\"1\", policyId, tokenNameHex)  \n .mintingScript(forgingScript)  \n .metadataValue(721, metadata)  \n .changeAddress(changeAddress)  \n .invalidHereafter(99999999)  \n .selectUtxosFrom(inputs)  \n .complete();`\n`mint`\n`mintingScript`\n`metadataValue`\n`changeAddress`\n`invalidHereafter`\n`selectUtxosFrom`\n`complete`\n\n### Sign the Transaction[​](#sign-the-transaction \"Direct link to Sign the Transaction\")\n\nSign the transaction with the minting wallet:\n\n`const signedTx = await wallet.signTx(unsignedTx);`\n\n### Source code[​](#source-code \"Direct link to Source code\")\n\nHere is the complete code for building the minting transaction:\n\n`async function buildMintTx(inputs: UTxO[], changeAddress: string) {  \n // minting wallet  \n const wallet = new MeshWallet({  \n networkId: 0,  \n key: {  \n type: \"mnemonic\",  \n words: mintingWallet,  \n },  \n });  \n  \n const { pubKeyHash: keyHash } = deserializeAddress(  \n await wallet.getChangeAddress()  \n );  \n  \n // create minting script  \n const nativeScript: NativeScript = {  \n type: \"all\",  \n scripts: [  \n {  \n type: \"before\",  \n slot: \"99999999\",  \n },  \n {  \n type: \"sig\",  \n keyHash: keyHash,  \n },  \n ],  \n };  \n const forgingScript = ForgeScript.fromNativeScript(nativeScript);  \n  \n // create metadata  \n const policyId = resolveScriptHash(forgingScript);  \n const tokenName = \"MeshToken\";  \n const tokenNameHex = stringToHex(tokenName);  \n const metadata = { [policyId]: { [tokenName]: { ...demoAssetMetadata } } };  \n  \n // create transaction  \n const txBuilder = new MeshTxBuilder({  \n fetcher: provider,  \n verbose: true,  \n });  \n  \n const unsignedTx = await txBuilder  \n .mint(\"1\", policyId, tokenNameHex)  \n .mintingScript(forgingScript)  \n .metadataValue(721, metadata)  \n .changeAddress(changeAddress)  \n .invalidHereafter(99999999)  \n .selectUtxosFrom(inputs)  \n .complete();  \n  \n const signedTx = await wallet.signTx(unsignedTx);  \n return signedTx;  \n}`\n\n## Execute the transaction[​](#execute-the-transaction \"Direct link to Execute the transaction\")\n\nNow that we have the minting transaction, we can execute it.\n\n`async function mint() {  \n if (connected) {  \n const inputs = await wallet.getUtxos();  \n const changeAddress = await wallet.getChangeAddress();  \n  \n const tx = await buildMintTx(inputs, changeAddress);  \n const signedTx = await wallet.signTx(tx);  \n  \n const txHash = await wallet.submitTx(signedTx);  \n console.log(\"Transaction hash:\", txHash);  \n }  \n}`\n\n## Source code[​](#source-code-1 \"Direct link to Source code\")\n\nThe source code for this lesson is available on [GitHub](https://github.com/cardanobuilders/cardanobuilders.github.io/tree/main/codes/course-hello-cardano/02-multisig).\n\n## Challenge[​](#challenge \"Direct link to Challenge\")\n\nCreate a multi-signature wallet requiring 2 out of 3 signers to approve a transaction. Build and sign a transaction with two signers, submit it, and verify success.",
  "images": [],
  "extraction_metadata": {
    "batch_number": 11,
    "extraction_timestamp": "2025-09-19T14:05:12.534540",
    "extraction_time": 3.978458881378174,
    "source": "tavily_api_raw"
  }
}