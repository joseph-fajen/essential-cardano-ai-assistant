{
  "url": "https://developers.cardano.org/docs/integrate-cardano/creating-wallet-faucet",
  "content": "![Cardano Logo](/img/cardano-black.svg)\n![Cardano Logo](/img/cardano-white.svg)\n\n# Exploring Cardano wallets\n\n### Overview[​](#overview \"Direct link to Overview\")\n\nIn this guide, we will show you how to create a **Cardano** wallet, receive some `tAda` (**test ada**) on a [testnet network](/docs/get-started/testnets-and-devnets) and send basic example transactions. We will explore tools like `cardano-cli` and `cardano-wallet` on how they can help with these functionalities.\n\n`tAda`\n`cardano-cli`\n`cardano-wallet`\n\nThis guide assumes you have installed `cardano-node` and `cardano-cli` into your system. If not you can refer to [Installing cardano-node](/docs/operate-a-stake-pool/node-operations/installing-cardano-node) guide for instructions on how to do that.\n\n`cardano-node`\n`cardano-cli`\n\nYou must also connect your `cardano-node` to a testnet network and make sure it is fully synchronized.\n\n`cardano-node`\n\nIf you are not sure how to do that, It is recommended to read [Running cardano-node](/docs/operate-a-stake-pool/node-operations/running-cardano) guide before proceeding.\n\n### Cardano Wallets[​](#cardano-wallets \"Direct link to Cardano Wallets\")\n\nSo you installed your `cardano-node` and got it running, you probably even tried to query some simple blockchain data (If you read [Running cardano-node](/docs/operate-a-stake-pool/node-operations/running-cardano) guide). But how do you actually create a **Cardano** wallet, receive and send some `ada` or `tAda` tokens?\n\n`cardano-node`\n`ada`\n`tAda`\n\nFirst we have to look at the applications we can use to create wallets.\n\n[Daedalus](https://daedaluswallet.io/) : **Daedalus Wallet** is an example of a **Cardano** full-node wallet, which is a [GUI (Graphical User Interface)](https://en.wikipedia.org/wiki/Graphical_user_interface) application for the Desktop (**Linux**, **MacOS**, **Windows**). That means that users will get to use a nice UI (User Interface), buttons and layout to interact with the **Cardano** blockchain.\n\nA full-node wallet basically means that it has to synchronize and download the blockchain first before users are able to send transactions and interact with the wallet.\n\nIt is open-source mainly being developed by [InputOutputGlobal](https://iohk.io/), the development company behind the **Cardano** protocol and also one of the three foundational entities of the **Cardano** project.\n\n[Yoroi](https://yoroi-wallet.com/#/) : **Yoroi Wallet** is an example of a **Cardano** light-wallet, It is available as a **mobile application** and as a **browser extension**.\n\nA light-wallet means that users will not be forced to download the entire blockchain, Instead **Yoroi** has a backend server and downloads the blockchain data for the user without the user exposing sensitive data(**Private Keys**) to the server and ultimately maintaining security. This achieves a faster experience for the user due to the fact the user will not have to wait for hours before being able to use the wallet.\n\nIt is open-source mainly being developed by [Emurgo](https://emurgo.io), A company based in [Japan](https://en.wikipedia.org/wiki/Japan) which focuses on Business and Enterprise adoption of the **Cardano** blockchain. It is also one of the three foundational entities of the **Cardano** project.\n\n[cardano-wallet](https://github.com/cardano-foundation/cardano-wallet) : `cardano-wallet` is a [CLI (Command Line Interface)](https://en.wikipedia.org/wiki/Command-line_interface) application that provides **Cardano** wallet functionalities both via command-line parameters or via a [Web API](https://en.wikipedia.org/wiki/Web_API).\n\n`cardano-wallet`\n\nIt is the wallet-backend that **Daedalus** wallet uses under-the-hood so it is also open-source, one of the many Haskell-based **Cardano** software components being written by [InputOutputGlobal](https://iohk.io/).\n\nYou can find `cardano-wallet` **REST API** documentation here: <https://cardano-foundation.github.io/cardano-wallet/api/edge/>\n\n`cardano-wallet`\n\n[cardano-cli](https://github.com/IntersectMBO/cardano-node) : `cardano-cli` is also a [CLI (Command Line Interface)](https://en.wikipedia.org/wiki/Command-line_interface) application that provides **Cardano** wallet functionalities. But `cardano-cli` purpose is geared more towards general **Cardano** functionalities like generating **keys**, building and submitting **transactions**, managing **stake pools** certificates, simple blockchain queries like wallet address **UTXO** and more.\n\n`cardano-cli`\n`cardano-cli`\n\nIt is part of the `cardano-node` project repository, so if you [compile and install](/docs/operate-a-stake-pool/node-operations/installing-cardano-node) `cardano-node` you should also have `cardano-cli` as-well. It is one of the many Haskell-based **Cardano** software components being written by [InputOutputGlobal](https://iohk.io/).\n\n`cardano-node`\n`cardano-node`\n`cardano-cli`\n\nAlways download the wallets from trusted sources. There are many fake wallets, malicious software pretending to be **Cardano** wallets that could potentially steal your tokens / assets.\n\n### Creating a wallet[​](#creating-a-wallet \"Direct link to Creating a wallet\")\n\nAs mentioned before, in this guide we will only be focusing on the `cardano-cli` and `cardano-wallet` since they provide some level of programmability which is important when we are talking about **Cardano** integrations for different kinds of use cases.\n\n`cardano-cli`\n`cardano-wallet`\n\n#### Creating a wallet with `cardano-cli`[​](#creating-a-wallet-with-cardano-cli \"Direct link to creating-a-wallet-with-cardano-cli\")\n\n`cardano-cli`\n\nIn this section, We will use the path `$HOME/cardano` to store all the `cardano-cli` related files as an example, please replace it with the directory you have chosen to store the files.\n\n`$HOME/cardano`\n`cardano-cli`\n\nPlease make sure your `cardano-node` is connected and synchronized to a testnet network before proceeding.\n\n`cardano-node`\n\nIn a production environment, it might not be a good idea to store wallets / keys in a public server unless you know what you are doing.\n\nFirst, lets create a directory to store all our `keys` like so:\n\n`keys`\n`mkdir -p $HOME/cardano/keys`\n\nMake sure we are inside the `keys` directory like so: `cd $HOME/cardano/keys`\n\n`keys`\n`cd $HOME/cardano/keys`\n\nNext, we generate our **payment key-pair** using `cardano-cli`:\n\n`cardano-cli`\n`cardano-cli address key-gen \\  \n--verification-key-file $HOME/cardano/keys/payment1.vkey \\  \n--signing-key-file $HOME/cardano/keys/payment1.skey`\n\n`cardano-cli address key-gen` : generates a **payment key-pair**.\n\n`cardano-cli address key-gen`\n\n`--verification-key-file` : points to the path where you want to save the `vkey` file.\n\n`--verification-key-file`\n`vkey`\n\n`--signing-key-file` : points to the path where you want to save the `skey` file.\n\n`--signing-key-file`\n`skey`\n\nYou should now have two files in your `keys` directory like so:\n\n`keys`\n`$HOME/cardano/keys/  \n├── payment1.skey  \n└── payment1.vkey  \n  \n0 directories, 2 files`\n\nLets try to understand what these keys are used for in a very high-level overview that is relevant to our topic:\n\n`.vkey` / **Public Verification Key** : Is used to derive a **Cardano** wallet address, a wallet address is basically the hash string value that you share to other users to provide them a way to send `ada` / `tAda` or other assets in the **Cardano** blockchain into your wallet.\n\n`.vkey`\n`ada`\n`tAda`\n\n**The verification key file should look something like this**:\n\n`{  \n \"type\": \"PaymentVerificationKeyShelley_ed25519\",  \n \"description\": \"Payment Verification Key\",  \n \"cborHex\": \"582056a29cba161c2a534adae32c4359fda6f90a3f6ae6990491237b28c1caeef0c4\"  \n}`\n\n`.skey` / **Private Signing Key** : Is used to sign / approve transactions for your wallet. As you can imagine, it is very important to not expose this file to the public and must be kept secure.\n\n`.skey`\n\n**The signing key file should look something like this**:\n\n`{  \n \"type\": \"PaymentSigningKeyShelley_ed25519\",  \n \"description\": \"Payment Signing Key\",  \n \"cborHex\": \"58208c61d557e1b8ddd82107fa506fab1b1565ec76fe96e8fb19a922d5460acd5a5b\"  \n}`\n\nSince we now have our **payment key-pair**, the next step would be to generate a **wallet address** for a testnet network like so:\n\n`cardano-cli address build \\  \n--payment-verification-key-file $HOME/cardano/keys/payment1.vkey \\  \n--out-file $HOME/cardano/keys/payment1.addr \\  \n--testnet-magic 1097911063`\n\n`cardano-cli address build` : Generates a **wallet address** from a `vkey` file.\n\n`cardano-cli address build`\n`vkey`\n\n`--payment-verification-key-file` : The path to the `vkey` file to be used for the derivation.\n\n`--payment-verification-key-file`\n`vkey`\n\n`--out-file` : The path to save the wallet address file.\n\n`--out-file`\n\n`--testnet-magic` : The **NetworkMagic** of the network that where you want to use the wallet address.\n\n`--testnet-magic`\n\nYou should now have `payment1.vkey`, `payment1.skey` and `payment1.addr` in your `keys` directory. It should look something like this:\n\n`payment1.vkey`\n`payment1.skey`\n`payment1.addr`\n`keys`\n`$HOME/cardano/keys/  \n├── payment1.addr  \n├── payment1.skey  \n└── payment1.vkey  \n  \n0 directories, 3 files`\n\nThe `payment1.addr` file contains the derived **wallet address** from your `vkey` file. It should look something like this:\n\n`payment1.addr`\n`vkey`\n`addr_test1vz95zjvtwm9u9mc83uzsfj55tzwf99fgeyt3gmwm9gdw2xgwrvsa5`\n\nYou can derive more than one **wallet address** from a **Public Verification Key** for more advanced use cases using `cardano-addresses` component. Which we discuss in more details here: ***@TODO: link to article***\n\n`cardano-addresses`\n`addr1`\n`addr_test1`\n\nIf you want to create a wallet address to be used on `mainnet`, please use the `--mainnet` flag instead of `--testnet-magic 1097911063`. You can learn more about the different **Cardano** blockchain networks [here](/docs/operate-a-stake-pool/node-operations/running-cardano#mainnet--production).\n\n`mainnet`\n`--mainnet`\n`--testnet-magic 1097911063`\n\n#### Querying the wallet **UTXO (Unspent Transaction Output)** with `cardano-cli`[​](#querying-the-wallet-utxo-unspent-transaction-output-with-cardano-cli \"Direct link to querying-the-wallet-utxo-unspent-transaction-output-with-cardano-cli\")\n\n`cardano-cli`\n\nNow that we have a **wallet address**, we can then query the **UTXO** of the address like so:\n\n`cardano-cli query utxo \\  \n--testnet-magic 1097911063 \\  \n--address $(cat $HOME/cardano/keys/payment1.addr)`\n\n`cardano-cli query utxo` : Queries the wallet address **UTXO**.\n\n`cardano-cli query utxo`\n\n`--testnet-magic 1097911063` : Specifies that we want to query a testnet **Cardano** network.\n\n`--testnet-magic 1097911063`\n\n`--address $(cat $HOME/cardano/keys/payment1.addr)` : The **wallet address** string value that we want to query, In this case we read the contents of `$HOME/cardano/keys/payment1.addr` using the `cat` command and we pass that value to the `--address` flag. That means you could also directly paste the **wallet address** value like so:\n\n`--address $(cat $HOME/cardano/keys/payment1.addr)`\n`$HOME/cardano/keys/payment1.addr`\n`cat`\n`--address`\n`--address addr_test1vz95zjvtwm9u9mc83uzsfj55tzwf99fgeyt3gmwm9gdw2xgwrvsa5`\n\nYou should see something like this:\n\n `TxHash TxIx Amount  \n--------------------------------------------------------------------------------------`\n\nNow you might find it odd that there is not much information in the result that was returned the command, but that is totally normal as there are no available **UTXO** in the specific **wallet address** that we have queried just yet as it is a new wallet.\n\nOur next step is to request some `tAda` from the [Cardano Testnet Faucet](/docs/integrate-cardano/testnet-faucet).\n\n`tAda`\n\nOnce you requested some `tAda` from the [Cardano Testnet Faucet](/docs/integrate-cardano/testnet-faucet) we can then run the query again and you should see something like this:\n\n`tAda`\n `TxHash TxIx Amount  \n--------------------------------------------------------------------------------------  \ncf3cf4850c8862f2d698b2ece926578b3815795c9e38d2f907280f02f577cf85 0 1000000000 lovelace`\n\nThis result tells us that there is one **UTXO** with the amount of 1,000,000,000 `lovelaces` in our specific **wallet address**, that means our wallet has a balance of `1,000 tAda`.\n\n`lovelaces`\n`1,000 tAda`\n\nThe result also specifies that the **UTXO** **transaction id** (`TxHash` / `TxId`) is `cf3cf4850c8862f2d698b2ece926578b3815795c9e38d2f907280f02f577cf85` with the **transaction index** of `0`.\n\n`TxHash`\n`TxId`\n`cf3cf4850c8862f2d698b2ece926578b3815795c9e38d2f907280f02f577cf85`\n`0`\n\nIn the **Cardano** blockchain, the `lovelace` is the unit used to represent `ada` in **transactions** and **UTXO**.\n\n`lovelace`\n`ada`\n\nWhere `1 ada` is equal to `1,000,000 lovelace`, so moving forward we will be using `lovelace` instead of `ada` / `tAda`.\n\n`1 ada`\n`1,000,000 lovelace`\n`lovelace`\n`ada`\n`tAda`\n\nYou can also use the `TxHash` to view the complete transaction via the **Cardano Blockchain Explorer** for the relevant network. You can check the specific transaction for the example **UTXO** here:\n\n`TxHash`\n\nTo learn more about **UTXO (unspent transaction output)** and how transactions work for the **UTXO Model**, we recommend watching this lecture by [Dr. Lars Brünjes](https://iohk.io/en/team/lars-brunjes), Education Director at [InputOutputGlobal](https://iohk.io).\n\n#### Creating simple transactions[​](#creating-simple-transactions \"Direct link to Creating simple transactions\")\n\nTo have a clearer understanding of how sending transactions work using `cardano-cli`, first lets create another wallet like so:\n\n`cardano-cli`\n\n**Generate payment key-pair**\n\n`cardano-cli address key-gen \\  \n--verification-key-file $HOME/cardano/keys/payment2.vkey \\  \n--signing-key-file $HOME/cardano/keys/payment2.skey`\n\n**Generate wallet address**\n\n`cardano-cli address build \\  \n--payment-verification-key-file $HOME/cardano/keys/payment2.vkey \\  \n--out-file $HOME/cardano/keys/payment2.addr \\  \n--testnet-magic 1097911063`\n\nOnce complete you should have the following directory structure:\n\n`$HOME/cardano/keys  \n├── payment1.addr  \n├── payment1.skey  \n├── payment1.vkey  \n├── payment2.addr  \n├── payment2.skey  \n└── payment2.vkey  \n  \n0 directories, 6 files`\n\nQuerying the **UTXO** for the second wallet `payment2.addr` should give you a familiar result:\n\n`payment2.addr`\n`cardano-cli query utxo \\  \n--testnet-magic 1097911063 \\  \n--address $(cat $HOME/cardano/keys/payment2.addr)`\n\n**UTXO Result**\n\n `TxHash TxIx Amount  \n--------------------------------------------------------------------------------------`\n\nAgain, this is to be expected as the `payment2.addr` wallet address and keys has just recently been generated. So we expect that no one has sent any `tAda` to this wallet yet.\n\n`payment2.addr`\n`tAda`\n\nIn this example, we now have two wallets. We can call them `payment1` and `payment2`. Now remember that we requested some `tAda` from the [Cardano Testnet Faucet](/docs/integrate-cardano/testnet-faucet) for `payment1` wallet, and thats how we have the following:\n\n`payment1`\n`payment2`\n`tAda`\n`payment1`\n\n`payment1` **wallet**: `1,000,000,000 lovelace`\n\n`payment1`\n`1,000,000,000 lovelace`\n`UTXO  \n TxHash TxIx Amount  \n--------------------------------------------------------------------------------------  \ncf3cf4850c8862f2d698b2ece926578b3815795c9e38d2f907280f02f577cf85 0 1000000000 lovelace`\n\n`payment2` **wallet**: `0 lovelace`\n\n`payment2`\n`0 lovelace`\n`UTXO  \n TxHash TxIx Amount  \n--------------------------------------------------------------------------------------`\n\nNow let's say we want to send `250,000,000 lovelace` to `payment2` **wallet**, how can we achieve that?\n\n`250,000,000 lovelace`\n`payment2`\n\nWe start by storing the current on-chain protocol parameters to a **JSON** file:\n\n**Query Protocol Parameters**\n\n`cardano-cli query protocol-parameters \\  \n --testnet-magic 1097911063 \\  \n --out-file $HOME/cardano/protocol.json`\n\nThis will produce a **JSON** file that looks something like this:\n\n`{  \n \"poolDeposit\": 500000000,  \n \"protocolVersion\": {  \n \"minor\": 0,  \n \"major\": 4  \n },  \n \"minUTxOValue\": 1000000,  \n \"decentralisationParam\": 0,  \n \"maxTxSize\": 16384,  \n \"minPoolCost\": 340000000,  \n \"minFeeA\": 44,  \n \"maxBlockBodySize\": 65536,  \n \"minFeeB\": 155381,  \n \"eMax\": 18,  \n \"extraEntropy\": {  \n \"tag\": \"NeutralNonce\"  \n },  \n \"maxBlockHeaderSize\": 1100,  \n \"keyDeposit\": 2000000,  \n \"nOpt\": 500,  \n \"rho\": 3.0e-3,  \n \"tau\": 0.2,  \n \"a0\": 0.3  \n}`\n\n**Create draft transaction**\n\nNext, we create a draft transaction like so:\n\n`cardano-cli conway transaction build-raw \\  \n--tx-in cf3cf4850c8862f2d698b2ece926578b3815795c9e38d2f907280f02f577cf85#0 \\  \n--tx-out $(cat $HOME/cardano/keys/payment2.addr)+0 \\  \n--tx-out $(cat $HOME/cardano/keys/payment1.addr)+0 \\  \n--fee 0 \\  \n--out-file $HOME/cardano/tx.draft`\n\n`cardano-cli conway transaction build-raw` : This tells `cardano-cli` to build a raw transaction.\n\n`cardano-cli conway transaction build-raw`\n`cardano-cli`\n\n`--tx-in` : This specifies the **UTXO** input that the transaction will use, you can add as many **UTXO** input as you want by adding multiple `--tx-in` in the `cardano-cli` arguments as long as they have a unique `TxHash` and `TxIdx` within all your inputs.\n\n`--tx-in`\n`--tx-in`\n`cardano-cli`\n`TxHash`\n`TxIdx`\n\n`--tx-out` : This specifies the target **wallet address**, **assets** and **quantity** to be sent to. You can add as many **UTXO** outputs as you want as long as the total **UTXO** input can satisfy the **assets** and **quantity** specified by the output.\n\n`--tx-out`\n\n`--fee` : This specifies the fee amount of the transaction in `lovelace`.\n\n`--fee`\n`lovelace`\n\n`--out-file` : This is the path to the transaction file that will be generated.\n\n`--out-file`\n\nIn this case, we are just building a draft transaction to calculate how much fee would the transaction need. We can do that by executing the following command:\n\n`cardano-cli conway transaction calculate-min-fee \\  \n--tx-body-file $HOME/cardano/tx.draft \\  \n--tx-in-count 1 \\  \n--tx-out-count 2 \\  \n--witness-count 1 \\  \n--testnet-magic 1097911063 \\  \n--protocol-params-file $HOME/cardano/protocol.json`\n\nYou should see something like this for the output:\n\n`174169 Lovelace`\n\nYou will notice that we use the `protocol.json` we queried awhile ago to calculate the transaction fee:\n\n`protocol.json`\n`--protocol-params-file $HOME/cardano/protocol.json`\n\nThat is because the transaction fee calculation results changes depending on the on-chain protocol parameters.\n\nThe `--witness-count 1` basically tells `cardano-cli` that there will be only `1` **signing key** required for this transaction to be valid. Since the **UTXO** input involved in this transaction will only be coming from `payment1` wallet, so that means we indeed only need `1` key to sign the transaction.\n\n`--witness-count 1`\n`cardano-cli`\n`1`\n`payment1`\n`1`\n\nWe can then finally build the real transaction like so:\n\n`cardano-cli conway transaction build-raw \\  \n--tx-in cf3cf4850c8862f2d698b2ece926578b3815795c9e38d2f907280f02f577cf85#0 \\  \n--tx-out $(cat $HOME/cardano/keys/payment2.addr)+250000000 \\  \n--tx-out $(cat $HOME/cardano/keys/payment1.addr)+749825831 \\  \n--fee 174169 \\  \n--out-file $HOME/cardano/tx.draft`\n\nTo recap, We want to send `250,000,000 lovelace` from `payment1` wallet to `payment2` wallet. Our `payment1` wallet had the following **UTXO**:\n\n`250,000,000 lovelace`\n`payment1`\n`payment2`\n`payment1`\n `TxHash TxIx Amount  \n--------------------------------------------------------------------------------------  \ncf3cf4850c8862f2d698b2ece926578b3815795c9e38d2f907280f02f577cf85 0 1000000000 lovelace`\n\nSo we will use the `TxHash` `cf3cf4850c8862f2d698b2ece926578b3815795c9e38d2f907280f02f577cf85` and `TxIx` `0` as our `--tx-input`.\n\n`TxHash`\n`cf3cf4850c8862f2d698b2ece926578b3815795c9e38d2f907280f02f577cf85`\n`TxIx`\n`0`\n`--tx-input`\n`--tx-in cf3cf4850c8862f2d698b2ece926578b3815795c9e38d2f907280f02f577cf85#0`\n\nWe then tell `cardano-cli` that the destination of the `250,000,000 lovelace` is the **wallet address** of `payment2`.\n\n`cardano-cli`\n`250,000,000 lovelace`\n`payment2`\n`--tx-out $(cat $HOME/cardano/keys/payment2.addr)+250000000`\n\nNow, we still have `750000000 lovelace` as the change amount, so we will simply send it back to ourselves like so:\n\n`750000000 lovelace`\n`--tx-out $(cat $HOME/cardano/keys/payment1.addr)+749825831`\n\nNow an important question you might ask here is that, why is the amount `749825831 lovelace`? Well remember that we calculated the fee to be `174169 lovelace` and someone has to shoulder the transaction fee, so we decide that `payment` should pay for the fee with the change `lovelace` amount. So we calculate that `750000000 - 174169 = 749825831` and so the total change would be `749825831 lovelace`.\n\n`749825831 lovelace`\n`174169 lovelace`\n`payment`\n`lovelace`\n`750000000 - 174169 = 749825831`\n`749825831 lovelace`\n\nWe then specify the transaction fee like so:\n\n`--fee 174169`\n\nAnd then we specify where we will save the transaction file:\n\n`--out-file $HOME/cardano/tx.draft`\n\nNow that we have the transaction file, we must sign the transaction in-order to prove that we are the owner of the input **UTXO** that was used.\n\n`cardano-cli conway transaction sign \\  \n--tx-body-file $HOME/cardano/tx.draft \\  \n--signing-key-file $HOME/cardano/keys/payment1.skey \\  \n--testnet-magic 1097911063 \\  \n--out-file $HOME/cardano/tx.signed`\n\n`--signing-key-file $HOME/cardano/keys/payment1.skey` : This argument tells the `cardano-cli` that we will use `payment1.skey` to sign the transaction.\n\n`--signing-key-file $HOME/cardano/keys/payment1.skey`\n`cardano-cli`\n`payment1.skey`\n\nFinally, we submit the transaction to the blockchain!\n\n`cardano-cli conway transaction submit \\  \n--tx-file $HOME/cardano/tx.signed \\  \n--testnet-magic 1097911063`\n\nIf you have waited too long to sign and submit the transaction, the fees might've changed during that time and therefore the transaction might get rejected by the network. To solve this, you simply have to **recalculate the fees, rebuild the transaction, sign it and submit it**!\n\nChecking the balances of both wallets `payment1` and `payment2`:\n\n`payment1`\n`payment2`\n`# payment1 wallet UTXO  \n❯ cardano-cli query utxo --testnet-magic 1097911063 --address $(cat $HOME/cardano/keys/payment1.addr)  \n  \n TxHash TxIx Amount  \n--------------------------------------------------------------------------------------  \n63eeeb7e43171aeea0b3d53c5a36236cf9af92d5ee39e99bfadfe0237c46bd91 1 749825303 lovelace  \n  \n# payment2 wallet UTXO  \n❯ cardano-cli query utxo --testnet-magic 1097911063 --address $(cat $HOME/cardano/keys/payment2.addr)  \n TxHash TxIx Amount  \n--------------------------------------------------------------------------------------  \n63eeeb7e43171aeea0b3d53c5a36236cf9af92d5ee39e99bfadfe0237c46bd91 0 250000000 lovelace`\n\nAs we can see, `payment2` now has a **UTXO** with the amount of `250,000,000 lovelace` with the change amount returned to `payment1` and has generated a new **UTXO** with the amount of `749,825,303 lovelace` as-well.\n\n`payment2`\n`250,000,000 lovelace`\n`payment1`\n`749,825,303 lovelace`\n\nCongratulations, You have created and sent your first **Cardano** transaction using `cardano-cli`! 🎉🎉🎉\n\n`cardano-cli`\n\n#### Creating a wallet with `cardano-wallet`[​](#creating-a-wallet-with-cardano-wallet \"Direct link to creating-a-wallet-with-cardano-wallet\")\n\n`cardano-wallet`\n\nThis guide assumes you have installed `cardano-wallet` into your system. If not you can refer to [Installing cardano-wallet](/docs/get-started/cardano-wallet/cardano-wallet) guide for instructions on how to do that.\n\n`cardano-wallet`\n\nWe will use the path `$HOME/cardano/wallets` to store all the `cardano-wallet` related files as an example, please replace it with the directory you have chosen to store the files.\n\n`$HOME/cardano/wallets`\n`cardano-wallet`\n\nPlease make sure your `cardano-node` is connected and synchronized to a testnet network before proceeding.\n\n`cardano-node`\n\nIn a production environment, it might not be a good idea to store wallets / keys in a public server unless you know what you are doing.\n\nFirst, lets create a directory to store all our `wallets` like so:\n\n`wallets`\n`mkdir -p $HOME/cardano/wallets`\n\n**Starting cardano-wallet as a REST API server**\n\nWe will be focusing on the [REST API](https://en.wikipedia.org/wiki/Representational_state_transfer) that `cardano-wallet` provides. In-order to interact with the API, we must first start the server.\n\n`cardano-wallet`\n`cardano-wallet serve \\  \n--port 1337 \\  \n--testnet $HOME/cardano/testnet-byron-genesis.json \\  \n--database $HOME/cardano/wallets/db \\  \n--node-socket $CARDANO_NODE_SOCKET_PATH`\n\n`cardano-wallet serve` : Runs `cardano-wallet` as a web server that provides a [REST API](https://en.wikipedia.org/wiki/Representational_state_transfer).\n\n`cardano-wallet serve`\n`cardano-wallet`\n\n`--port` : Specifies the port that the web server will listen to for any requests.\n\n`--port`\n\nYou can choose whatever `port` number you like, but it is recommended to use `port` numbers `1024` and above. See [Registered Port](https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml) for more information.\n\n`port`\n`port`\n`1024`\n\n`--testnet` : Specifies the **Byron** genesis file path for the testnet network.\n\n`--testnet`\n\nThis should match the genesis file that the `cardano-node` you are connected is using as-well. If you meant to connect to `mainnet` then use the `--mainnet` flag and the `mainnet` **Byron** genesis file instead.\n\n`cardano-node`\n`mainnet`\n`--mainnet`\n`mainnet`\n\n`--database` : Specifies the path where the wallet database will be saved.\n\n`--database`\n\nIt is important to note that the wallet creation function requires a passphrase so all the wallet data will be encrypted by the passphrase.\n\n`--node-socket` : Specifies the `cardano-node` socket path that will be used by the `cardano-wallet` to communicate with the node.\n\n`--node-socket`\n`cardano-node`\n`cardano-wallet`\n\nThe `cardano-node` uses **IPC (Inter-Process-Communication)** for communicating with the other **Cardano** components like `cardano-cli`, `cardano-wallet` and `cardano-db-sync`. In **Linux** and **MacOS** it uses something called [unix sockets](https://en.wikipedia.org/wiki/Unix_domain_socket) and [Named Pipes](https://docs.microsoft.com/en-us/windows/win32/ipc/named-pipes) in **Windows**.\n\n`cardano-node`\n`cardano-cli`\n`cardano-wallet`\n`cardano-db-sync`\n\nHere is an example `--socket-path` argument for **Linux**:\n\n`--socket-path`\n`--socket-path $HOME/cardano/db/node.socket`\n\nAs you can see the argument points to a file since **unix sockets** are represented as files (like everything else in **Linux**). In this case we put the socket file in the `db` directory that we have just created before.\n\n`db`\n\nIn **Windows**, the `--socket-path` argument would look something like this:\n\n`--socket-path`\n`--socket-path \"\\\\\\\\.\\\\pipe\\\\cardano-node-testnet\"`\n\nAs you notice its almost like a network `URI` or a network `Path` than a file, this is a key difference that you will have to be aware depending on your operating system. You can replace the string `cardano-node-testnet` in the argument to whatever you like, this example path in particular is used in the [Daedalus Testnet Wallet](https://daedaluswallet.io) for **Windows**.\n\n`URI`\n`Path`\n`cardano-node-testnet`\n\nOnce the server is running you should see something like this (among other things):\n\n`[cardano-wallet.network:Info:12] [2021-06-03 13:48:24.82 UTC] Protocol parameters for tip are:  \n Decentralization level: 100.00%  \n Transaction parameters: [Fee policy: 155381.0 + 44.0x, Tx max size: 16384]  \n Desired number of pools: 500  \n Minimum UTxO value: 1.000000  \n Eras:  \n - byron from -0  \n - shelley from 74  \n - allegra from 102  \n - mary from 112  \n  \nSlotting parameters for tip are:  \n Slot length: 1s  \n Epoch length: 432000  \n Active slot coeff: 5.0e-2  \n Security parameter: 2160 block  \n  \n  \n[cardano-wallet.main:Info:4] [2021-06-03 13:48:24.86 UTC] Wallet backend server listening on http://127.0.0.1:1337/`\n\n**Checking Wallet Server Information**\n\nThe first thing we can do to test if the wallet server is working correctly is to query the network information via the API.\n\n`curl --url http://localhost:1337/v2/network/information | jq`\n\nThe result should be something like this:\n\n`{  \n \"node_era\": \"mary\",  \n \"network_tip\": {  \n \"slot_number\": 408744,  \n \"absolute_slot_number\": 28359144,  \n \"time\": \"2021-06-03T13:52:40Z\",  \n \"epoch_number\": 135  \n },  \n \"next_epoch\": {  \n \"epoch_start_time\": \"2021-06-03T20:20:16Z\",  \n \"epoch_number\": 136  \n },  \n \"sync_progress\": {  \n \"status\": \"ready\"  \n },  \n \"node_tip\": {  \n \"height\": {  \n \"unit\": \"block\",  \n \"quantity\": 2639489  \n },  \n \"slot_number\": 408722,  \n \"absolute_slot_number\": 28359122,  \n \"time\": \"2021-06-03T13:52:18Z\",  \n \"epoch_number\": 135  \n }  \n}`\n\nIt is important to make sure that the `sync_progress.status` is equal to `ready` before proceeding.\n\n`sync_progress.status`\n`ready`\n\n**Creating the wallet**\n\nTo create a wallet we must first generate a wallet **recovery phrase** using the `cardano-wallet` in the CLI.\n\n`cardano-wallet`\n`cardano-wallet recovery-phrase generate | jq -c --raw-input 'split(\" \")'`\n\nYou should get a **24-word mnemonic seed** in return similar to this:\n\n`[\"shift\", \"badge\", \"heavy\", \"action\", \"tube\", \"divide\", \"course\", \"quality\", \"capable\", \"velvet\", \"cart\", \"marriage\", \"vague\", \"aware\", \"maximum\", \"exist\", \"crime\", \"file\", \"analyst\", \"great\", \"cabbage\", \"course\", \"sad\", \"apology\"]`\n\nWe can now create a **Cardano** wallet using the `/v2/wallets` API endpoint:\n\n`/v2/wallets`\n`curl --request POST \\  \n --url http://localhost:1337/v2/wallets \\  \n --header 'Content-Type: application/json' \\  \n --data '{  \n \"name\": \"test_cf_1\",  \n \"mnemonic_sentence\": [\"shift\", \"badge\", \"heavy\", \"action\", \"tube\", \"divide\", \"course\", \"quality\", \"capable\", \"velvet\", \"cart\", \"marriage\", \"vague\", \"aware\", \"maximum\", \"exist\", \"crime\", \"file\", \"analyst\", \"great\", \"cabbage\", \"course\", \"sad\", \"apology\"],  \n \"passphrase\": \"test123456\"  \n}' | jq`\n\nOur requests payload data is composed of:\n\n`name` : The name of the wallet.\n\n`name`\n\n`passphrase` : Sets the security phrase to protect the funds inside the wallet. It will be required every time you need write access to the wallet, more specifically sending assets.\n\n`passphrase`\n\n`mnemonic_sentence` : This is the wallet **recovery phrase** formatted into a `JSON` array.\n\n`mnemonic_sentence`\n`JSON`\n\nIf successful, you should see something like this:\n\n`{  \n \"address_pool_gap\": 20,  \n \"passphrase\": {  \n \"last_updated_at\": \"2021-06-03T14:25:18.2676524Z\"  \n },  \n \"balance\": {  \n \"available\": {  \n \"unit\": \"lovelace\",  \n \"quantity\": 0  \n },  \n \"total\": {  \n \"unit\": \"lovelace\",  \n \"quantity\": 0  \n },  \n \"reward\": {  \n \"unit\": \"lovelace\",  \n \"quantity\": 0  \n }  \n },  \n \"id\": \"5076b34c6949dbd150eb9c39039037543946bdce\",  \n \"state\": {  \n \"status\": \"syncing\",  \n \"progress\": {  \n \"unit\": \"percent\",  \n \"quantity\": 0  \n }  \n },  \n \"name\": \"test_cf_1\",  \n \"assets\": {  \n \"available\": [],  \n \"total\": []  \n },  \n \"tip\": {  \n \"height\": {  \n \"unit\": \"block\",  \n \"quantity\": 0  \n },  \n \"slot_number\": 0,  \n \"absolute_slot_number\": 0,  \n \"time\": \"2019-07-24T20:20:16Z\",  \n \"epoch_number\": 0  \n },  \n \"delegation\": {  \n \"next\": [],  \n \"active\": {  \n \"status\": \"not_delegating\"  \n }  \n }  \n}`\n\nInitially, the newly created/restored wallet will need to be synced before it can be used. You can verify if the wallet is already synced by executing the following request:\n\n`curl --url http://localhost:1337/v2/wallets/5076b34c6949dbd150eb9c39039037543946bdce | jq '.state'`\n\n***It is important to note that the `5076b34c6949dbd150eb9c39039037543946bdce` string is actually the `wallet.id` of the previously generated wallet.***\n\n`5076b34c6949dbd150eb9c39039037543946bdce`\n`wallet.id`\n\nYou should see something like this:\n\n`{  \n \"status\": \"ready\"  \n}`\n\n**Receiving tAda (test ada)**\n\nNow that we have created a wallet, we can now request some tAda from the **Testnet Faucet**. But before we can do that we must first get a cardano address for our wallet.\n\nWe can do that by executing the command:\n\n`curl --url 'http://localhost:1337/v2/wallets/5076b34c6949dbd150eb9c39039037543946bdce/addresses?state=unused' | jq '.[0]'`\n\nThe result should be something like this:\n\n`{  \n \"derivation_path\": [  \n \"1852H\",  \n \"1815H\",  \n \"0H\",  \n \"0\",  \n \"0\"  \n ],  \n \"id\": \"addr_test1qzf9q3qjcaf6kxshwjfw9ge29njtm56r2a08g49l79xgt4je0592agqpwraqajx2dsu2sxj64uese5s4qum293wuc00q7j6vsp\",  \n \"state\": \"unused\"  \n}`\n\nIt is important to note that the parameter of this request is the **wallet id** of the target wallet you want to get the address. In this case it is `5076b34c6949dbd150eb9c39039037543946bdce` our previously generated wallet.\n\n`5076b34c6949dbd150eb9c39039037543946bdce`\n\nWe are basically querying the first wallet address that has not been used just yet, Indicated by `state: \"unused\"`. As we can see the wallet address value is: `addr_test1qzf9q3qjcaf6kxshwjfw9ge29njtm56r2a08g49l79xgt4je0592agqpwraqajx2dsu2sxj64uese5s4qum293wuc00q7j6vsp\"`\n\n`state: \"unused\"`\n`addr_test1qzf9q3qjcaf6kxshwjfw9ge29njtm56r2a08g49l79xgt4je0592agqpwraqajx2dsu2sxj64uese5s4qum293wuc00q7j6vsp\"`\n\nNow we can finally request some `tAda` for the wallet address from the [Cardano Testnet Faucet](/docs/integrate-cardano/testnet-faucet).\n\n`tAda`\n\nOnce you requested some `tAda` from the [Cardano Testnet Faucet](/docs/integrate-cardano/testnet-faucet), we can then check if it has arrived into our wallet like so:\n\n`tAda`\n`curl --url http://localhost:1337/v2/wallets/5076b34c6949dbd150eb9c39039037543946bdce | jq '.balance'`\n\nYou should see something like this:\n\n`{  \n \"available\": {  \n \"unit\": \"lovelace\",  \n \"quantity\": 1000000000  \n },  \n \"total\": {  \n \"unit\": \"lovelace\",  \n \"quantity\": 1000000000  \n },  \n \"reward\": {  \n \"unit\": \"lovelace\",  \n \"quantity\": 0  \n }  \n}`\n\nAs we can see here we have a total of `1,000,000,000 lovelace` available to spend that we received from the [Cardano Testnet Faucet](/docs/integrate-cardano/testnet-faucet).\n\n`1,000,000,000 lovelace`\n\n#### Creating simple transactions[​](#creating-simple-transactions-1 \"Direct link to Creating simple transactions\")\n\nTo have a clearer understanding of how sending transactions work using `cardano-wallet`, first lets create another wallet like so:\n\n`cardano-wallet`\n\n**Generate recovery-phrase**\n\n`cardano-wallet recovery-phrase generate | jq -c --raw-input 'split(\" \")'`\n\n**Recovery-phrase result**\n\n`[\"then\", \"tattoo\", \"copy\", \"glance\", \"silk\", \"kitchen\", \"kingdom\", \"pioneer\", \"off\", \"path\", \"connect\", \"artwork\", \"alley\", \"smooth\", \"also\", \"foil\", \"glare\", \"trouble\", \"erupt\", \"move\", \"position\", \"merge\", \"scale\", \"echo\"]`\n\n**Create Wallet Request**\n\n`curl --request POST \\  \n --url http://localhost:1337/v2/wallets \\  \n --header 'Content-Type: application/json' \\  \n --data '{  \n \"name\": \"test_cf_2\",  \n \"mnemonic_sentence\": [\"then\", \"tattoo\", \"copy\", \"glance\", \"silk\", \"kitchen\", \"kingdom\", \"pioneer\", \"off\", \"path\", \"connect\", \"artwork\", \"alley\", \"smooth\", \"also\", \"foil\", \"glare\", \"trouble\", \"erupt\", \"move\", \"position\", \"merge\", \"scale\", \"echo\"],  \n \"passphrase\": \"test123456\"  \n}' | jq`\n\n**Create Wallet Result**\n\n`{  \n \"address_pool_gap\": 20,  \n \"passphrase\": {  \n \"last_updated_at\": \"2021-06-04T11:39:06.8887923Z\"  \n },  \n \"balance\": {  \n \"available\": {  \n \"unit\": \"lovelace\",  \n \"quantity\": 0  \n },  \n \"total\": {  \n \"unit\": \"lovelace\",  \n \"quantity\": 0  \n },  \n \"reward\": {  \n \"unit\": \"lovelace\",  \n \"quantity\": 0  \n }  \n },  \n \"id\": \"4a64b453ad1c1d33bfec4d3ba90bd2456ede35bb\",  \n \"state\": {  \n \"status\": \"syncing\",  \n \"progress\": {  \n \"unit\": \"percent\",  \n \"quantity\": 0  \n }  \n },  \n \"name\": \"test_cf_2\",  \n \"assets\": {  \n \"available\": [],  \n \"total\": []  \n },  \n \"tip\": {  \n \"height\": {  \n \"unit\": \"block\",  \n \"quantity\": 0  \n },  \n \"slot_number\": 0,  \n \"absolute_slot_number\": 0,  \n \"time\": \"2019-07-24T20:20:16Z\",  \n \"epoch_number\": 0  \n },  \n \"delegation\": {  \n \"next\": [],  \n \"active\": {  \n \"status\": \"not_delegating\"  \n }  \n }  \n}`\n\nWe now have the following wallets:\n\n| WalletId | Wallet Name | Balance(Lovelace) |\n| --- | --- | --- |\n| 5076b34c6949dbd150eb9c39039037543946bdce | test\\_cf\\_1 | 1000000000 |\n| 4a64b453ad1c1d33bfec4d3ba90bd2456ede35bb | test\\_cf\\_2 | 0 |\n\nNow let's say that we want to send `250,000,000 lovelaces` to `test_cf_2` wallet. Well first we have to get `test_cf_2` wallet address like so:\n\n`250,000,000 lovelaces`\n`test_cf_2`\n`test_cf_2`\n`curl --url 'http://localhost:1337/v2/wallets/4a64b453ad1c1d33bfec4d3ba90bd2456ede35bb/addresses?state=unused' | jq '.[0]'`\n\nand we should see something like this:\n\n`{  \n \"derivation_path\": [  \n \"1852H\",  \n \"1815H\",  \n \"0H\",  \n \"0\",  \n \"0\"  \n ],  \n \"id\": \"addr_test1qzyfnjk3zmgzmvnnvnpeguv6se2ptjj3w3uuh30llqe5xdtzdduxxvke8rekwukyn0qt9g5pahasrnrdmv7nr86x537qxdgza0\",  \n \"state\": \"unused\"  \n}`\n\nSo now that we have `test_cf_2` wallet address `addr_test1qzyfnjk3zmgzmvnnvnpeguv6se2ptjj3w3uuh30llqe5xdtzdduxxvke8rekwukyn0qt9g5pahasrnrdmv7nr86x537qxdgza0`. We can now use it to send some `tAda` to it from `test_cf_1` wallet like so:\n\n`test_cf_2`\n`addr_test1qzyfnjk3zmgzmvnnvnpeguv6se2ptjj3w3uuh30llqe5xdtzdduxxvke8rekwukyn0qt9g5pahasrnrdmv7nr86x537qxdgza0`\n`tAda`\n`test_cf_1`\n`curl --request POST \\  \n --url http://localhost:1337/v2/wallets/5076b34c6949dbd150eb9c39039037543946bdce/transactions \\  \n --header 'Content-Type: application/json' \\  \n --data '{  \n \"passphrase\": \"test123456\",  \n \"payments\": [  \n {  \n \"address\": \"addr_test1qzyfnjk3zmgzmvnnvnpeguv6se2ptjj3w3uuh30llqe5xdtzdduxxvke8rekwukyn0qt9g5pahasrnrdmv7nr86x537qxdgza0\",  \n \"amount\": {  \n \"quantity\": 250000000,  \n \"unit\": \"lovelace\"  \n }  \n }  \n ]  \n}'`\n\nRemember, we use the `test_cf_1` wallet id in the `http://localhost:1337/v2/wallets/<walletId>` endpoint, because we want the `test_cf_1` to send to `test_cf_2` wallet address.\n\n`test_cf_1`\n`http://localhost:1337/v2/wallets/<walletId>`\n`test_cf_1`\n`test_cf_2`\n\nNow we can check `test_cf_2` wallet balance like so:\n\n`test_cf_2`\n`curl --url http://localhost:1337/v2/wallets/4a64b453ad1c1d33bfec4d3ba90bd2456ede35bb | jq '.balance'`\n\nAnd we should see that indeed the `250,000,000 tAda` has been received (***you might need to wait for a few seconds***).\n\n`250,000,000 tAda`\n`{  \n \"available\": {  \n \"unit\": \"lovelace\",  \n \"quantity\": 250000000  \n },  \n \"total\": {  \n \"unit\": \"lovelace\",  \n \"quantity\": 250000000  \n },  \n \"reward\": {  \n \"unit\": \"lovelace\",  \n \"quantity\": 0  \n }  \n}`\n\nChecking `test_cf_1` wallet balance should show you something like this:\n\n`test_cf_1`\n`{  \n \"available\": {  \n \"unit\": \"lovelace\",  \n \"quantity\": 749831199  \n },  \n \"total\": {  \n \"unit\": \"lovelace\",  \n \"quantity\": 749831199  \n },  \n \"reward\": {  \n \"unit\": \"lovelace\",  \n \"quantity\": 0  \n }  \n}`\n\nOur wallets should now be the following:\n\n| WalletId | Wallet Name | Balance(Lovelace) |\n| --- | --- | --- |\n| 5076b34c6949dbd150eb9c39039037543946bdce | test\\_cf\\_1 | 749831199 |\n| 4a64b453ad1c1d33bfec4d3ba90bd2456ede35bb | test\\_cf\\_2 | 250000000 |\n\nIt is important to note that `cardano-wallet` has automatically determined the fee for the transaction to send `250,000,000 lovelace` from wallet `test_cf_1` to `test_cf_2` and `cardano_wallet` has deducted the fee from `test_cf_1` wallet automatically.\n\n`cardano-wallet`\n`250,000,000 lovelace`\n`test_cf_1`\n`test_cf_2`\n`cardano_wallet`\n`test_cf_1`\n\nFull documentation of the `cardano-wallet` [REST API](https://en.wikipedia.org/wiki/Representational_state_transfer) can be found here: <https://cardano-foundation.github.io/cardano-wallet/api/edge>\n\n`cardano-wallet`\n\nCongratulations, You have created and sent your first **Cardano** transaction using `cardano-wallet`! 🎉🎉🎉\n\n`cardano-wallet`",
  "images": [],
  "extraction_metadata": {
    "batch_number": 7,
    "extraction_timestamp": "2025-09-19T14:04:49.862174",
    "extraction_time": 2.4011168479919434,
    "source": "tavily_api_raw"
  }
}