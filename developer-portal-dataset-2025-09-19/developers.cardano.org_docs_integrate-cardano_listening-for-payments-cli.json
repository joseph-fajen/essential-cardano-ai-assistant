{
  "url": "https://developers.cardano.org/docs/integrate-cardano/listening-for-payments-cli",
  "content": "![Cardano Logo](/img/cardano-black.svg)\n![Cardano Logo](/img/cardano-white.svg)\n\n# Listening for ada payments using cardano-cli\n\n## Overview[​](#overview \"Direct link to Overview\")\n\nThis guide assumes that you have basic understanding of `cardano-cli`, how to use it and that you have installed it into your system. Otherwise we recommend reading [Installing cardano-node](/docs/operate-a-stake-pool/node-operations/installing-cardano-node), [Running cardano-node](/docs/operate-a-stake-pool/node-operations/running-cardano) and [Exploring Cardano Wallets](/docs/integrate-cardano/creating-wallet-faucet) guides first.\n\n`cardano-cli`\n\nThis guide also assumes that you have `cardano-node` running in the background and connected to a [testnet network](/docs/get-started/testnets-and-devnets).\n\n`cardano-node`\n\n## Use case[​](#use-case \"Direct link to Use case\")\n\nThere are many possible reasons why you would want to have the functionality of listening for `ada` payments, but a very obvious use case would be for something like an **online shop** or a **payment gateway** that uses `ada` tokens as the currency.\n\n`ada`\n`ada`\n\n![img](/assets/images/ada-online-shop-0dee5526d39fa5fc40c8e722f1fd0f6b.png)\n\n![img](/assets/images/ada-online-shop-0dee5526d39fa5fc40c8e722f1fd0f6b.png)\n\n## Technical flow[​](#technical-flow \"Direct link to Technical flow\")\n\nTo understand how something like this could work in a technical point of view, let's take a look at the following diagram:\n\n![img](/assets/images/ada-payment-flow-f0a181dfded88ff3b8ad9b4c1e6a3cf4.png)\n\n![img](/assets/images/ada-payment-flow-f0a181dfded88ff3b8ad9b4c1e6a3cf4.png)\n\nSo let's imagine a very basic scenario where a **customer** is browsing an online shop. Once the user has chosen and added all the items into the **shopping cart**, the next step would then be to checkout and pay for the items. Of course we will be using **Cardano** for that!\n\nThe **front-end** application would then request for a **wallet address** from the backend service and render a QR code to the **customer** to be scanned via a **Cardano wallet**. The backend service would then know that it has to query the **wallet address** using `cardano-cli` with a certain time interval to confirm and alert the **front-end** application that the payment has completed successfully.\n\n`cardano-cli`\n\nIn the meantime the transaction is then being processed and settled within the **Cardano** network. We can see in the diagram above that both parties are ultimately connected to the network via the `cardano-node` software component.\n\n`cardano-node`\n\n## Time to code[​](#time-to-code \"Direct link to Time to code\")\n\nNow let's get our hands dirty and see how we can implement something like this in actual code.\n\nIn this section, we will use the path `$HOME/receive-ada-sample` to store all the related files as an example, please replace it with the directory you have chosen to store the files.\nAll the code examples in this article assume that you will save all the source-code-files under the root of this directory.\n\n`$HOME/receive-ada-sample`\n\n### Generate keys and request tAda[​](#generate-keys-and-request-tada \"Direct link to Generate keys and request tAda\")\n\nFirst, let's create a directory to store our sample project:\n\n`mkdir -p $HOME/receive-ada-sample/keys`\n\nNext, we generate our **payment key-pair** using `cardano-cli`:\n\n`cardano-cli`\n`cardano-cli address key-gen \\  \n--verification-key-file $HOME/receive-ada-sample/keys/payment.vkey \\  \n--signing-key-file $HOME/receive-ada-sample/keys/payment.skey`\n\nSince we now have our **payment key-pair**, the next step would be to generate a **wallet address** for a testnet network like so:\n\n`cardano-cli address build \\  \n--payment-verification-key-file $HOME/receive-ada-sample/keys/payment.vkey \\  \n--out-file $HOME/receive-ada-sample/keys/payment.addr \\  \n--testnet-magic 1097911063`\n\nYour directory structure should now look like this:\n\n`$HOME/receive-ada-sample/receive-ada-sample  \n└── keys  \n ├── payment.addr  \n ├── payment.skey  \n └── payment.vkey`\n\nNow using your **programming language** of choice we create our first few lines of code!\n\n### Initial variables[​](#initial-variables \"Direct link to Initial variables\")\n\nFirst we will set the initial variables that we will be using as explained below:\n\n`import * as fs from 'fs';  \n// Please add this dependency using npm install node-cmd  \nimport cmd from 'node-cmd';  \n  \n// Path to the cardano-cli binary or use the global one  \nconst CARDANO_CLI_PATH = \"cardano-cli\";  \n// The testnet identifier number  \nconst CARDANO_NETWORK_MAGIC = 1097911063;  \n// The directory where we store our payment keys  \n// assuming our current directory context is $HOME/receive-ada-sample  \nconst CARDANO_KEYS_DIR = \"keys\";  \n// The total payment we expect in lovelace unit  \nconst TOTAL_EXPECTED_LOVELACE = 1000000;`\n`import * as fs from 'fs';  \n// Please add this dependency using npm install node-cmd but there is no @type definition for it  \nconst cmd: any = require('node-cmd');  \n  \n// Path to the cardano-cli binary or use the global one  \nconst CARDANO_CLI_PATH: string = \"cardano-cli\";  \n// The testnet identifier number  \nconst CARDANO_NETWORK_MAGIC: number = 1097911063;  \n// The directory where we store our payment keys  \n// assuming our current directory context is $HOME/receive-ada-sample/receive-ada-sample  \nconst CARDANO_KEYS_DIR: string = \"keys\";  \n// The total payment we expect in lovelace unit  \nconst TOTAL_EXPECTED_LOVELACE: number = 1000000;`\n`import os  \nimport subprocess  \n  \n# Path to the cardano-cli binary or use the global one  \nCARDANO_CLI_PATH = \"cardano-cli\"  \n# The testnet identifier number  \nCARDANO_NETWORK_MAGIC = 1097911063  \n# The directory where we store our payment keys  \n# assuming our current directory context is $HOME/receive-ada-sample  \nCARDANO_KEYS_DIR = \"keys\"  \n# The total payment we expect in lovelace unit  \nTOTAL_EXPECTED_LOVELACE = 1000000`\n`using System.Linq;  \nusing SimpleExec; // `dotnet add package SimpleExec --version 7.0.0`  \n  \n// Path to the cardano-cli binary or use the global one  \nconst string CARDANO_CLI_PATH = \"cardano-cli\";  \n// The testnet identifier number  \nconst int CARDANO_NETWORK_MAGIC = 1097911063;  \n// The directory where we store our payment keys  \n// assuming our current directory context is $HOME/user/receive-ada-sample  \nconst string CARDANO_KEYS_DIR = \"keys\";  \n// The total payment we expect in lovelace unit  \nconst long TOTAL_EXPECTED_LOVELACE = 1000000;`\n\n### Read wallet address value[​](#read-wallet-address-value \"Direct link to Read wallet address value\")\n\nNext, we get the string value of the **wallet address** from the `payment.addr` file that we generated awhile ago. Add the following lines to your code:\n\n`payment.addr`\n`// Read wallet address value from payment.addr file  \nconst walletAddress = fs.readFileSync(`${CARDANO_KEYS_DIR}/payment.addr`).toString();`\n`// Read wallet address string value from payment.addr file  \nconst walletAddress: string = fs.readFileSync(`${CARDANO_KEYS_DIR}/payment.addr`).toString();`\n`# Read wallet address value from payment.addr file  \nwith open(os.path.join(CARDANO_KEYS_DIR, \"payment.addr\"), 'r') as file:  \n walletAddress = file.read()`\n`// Read wallet address value from payment.addr file  \nvar walletAddress = await System.IO.File.ReadAllTextAsync($\"{CARDANO_KEYS_DIR}/payment1.addr\");`\n\n### Query UTxO[​](#query-utxo \"Direct link to Query UTxO\")\n\nThen we execute `cardano-cli` programmatically and telling it to query the **UTxO** for the **wallet address** that we have generated with our keys and save the `stdout` result to our `rawUtxoTable` variable.\n\n`cardano-cli`\n`stdout`\n`rawUtxoTable`\n`// We use the node-cmd npm library to execute shell commands and read the output data  \nconst rawUtxoTable = cmd.runSync([  \n CARDANO_CLI_PATH,  \n \"query\", \"utxo\",  \n \"--testnet-magic\", CARDANO_NETWORK_MAGIC,  \n \"--address\", walletAddress  \n].join(\" \"));`\n`// We use the node-cmd npm library to execute shell commands and read the output data  \nconst rawUtxoTable: any = cmd.runSync([  \n CARDANO_CLI_PATH,  \n \"query\", \"utxo\",  \n \"--testnet-magic\", CARDANO_NETWORK_MAGIC,  \n \"--address\", walletAddress  \n].join(\" \"));`\n`# We tell python to execute cardano-cli shell command to query the UTXO and read the output data  \nrawUtxoTable = subprocess.check_output([  \n CARDANO_CLI_PATH,  \n 'query', 'utxo',  \n '--testnet-magic', str(CARDANO_NETWORK_MAGIC),  \n '--address', walletAddress])`\n`// We use the SimpleExec dotnet library to execute shell commands and read the output data  \nvar rawUtxoTable = await Command.ReadAsync(CARDANO_CLI_PATH, string.Join(\" \",  \n \"query\", \"utxo\",  \n \"--testnet-magic\", CARDANO_NETWORK_MAGIC,  \n \"--address\", walletAddress  \n), noEcho: true);`\n\n### Process UTxO table[​](#process-utxo-table \"Direct link to Process UTxO table\")\n\nOnce we have access to the **UTXO** table string, we will then parse it and compute the total lovelace that the wallet currently has.\n\n`// Calculate total lovelace of the UTXO(s) inside the wallet address  \nconst utxoTableRows = rawUtxoTable.data.trim().split('\\n');  \nlet totalLovelaceRecv = 0;  \nlet isPaymentComplete = false;  \n  \nfor (let x = 2; x < utxoTableRows.length; x++) {  \n const cells = utxoTableRows[x].split(\" \").filter(i => i);  \n totalLovelaceRecv += parseInt(cells[2]);  \n}`\n`// Calculate total lovelace of the UTXO(s) inside the wallet address  \nconst utxoTableRows: string[] = rawUtxoTable.data.trim().split('\\n');  \nlet totalLovelaceRecv: number = 0;  \nlet isPaymentComplete: boolean = false;  \n  \nfor (let x = 2; x < utxoTableRows.length; x++) {  \n const cells = utxoTableRows[x].split(\" \").filter((i: string) => i);  \n totalLovelaceRecv += parseInt(cells[2]);  \n}`\n`# Calculate total lovelace of the UTXO(s) inside the wallet address  \nutxoTableRows = rawUtxoTable.strip().splitlines()  \ntotalLovelaceRecv = 0  \nisPaymentComplete = False  \n  \nfor x in range(2, len(utxoTableRows)):  \n cells = utxoTableRows[x].split()  \n totalLovelaceRecv += int(cells[2])`\n`// Calculate total lovelace of the UTXO(s) inside the wallet address  \nvar utxoTableRows = rawUtxoTable.Trim().Split(\"\\n\");  \nvar totalLovelaceRecv = 0L;  \nvar isPaymentComplete = false;  \n  \nforeach(var row in utxoTableRows.Skip(2)){  \n var cells = row.Split(\" \").Where(c => c.Trim() != string.Empty);  \n totalLovelaceRecv += long.Parse(cells.ElementAt(2));  \n}`\n\n### Determine if payment is successful[​](#determine-if-payment-is-successful \"Direct link to Determine if payment is successful\")\n\nOnce we have the total lovelace amount, we will then determine using our code if a specific payment is a success, ultimately sending or shipping the item if it is indeed successful. In our example, we expect that the payment is equal to `1,000,000 lovelace` that we defined in our `TOTAL_EXPECTED_LOVELACE` constant variable.\n\n`1,000,000 lovelace`\n`TOTAL_EXPECTED_LOVELACE`\n`// Determine if the total lovelace received is more than or equal to  \n// the total expected lovelace and displaying the results.  \nisPaymentComplete = totalLovelaceRecv >= TOTAL_EXPECTED_LOVELACE;  \n  \nconsole.log(`Total Received: ${totalLovelaceRecv} LOVELACE`);  \nconsole.log(`Expected Payment: ${TOTAL_EXPECTED_LOVELACE} LOVELACE`);  \nconsole.log(`Payment Complete: ${(isPaymentComplete ? \"✅\" : \"❌\")}`);`\n`// Determine if the total lovelace received is more than or equal to  \n// the total expected lovelace and displaying the results.  \nisPaymentComplete = totalLovelaceRecv >= TOTAL_EXPECTED_LOVELACE;  \n  \nconsole.log(`Total Received: ${totalLovelaceRecv} LOVELACE`);  \nconsole.log(`Expected Payment: ${TOTAL_EXPECTED_LOVELACE} LOVELACE`);  \nconsole.log(`Payment Complete: ${(isPaymentComplete ? \"✅\" : \"❌\")}`);`\n`# Determine if the total lovelace received is more than or equal to  \n# the total expected lovelace and displaying the results.  \nisPaymentComplete = totalLovelaceRecv >= TOTAL_EXPECTED_LOVELACE  \n  \nprint(\"Total Received: %s LOVELACE\" % totalLovelaceRecv)  \nprint(\"Expected Payment: %s LOVELACE\" % TOTAL_EXPECTED_LOVELACE)  \nprint(\"Payment Complete: %s\" % {True: \"✅\", False: \"❌\"} [isPaymentComplete])`\n`// Determine if the total lovelace received is more than or equal to  \n// the total expected lovelace and displaying the results.  \nisPaymentComplete = totalLovelaceRecv >= TOTAL_EXPECTED_LOVELACE;  \n  \nSystem.Console.WriteLine($\"Total Received: {totalLovelaceRecv} LOVELACE\");  \nSystem.Console.WriteLine($\"Expected Payment: {TOTAL_EXPECTED_LOVELACE} LOVELACE\");  \nSystem.Console.WriteLine($\"Payment Complete: {(isPaymentComplete ? \"✅\":\"❌\")}\");`\n\n## Running and testing[​](#running-and-testing \"Direct link to Running and testing\")\n\nOur final code should look something like this:\n\n`import * as fs from 'fs';  \n// Please add this dependency using npm install node-cmd  \nimport cmd from 'node-cmd';  \n  \n// Path to the cardano-cli binary or use the global one  \nconst CARDANO_CLI_PATH = \"cardano-cli\";  \n// The `testnet` identifier number  \nconst CARDANO_NETWORK_MAGIC = 1097911063;  \n// The directory where we store our payment keys  \n// assuming our current directory context is $HOME/receive-ada-sample/receive-ada-sample  \nconst CARDANO_KEYS_DIR = \"keys\";  \n// The imaginary total payment we expect in lovelace unit  \nconst TOTAL_EXPECTED_LOVELACE = 1000000;  \n  \n// Read wallet address string value from payment.addr file  \nconst walletAddress = fs.readFileSync(`${CARDANO_KEYS_DIR}/payment.addr`).toString();  \n  \n// We use the node-cmd npm library to execute shell commands and read the output data  \nconst rawUtxoTable = cmd.runSync([  \n CARDANO_CLI_PATH,  \n \"query\", \"utxo\",  \n \"--testnet-magic\", CARDANO_NETWORK_MAGIC,  \n \"--address\", walletAddress  \n].join(\" \"));  \n  \n// Calculate total lovelace of the UTXO(s) inside the wallet address  \nconst utxoTableRows = rawUtxoTable.data.trim().split('\\n');  \nlet totalLovelaceRecv = 0;  \nlet isPaymentComplete = false;  \n  \nfor(let x = 2; x < utxoTableRows.length; x++) {  \n const cells = utxoTableRows[x].split(\" \").filter(i => i);  \n totalLovelaceRecv += parseInt(cells[2]);  \n}  \n  \n// Determine if the total lovelace received is more than or equal to  \n// the total expected lovelace and displaying the results.  \nisPaymentComplete = totalLovelaceRecv >= TOTAL_EXPECTED_LOVELACE;  \n  \nconsole.log(`Total Received: ${totalLovelaceRecv} LOVELACE`);  \nconsole.log(`Expected Payment: ${TOTAL_EXPECTED_LOVELACE} LOVELACE`);  \nconsole.log(`Payment Complete: ${(isPaymentComplete ? \"✅\" : \"❌\")}`);`\n`import * as fs from 'fs';  \n// Please add this dependency using npm install node-cmd but there is no @type definition for it  \nconst cmd: any = require('node-cmd');  \n  \n// Path to the cardano-cli binary or use the global one  \nconst CARDANO_CLI_PATH: string = \"cardano-cli\";  \n// The testnet identifier number  \nconst CARDANO_NETWORK_MAGIC: number = 1097911063;  \n// The directory where we store our payment keys  \n// assuming our current directory context is $HOME/receive-ada-sample/receive-ada-sample  \nconst CARDANO_KEYS_DIR: string = \"keys\";  \n// The imaginary total payment we expect in lovelace unit  \nconst TOTAL_EXPECTED_LOVELACE: number = 1000000;  \n  \n// Read wallet address string value from payment.addr file  \nconst walletAddress: string = fs.readFileSync(`${CARDANO_KEYS_DIR}/payment.addr`).toString();  \n  \n// We use the node-cmd npm library to execute shell commands and read the output data  \nconst rawUtxoTable: any = cmd.runSync([  \n CARDANO_CLI_PATH,  \n \"query\", \"utxo\",  \n \"--testnet-magic\", CARDANO_NETWORK_MAGIC,  \n \"--address\", walletAddress  \n].join(\" \"));  \n  \n// Calculate total lovelace of the UTXO(s) inside the wallet address  \nconst utxoTableRows: string[] = rawUtxoTable.data.trim().split('\\n');  \nlet totalLovelaceRecv: number = 0;  \nlet isPaymentComplete: boolean = false;  \n  \nfor (let x = 2; x < utxoTableRows.length; x++) {  \n const cells = utxoTableRows[x].split(\" \").filter((i: string) => i);  \n totalLovelaceRecv += parseInt(cells[2]);  \n}  \n  \n// Determine if the total lovelace received is more than or equal to  \n// the total expected lovelace and displaying the results.  \nisPaymentComplete = totalLovelaceRecv >= TOTAL_EXPECTED_LOVELACE;  \n  \nconsole.log(`Total Received: ${totalLovelaceRecv} LOVELACE`);  \nconsole.log(`Expected Payment: ${TOTAL_EXPECTED_LOVELACE} LOVELACE`);  \nconsole.log(`Payment Complete: ${(isPaymentComplete ? \"✅\" : \"❌\")}`);`\n`using System;  \nusing System.IO;  \nusing System.Linq;  \n  \n// Install using command `dotnet add package SimpleExec --version 7.0.0`  \nusing SimpleExec;  \n  \n// Path to the cardano-cli binary or use the global one  \nconst string CARDANO_CLI_PATH = \"cardano-cli\";  \n// The `testnet` identifier number  \nconst int CARDANO_NETWORK_MAGIC = 1097911063;  \n// The directory where we store our payment keys  \n// assuming our current directory context is $HOME/receive-ada-sample  \nconst string CARDANO_KEYS_DIR = \"keys\";  \n// The total payment we expect in lovelace unit  \nconst long TOTAL_EXPECTED_LOVELACE = 1000000;  \n  \n// Read wallet address string value from payment.addr file  \nvar walletAddress = await File.ReadAllTextAsync(Path.Combine(CARDANO_KEYS_DIR, \"payment.addr\"));  \n  \n// We use the SimpleExec library to execute cardano-cli shell command to query the wallet UTXO and read the output data  \nvar rawUtxoTable = await Command.ReadAsync(CARDANO_CLI_PATH, string.Join(\" \",  \n \"query\", \"utxo\",  \n \"--testnet-magic\", CARDANO_NETWORK_MAGIC,  \n \"--address\", walletAddress  \n), noEcho: true);  \n  \n// Calculate total lovelace of the UTXO(s) inside the wallet address  \nvar utxoTableRows = rawUtxoTable.Trim().Split(\"\\n\");  \nvar totalLovelaceRecv = 0L;  \nvar isPaymentComplete = false;  \n  \nforeach(var row in utxoTableRows.Skip(2)){  \n var cells = row.Split(\" \").Where(c => c.Trim() != string.Empty);  \n totalLovelaceRecv += long.Parse(cells.ElementAt(2));  \n}  \n  \n// Determine if the total lovelace received is more than or equal to  \n// the total expected lovelace and displaying the results.  \nisPaymentComplete = totalLovelaceRecv >= TOTAL_EXPECTED_LOVELACE;  \n  \nConsole.WriteLine($\"Total Received: {totalLovelaceRecv} LOVELACE\");  \nConsole.WriteLine($\"Expected Payment: {TOTAL_EXPECTED_LOVELACE} LOVELACE\");  \nConsole.WriteLine($\"Payment Complete: {(isPaymentComplete ? \"✅\":\"❌\")}\");`\n`import os  \nimport subprocess  \n  \n# Path to the cardano-cli binary or use the global one  \nCARDANO_CLI_PATH = \"cardano-cli\"  \n# The testnet identifier number  \nCARDANO_NETWORK_MAGIC = 1097911063  \n# The directory where we store our payment keys  \n# assuming our current directory context is $HOME/receive-ada-sample  \nCARDANO_KEYS_DIR = \"keys\"  \n# The total payment we expect in lovelace unit  \nTOTAL_EXPECTED_LOVELACE = 1000000  \n  \n# Read wallet address value from payment.addr file  \nwith open(os.path.join(CARDANO_KEYS_DIR, \"payment.addr\"), 'r') as file:  \n walletAddress = file.read()  \n  \n# We tell python to execute cardano-cli shell command to query the UTXO and read the output data  \nrawUtxoTable = subprocess.check_output([  \n CARDANO_CLI_PATH,  \n 'query', 'utxo',  \n '--testnet-magic', str(CARDANO_NETWORK_MAGIC),  \n '--address', walletAddress])  \n  \n# Calculate total lovelace of the UTXO(s) inside the wallet address  \nutxoTableRows = rawUtxoTable.strip().splitlines()  \ntotalLovelaceRecv = 0  \nisPaymentComplete = False  \n  \nfor x in range(2, len(utxoTableRows)):  \n cells = utxoTableRows[x].split()  \n totalLovelaceRecv += int(cells[2])  \n  \n# Determine if the total lovelace received is more than or equal to  \n# the total expected lovelace and displaying the results.  \nisPaymentComplete = totalLovelaceRecv >= TOTAL_EXPECTED_LOVELACE  \n  \nprint(\"Total Received: %s LOVELACE\" % totalLovelaceRecv)  \nprint(\"Expected Payment: %s LOVELACE\" % TOTAL_EXPECTED_LOVELACE)  \nprint(\"Payment Complete: %s\" % {True: \"✅\", False: \"❌\"} [isPaymentComplete])`\n\nYour project directory should look something like this:\n\n`# Excluding node_modules directory  \n  \n$HOME/receive-ada-sample/receive-ada-sample  \n├── checkPayment.js  \n├── keys  \n│   ├── payment.addr  \n│   ├── payment.skey  \n│   └── payment.vkey  \n├── package-lock.json  \n└── package.json  \n  \n1 directories, 6 files`\n`# Excluding node_modules directory  \n  \n$HOME/receive-ada-sample/receive-ada-sample  \n├── checkPayment.ts  \n├── keys  \n│   ├── payment.addr  \n│   ├── payment.skey  \n│   └── payment.vkey  \n├── package-lock.json  \n└── package.json  \n  \n1 directories, 6 files`\n`# Excluding bin and obj directories  \n  \n$HOME/receive-ada-sample/receive-ada-sample  \n├── Program.cs  \n├── dotnet.csproj  \n├── keys  \n│   ├── payment.addr  \n│   ├── payment.skey  \n│   └── payment.vkey  \n  \n1 directories, 5 files`\n`$HOME/receive-ada-sample/receive-ada-sample  \n├── checkPayment.py  \n└── keys  \n ├── payment.addr  \n ├── payment.skey  \n └── payment.vkey  \n  \n1 directory, 4 files`\n\nNow we are ready to test 🚀, running the code should give us the following result:\n\n`❯ node checkPayment.js  \nTotal Received: 0 LOVELACE  \nExpected Payment: 1000000 LOVELACE  \nPayment Complete: ❌`\n`❯ ts-node checkPayment.ts  \nTotal Received: 0 LOVELACE  \nExpected Payment: 1000000 LOVELACE  \nPayment Complete: ❌`\n`❯ dotnet run  \nTotal Received: 0 LOVELACE  \nExpected Payment: 1000000 LOVELACE  \nPayment Complete: ❌`\n`❯ python checkPayment.py   \nTotal Received: 0 LOVELACE  \nExpected Payment: 1000000 LOVELACE  \nPayment Complete: ❌`\n\nThe code is telling us that our current wallet has received a total of `0 lovelace` and it expected `1,000,000 lovelace`, therefore it concluded that the payment is not complete.\n\n`0 lovelace`\n`1,000,000 lovelace`\n\n## Complete the payment[​](#complete-the-payment \"Direct link to Complete the payment\")\n\nWhat we can do to simulate a successful payment is to send at least `1,000,000 lovelace` into the **wallet address** that we have just generated for this project. We can get the **wallet address** by reading the contents of the `payment.addr` file like so:\n\n`1,000,000 lovelace`\n`payment.addr`\n`cat $HOME/receive-ada-sample/receive-ada-sample/keys/payment.addr`\n\nYou should see the **wallet address** value:\n\n`addr_test1vpfkp665a6wn7nxvjql5vdn5g5a94tc22njf4lf98afk6tgnz5ge4`\n\nNow simply send at least `1,000,000 lovelace` to this **wallet address** or request some `test ada` funds from the [Cardano Testnet Faucet](https://docs.cardano.org/cardano-testnet/tools/faucet). Once complete, we can now run the code again and we should see a successful result this time.\n\n`1,000,000 lovelace`\n`test ada`\n`❯ node checkPayment.js  \nTotal Received: 1000000000 LOVELACE  \nExpected Payment: 1000000 LOVELACE  \nPayment Complete: ✅`\n`❯ ts-node checkPayment.ts  \nTotal Received: 1000000000 LOVELACE  \nExpected Payment: 1000000 LOVELACE  \nPayment Complete: ✅`\n`❯ dotnet run  \nTotal Received: 1000000000 LOVELACE  \nExpected Payment: 1000000 LOVELACE  \nPayment Complete: ✅`\n`❯ python checkPayment.py   \nTotal Received: 1000000000 LOVELACE  \nExpected Payment: 1000000 LOVELACE  \nPayment Complete: ✅`\n\nIt might take 20 seconds or more for the transaction to propagate within the network depending on the network health, so you will have to be patient.\n\nCongratulations, you are now able to detect successful **Cardano** payments programmatically. This should help you bring integrations to your existing or new upcoming applications. 🎉🎉🎉",
  "images": [],
  "extraction_metadata": {
    "batch_number": 7,
    "extraction_timestamp": "2025-09-19T14:04:49.862174",
    "extraction_time": 2.4011168479919434,
    "source": "tavily_api_raw"
  }
}