{
  "url": "https://developers.cardano.org/docs/get-started/mesh/transactions-minting",
  "content": "![Cardano Logo](/img/cardano-black.svg)\n![Cardano Logo](/img/cardano-white.svg)\n\n# Minting Transactions\n\nIn this section, we will learn to use ForgeScript to create minting transactions for minting and burning native assets. If you are new to transactions, be sure to check out how to create transactions to [send lovelace and assets](/docs/get-started/mesh/transactions-basic).\n\nIn this section, we will explore the following:\n\n## Minting Assets[​](#minting-assets \"Direct link to Minting Assets\")\n\nWe will see how to mint native assets with a `ForgeScript`.\n\n`ForgeScript`\n`import { Transaction, ForgeScript } from \"@meshsdk/core\";  \nimport type { Mint, AssetMetadata } from \"@meshsdk/core\";  \n  \n// prepare forgingScript  \nconst usedAddress = await wallet.getUsedAddresses();  \nconst address = usedAddress[0];  \nconst forgingScript = ForgeScript.withOneSignature(address);  \n  \nconst tx = new Transaction({ initiator: wallet });  \n  \n// define asset#1 metadata  \nconst assetMetadata1: AssetMetadata = {  \n name: \"Mesh Token\",  \n image: \"ipfs://QmRzicpReutwCkM6aotuKjErFCUD213DpwPq6ByuzMJaua\",  \n mediaType: \"image/jpg\",  \n description: \"This NFT is minted by Mesh (https://meshjs.dev/).\",  \n};  \nconst asset1: Mint = {  \n assetName: \"MeshToken\",  \n assetQuantity: \"1\",  \n metadata: assetMetadata1,  \n label: \"721\",  \n recipient: \"addr_test1vpvx0sacufuypa2k4sngk7q40zc5c4npl337uusdh64kv0c7e4cxr\",  \n};  \ntx.mintAsset(forgingScript, asset1);  \n  \nconst unsignedTx = await tx.build();  \nconst signedTx = await wallet.signTx(unsignedTx);  \nconst txHash = await wallet.submitTx(signedTx);`\n\nAdditionally, you can define the forging script with NativeScript. For example if you want to have a policy locking script, you can do this:\n\n`import type { NativeScript } from \"@meshsdk/core\";  \n  \nconst nativeScript: NativeScript = {  \n type: \"all\",  \n scripts: [  \n {  \n type: \"before\",  \n slot: \"<insert slot here>\",  \n },  \n {  \n type: \"sig\",  \n keyHash: \"<insert keyHash here>\",  \n },  \n ],  \n};  \n  \nconst forgingScript = ForgeScript.fromNativeScript(nativeScript);`\n\n[Try demo](https://meshjs.dev/apis/transaction/minting#minting)\n\n## Burning Assets[​](#burning-assets \"Direct link to Burning Assets\")\n\nLike minting assets, we need to define the `ForgeScript`. We use the first wallet address as the \"minting address\". Note that, assets can only be burned by its minting address.\n\n`ForgeScript`\n`import { Transaction, ForgeScript } from \"@meshsdk/core\";  \nimport type { Asset } from \"@meshsdk/core\";  \n  \n// prepare forgingScript  \nconst usedAddress = await wallet.getUsedAddresses();  \nconst address = usedAddress[0];  \nconst forgingScript = ForgeScript.withOneSignature(address);  \n  \nconst tx = new Transaction({ initiator: wallet });  \n  \n// burn asset#1  \nconst asset1: Asset = {  \n unit: \"64af286e2ad0df4de2e7de15f8ff5b3d27faecf4ab2757056d860a424d657368546f6b656e\",  \n quantity: \"1\",  \n};  \ntx.burnAsset(forgingScript, asset1);  \n  \nconst unsignedTx = await tx.build();  \nconst signedTx = await wallet.signTx(unsignedTx);  \nconst txHash = await wallet.submitTx(signedTx);`\n\nCheck out the [Mesh Playground](https://meshjs.dev/apis/transaction/minting) for live demo and full explanation.",
  "images": [],
  "extraction_metadata": {
    "batch_number": 6,
    "extraction_timestamp": "2025-09-19T14:04:44.452431",
    "extraction_time": 1.4428989887237549,
    "source": "tavily_api_raw"
  }
}