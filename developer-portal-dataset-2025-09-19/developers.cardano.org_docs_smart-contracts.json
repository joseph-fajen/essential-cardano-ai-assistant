{
  "url": "https://developers.cardano.org/docs/smart-contracts/",
  "content": "[Skip to main content](#__docusaurus_skipToContent_fallback)\n\n# Smart Contracts\n\n## What are smart contracts?[​](#what-are-smart-contracts \"Direct link to What are smart contracts?\")\n\nSmart contracts are digital agreements defined in code that automate and enforce the terms of a contract without the need for intermediaries, enabling secure and transparent transactions on a blockchain. By leveraging predetermined conditions defined within the smart contract code, the state of a contract can only be updated in a way that follows the rules defined in that contract.\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nSmart contracts on Cardano work a bit differently from how they do on other blockchains. The key to understanding smart contracts is to first understand the [eUTXO](/docs/get-started/technical-concepts/core-blockchain-fundamentals#extended-unspent-transaction-output-eutxo) model.\n\nSmart contracts are validator scripts that you write to validate the movement of UTXOs locked in your contract's address. You will lock UTXOs at the address of your script and then the UTXOs can only ever be spent/moved if your script allows the transaction spending it to do so.\n\n## Conceptual overview[​](#conceptual-overview \"Direct link to Conceptual overview\")\n\n### Smart Contracts Are Validators, Not Actors[​](#smart-contracts-are-validators-not-actors \"Direct link to Smart Contracts Are Validators, Not Actors\")\n\nMental Model Shift\n\nThe most important mental shift when coming to Cardano from other blockchains: **smart contracts cannot take actions**. They can only approve or deny proposed transactions.\n\nA Cardano smart contract cannot:\n\n* \"Send tokens\" to another address\n* \"Call another contract\"\n* Initiate any action on its own\n\nInstead, smart contracts **validate** that transactions do the things you want them to do. Users propose transactions, and contracts either approve or reject them based on the validation logic you define.\n\n### Components[​](#components \"Direct link to Components\")\n\nSmart contracts consist of on-chain and off-chain components:\n\n* **On-chain component (validator-script)**: Validates that transactions spending from the contract address follow the contract's rules. This is the immutable logic that runs on every Cardano node.\n* **Off-chain component**: Applications that construct valid transactions according to the contract rules. These can be built in any language and handle user interfaces, data fetching, and transaction building.\n\nThe off-chain component is equally critical - it's responsible for creating transactions that the on-chain validator will approve.\n\n### On-Chain (Validator scripts)[​](#on-chain-validator-scripts \"Direct link to On-Chain (Validator scripts)\")\n\nValidator scripts are executed automatically when a UTXO residing at the address of the script is attempted to be moved by a transaction. These scripts take a transaction as its input and then outputs either true or false depending on whether the transaction is valid or not according to your rules/logic as defined in the script - thus blocking or allowing a transaction to succeed. If you are moving multiple UTXOs residing on the same script address, the validator-script will run once for each UTXO. This script execution happens on the Cardano node validating your transaction. Validator scripts run once per script input in the transaction.\n\nThis means that in order for the validator script to execute, a transaction must first move a UTXO to the address of the contract; the address is derived from the contract mathematically. Normally, only the script hash is stored on-chain. With CIP-33 reference scripts, you can include the full script in a UTXO so later transactions can reference it without including the full script code.\n\n### Off-Chain[​](#off-chain \"Direct link to Off-Chain\")\n\nYou might think of this initial transaction where you move a UTXO to the script address to be the initialisation of a contract instance. Each UTXO residing on the address of the contract can thus be seen as an instance of the contract. Note that there is no restriction on the UTXOs being sent to the script address: anyone can send a UTXO containing no datum, or an arbitrary datum.\n\nThe off-chain part is needed in order to locate UTXOs that are locked in your contract and generate transactions that are valid for moving them.\n\n## Technical overview[​](#technical-overview \"Direct link to Technical overview\")\n\nSmart contracts on Cardano are validator scripts that enforce custom logic when interacting with UTXOs \"owned\" by a script (owned meaning the UTxO sits at the script address). Think of them as parameterized mathematical functions that return true or false to determine transaction validity.\n\n### Understanding Validators: The Mathematical Model[​](#understanding-validators-the-mathematical-model \"Direct link to Understanding Validators: The Mathematical Model\")\n\nValidators work like mathematical functions with three inputs:\n\nValidator Function Signature\n\n```\nScript: f(datum, redeemer, context) = success | failureScript: f(datum, redeemer, context) = success | failure\n```\n\nConceptually, you can think of validators as returning true/false, though under the hood they either succeed (returning unit `()`) or fail (throwing an error).\n\nConsider the analogy of a simple function: `f(x) = x * a + b`\n\n* **Script** is the function definition (`x * a + b`) - your validation logic\n* **Datum** contains the parameters (`a` and `b`) - configuration data set when the UTXO is created\n* **Redeemer** provides the argument (`x`) - user input provided when spending\n* **Context** gives access to transaction details for validation\n\n### The Three Script Arguments[​](#the-three-script-arguments \"Direct link to The Three Script Arguments\")\n\n#### Datum: Contract State[​](#datum-contract-state \"Direct link to Datum: Contract State\")\n\nData attached to UTXOs and is immutable. Datums carry contract state between transactions, enabling complex state machines by preserving information that subsequent transactions can read and modify. When someone sends UTxOs to a script address, they attach the datum to define the conditions under which the UTxO can be spent. Datum are the extension to the UTxO model and, in a way, stand for the \"e\" in eUTxO. Unlike the Bitcoin UTxO model, which lacks datums and thus has limited capabilities, the extended UTxO model provides capabilities comparable to an account-based model while maintaining a safer approach to transactions by avoiding global state mutations.\n\n#### Redeemer: User Input[​](#redeemer-user-input \"Direct link to Redeemer: User Input\")\n\nData provided by users with the transaction for script execution when spending UTXOs that \"unlocks\" funds by satisfying the script's conditions. Redeemers drive state transitions by supplying the inputs needed to transform the current state (datum) into a new state. The redeemer must meet the validation logic specified by the script to successfully spend the locked funds.\n\n> Recap: The datum is set when the UTxO is created, whereas the redeemer is provided only when spending the UTxO.\n\n#### Script Context: Transaction Information[​](#script-context-transaction-information \"Direct link to Script Context: Transaction Information\")\n\nLogic in smart contracts involves making validations about certain properties of the transaction, including inputs, outputs, signatures, fees, and other transaction properties. This allows scripts to make assertions about transaction structure, participants, timing, and other properties.\n\n**Available Context Properties:**\n\n| Property | Description |\n| --- | --- |\n| **inputs** | List of transaction inputs being spent in the transaction. In the UTXO model, every transaction produces outputs, which in turn become inputs for future transactions. |\n| **reference\\_inputs** | Inputs used for reference only, not spent |\n| **outputs** | New outputs created by the transaction. These are the new UTXOs created by the transaction |\n| **fee** | Transaction fee in Lovelace. This value is predictable and depends on the transaction size. Fees can often be optimized. |\n| **minted value** | This is the value of tokens being minted or burned in the transaction |\n| **certificates** | Certificates for delegation, pool operations (register/deregister stake key), governance roles, etc. |\n| **withdrawals** | Stake reward withdrawals as credential-lovelace pairs |\n| **validity\\_range** | Time range in which the transaction is valid. |\n| **signatories** | A list of hashes representing who signed the transaction. |\n| **redeemers** | Script purpose and redeemer pairs for script execution. These are a list of redeemers used by the contracts executed in the transaction |\n| **datums** | Dictionary mapping data hashes to datum data |\n| **id** | Transaction identification (hash) that is unique for each transaction |\n| **votes** | Governance votes as voter-vote pairs (Conway era) |\n| **proposal\\_procedures** | Governance proposals (Conway era) |\n| **current\\_treasury\\_amount** | Current treasury amount (optional) |\n| **treasury\\_donation** | Treasury donation amount (optional) |\n\nTransaction Context Representation\n\nThis is a representation of a transaction as seen by on-chain scripts, and not the 1:1 translation of the transaction as seen by the ledger. The underlying ledger uses a different structure with numeric field keys as defined in the [Conway CDDL specification](https://github.com/IntersectMBO/cardano-ledger/blob/master/eras/conway/impl/cddl-files/conway.cddl). In particular, on-chain scripts can't see inputs locked by bootstrap addresses, outputs to bootstrap addresses, or transaction metadata.\n\n### Script Addresses[​](#script-addresses \"Direct link to Script Addresses\")\n\n**Script Address**: A unique address derived from the hash of a smart contract (Plutus script binary). UTXOs sent to script addresses can only be spent when the originating script validates the spending transaction successfully.\n\n**Script Hash Details**: Script addresses are derived from a 28-byte script hash that includes a language tag (`0x01` for PlutusV1, `0x02` for PlutusV2, `0x03` for PlutusV3). This means identical bytecode under different Plutus versions yields different addresses.\n\nAddress Collision\n\n**Important insight**: The same contract code always produces the same address within the same Plutus version. If you deploy the exact same smart contract code that someone else has already deployed, you'll get the same address - and there may already be transaction history there! This is because the address is mathematically derived from the contract code itself.\n\nUnlike regular addresses controlled by private keys, script addresses are controlled by the logic defined in the smart contract code. This means:\n\n* Anyone can send funds to a script address\n* Only transactions that satisfy the script's validation logic can spend those funds\n* The script executes automatically whenever someone attempts to spend UTXOs from its address\n* Multiple developers deploying identical code will interact with the same contract address\n\n### Script Purposes and Types[​](#script-purposes-and-types \"Direct link to Script Purposes and Types\")\n\nScripts validate different operations depending on their purpose, as defined in the [Conway era ledger specification](https://github.com/IntersectMBO/cardano-ledger/blob/master/eras/conway/impl/cddl-files/conway.cddl):\n\n| Script Type | Description |\n| --- | --- |\n| **Spend Scripts** | Validate UTXO consumption. These are the most common scripts and the only ones that receive datum information. |\n| **Mint Scripts** | Control token creation and destruction through minting policies. |\n| **Publish Scripts** | Validate certificates including stake delegation, pool registration/retirement, DRep registration, committee changes, and other governance roles. |\n| **Withdraw Scripts** | Control stake reward withdrawals. |\n| **Vote Scripts** | Validate governance votes (introduced in Conway era). |\n| **Propose Scripts** | Validate governance proposals (introduced in Conway era). |\n| **Native Scripts** | Cardano's \"original\" scripting language that predates Plutus, providing simple multisig and time-lock functionality through a minimal domain-specific language with constructs like \"all-of\", \"any-of\", and \"after/before\" time constraints. |\n\n### Collateral and Script Execution[​](#collateral-and-script-execution \"Direct link to Collateral and Script Execution\")\n\n**Collateral**: UTXOs that must be provided when executing Plutus scripts to cover potential execution costs if the script fails during validation.\n\n#### Transaction Validation Phases[​](#transaction-validation-phases \"Direct link to Transaction Validation Phases\")\n\nWhen a transaction includes script execution:\n\n* **Phase 1 Validation**: Basic transaction structure validation (inputs exist, signatures valid, etc.)\n* **Phase 2 Validation**: Script execution and validation\n* If Phase 2 fails, collateral UTXOs are consumed instead of regular transaction fees\n\n#### Collateral Requirements[​](#collateral-requirements \"Direct link to Collateral Requirements\")\n\n* Must contain only ADA (no native tokens)\n* Should be sufficient to cover script execution costs\n* Collateral amount is determined by the total balance of UTXOs marked as collateral inputs\n* With Vasil upgrade: can specify change address to return excess collateral\n\n#### Purpose and Protection[​](#purpose-and-protection \"Direct link to Purpose and Protection\")\n\nCollateral serves as a monetary guarantee that encourages careful design and testing of smart contracts. Without collateral, malicious actors could exploit the network by flooding it with invalid transactions at little cost. Key protections include:\n\n* **Network Security**: Makes Denial of Service (DoS) attacks prohibitively expensive\n* **Node Compensation**: Ensures nodes are compensated for their work if Phase 2 validation fails\n* **User Safety**: Collateral is not collected if a transaction succeeds or is invalid at Phase 1\n* **Deterministic Costs**: Unlike Ethereum where gas costs vary based on network activity, Cardano's deterministic design allows users to calculate execution costs and collateral requirements in advance\n\n#### Technical Implementation[​](#technical-implementation \"Direct link to Technical Implementation\")\n\nPhase 2 scripts require a budget of execution units (ExUnits) to quantify resource usage for metrics like memory usage and execution steps. This budget is included in the transaction fee calculation, with collateral providing additional safeguards for script execution failures.\n\n### Deterministic Validation[​](#deterministic-validation \"Direct link to Deterministic Validation\")\n\nValidators are fully deterministic - their execution depends only on the transaction context. This predictability allows you to verify transaction outcomes before submission, unlike systems where network conditions can affect execution.\n\n## Contract Workflows[​](#contract-workflows \"Direct link to Contract Workflows\")\n\nUnderstanding how scripts work in practice helps bridge the unique UTxO model with a basic example. Let's trace through a simple counter contract that demonstrates the datum/redeemer relationship:\n\n### Step 1: Create the Validator[​](#step-1-create-the-validator \"Direct link to Step 1: Create the Validator\")\n\nWrite a script that validates state transitions by checking that the redeemer (user action) correctly transforms the current datum (contract state) into the new datum AND that all contract rules are met. For example, a counter validator ensures the count increments by exactly one & that the transaction is signed by the authorized owner to spend the UTxO.\n\n### Step 2: Lock Funds (Initialize State)[​](#step-2-lock-funds-initialize-state \"Direct link to Step 2: Lock Funds (Initialize State)\")\n\nCreate a transaction that sends a UTxO value to the script address with a datum containing the initial state (e.g., `count: 0`) and any access control information (e.g., the owner's public key hash). This locks the funds under your validation logic and establishes both the contract's starting state and who can interact with it.\n\n### Step 3: Unlock and Update State[​](#step-3-unlock-and-update-state \"Direct link to Step 3: Unlock and Update State\")\n\nTo spend the locked UTXO, provide a redeemer that specifies the desired action (e.g., \"increment\"). The validator compares the input datum (`count: 0`) with the redeemer (\"increment\") and the output datum (`count: 1`), allowing the transaction only if the state transition is valid (meets all validator requirements, like being transaction being signed by the authorized owner and following the correct state transition - incrementing the count only by 1). This creates a new UTXO with updated state while the old one is consumed/spent.\n\n### Workflow Diagrams[​](#workflow-diagrams \"Direct link to Workflow Diagrams\")\n\nThis pattern - spending a UTXO and recreating it with new state - is how Cardano handles stateful contracts. Each transaction in the chain validates that the state evolution follows your contract's rules, creating an auditable history of state changes.\n\n## Modern Smart Contract Features[​](#modern-smart-contract-features \"Direct link to Modern Smart Contract Features\")\n\nCardano provides several powerful features that make smart contract development more efficient and flexible:\n\n### Reference Inputs ([CIP-31](https://cips.cardano.org/cip/CIP-31))[​](#reference-inputs-cip-31 \"Direct link to reference-inputs-cip-31\")\n\nYou can read UTXO data without spending it. This is great for:\n\n* **Oracle feeds**: Multiple contracts can read the same price data simultaneously\n* **State queries**: Check contract state without modifying it\n* **Shared resources**: Multiple users can access the same data without conflicts\n\nInstead of the old spend-and-recreate pattern, just reference the UTXO you want to read from.\n\n### Inline Datums ([CIP-32](https://cips.cardano.org/cip/CIP-32))[​](#inline-datums-cip-32 \"Direct link to inline-datums-cip-32\")\n\nStore your datum data directly in outputs instead of dealing with hashes. This means:\n\n* No datum hash calculations\n* No need to provide separate datum data when spending\n\nYour datum is right there in the output - much simpler to work with.\n\n### Reference Scripts ([CIP-33](https://cips.cardano.org/cip/CIP-33))[​](#reference-scripts-cip-33 \"Direct link to reference-scripts-cip-33\")\n\nDeploy your script once, then reference it from multiple transactions. You get:\n\n* **Smaller transactions**: No need to include full script code every time\n* **Lower fees**: Pay for the script once, not per transaction\n* **Better throughput**: More transactions fit in each block\n\nKey Characteristics\n\nOn Cardano, typically only the **hash** of a validator script is stored on-chain. Optionally, the full script can be included via a **reference script** (CIP-33), allowing later transactions to reference it without resubmitting the code. It is not possible to modify the rules of an existing smart contract, nor is it possible to decompile the stored smart contract code from its compiled state into the original source code.\n\n### Collateral Output ([CIP-40](https://cips.cardano.org/cip/CIP-40))[​](#collateral-output-cip-40 \"Direct link to collateral-output-cip-40\")\n\nTransactions that call Plutus smart contracts are required to put up collateral to cover the potential cost of smart contract execution failure.\n\nThese features work together to make Cardano smart contracts more practical and cost-effective to deploy and use.\n\n## Programming languages[​](#programming-languages \"Direct link to Programming languages\")\n\nCardano introduced smart contracts in 2021 and supports the development and deployment of smart contracts using multiple different languages.\n\ntip\n\nWriting well-designed smart contracts requires you to have a solid understanding of how Cardano works in general. So, make sure that everything on this page makes sense before you start creating contracts. Many topics are described in more detail on the [Technical Concepts](/docs/get-started/technical-concepts/overview) page as well.\n\n* [Aiken](/docs/smart-contracts/smart-contract-languages/aiken/overview) - Most popular smart contract language on Cardano written in Rust like syntax. Specifically designed for on-chain validators only and embraces/treats UTxO model as a first citizen: a language & toolchain favouring developer experience.\n* [Plutarch](https://github.com/Plutonomicon/plutarch-plutus) - With Plutarch, you have much more fine gained control of the Plutus Core you generate, without giving up any type information. Not for the faint hearted as it is close to writing UPLC by hand, but will almost always yield highest performance.\n* [OpShin](/docs/smart-contracts/smart-contract-languages/opshin) - Pythonic programming language used for smart contracts.\n* [Scalus](/docs/smart-contracts/smart-contract-languages/scalus) - a modern unified development platform for building Cardano DApps using Scala 3 for both on-chain smart contracts and off-chain logic. Scalus works with JVM and JavaScript too.\n* [Plinth](/docs/smart-contracts/smart-contract-languages/plinth) - \"Canonical\" smart contract language of Cardano written in Haskell with advanced tooling. Can be used for both on-chain and off-chain.\n* [Plu-ts](/docs/smart-contracts/smart-contract-languages/plu-ts) - Typescript-embedded smart contract programming language and a transaction creation library.\n\n* [What are smart contracts?](#what-are-smart-contracts)\n* [Introduction](#introduction)\n* [Conceptual overview](#conceptual-overview)\n  + [Smart Contracts Are Validators, Not Actors](#smart-contracts-are-validators-not-actors)\n  + [Components](#components)\n  + [On-Chain (Validator scripts)](#on-chain-validator-scripts)\n  + [Off-Chain](#off-chain)\n* [Technical overview](#technical-overview)\n  + [Understanding Validators: The Mathematical Model](#understanding-validators-the-mathematical-model)\n  + [The Three Script Arguments](#the-three-script-arguments)\n  + [Script Addresses](#script-addresses)\n  + [Script Purposes and Types](#script-purposes-and-types)\n  + [Collateral and Script Execution](#collateral-and-script-execution)\n  + [Deterministic Validation](#deterministic-validation)\n* [Contract Workflows](#contract-workflows)\n  + [Step 1: Create the Validator](#step-1-create-the-validator)\n  + [Step 2: Lock Funds (Initialize State)](#step-2-lock-funds-initialize-state)\n  + [Step 3: Unlock and Update State](#step-3-unlock-and-update-state)\n  + [Workflow Diagrams](#workflow-diagrams)\n* [Modern Smart Contract Features](#modern-smart-contract-features)\n  + [Reference Inputs (CIP-31)](#reference-inputs-cip-31)\n  + [Inline Datums (CIP-32)](#inline-datums-cip-32)\n  + [Reference Scripts (CIP-33)](#reference-scripts-cip-33)\n  + [Collateral Output (CIP-40)](#collateral-output-cip-40)\n* [Programming languages](#programming-languages)",
  "images": [],
  "extraction_metadata": {
    "batch_number": 10,
    "extraction_timestamp": "2025-09-19T14:05:05.551444",
    "extraction_time": 2.0458879470825195,
    "source": "tavily_api_raw"
  }
}