{
  "url": "https://developers.cardano.org/docs/operate-a-stake-pool/node-operations/new-tracing-system/cardano-tracer",
  "content": "![Cardano Logo](/img/cardano-black.svg)\n![Cardano Logo](/img/cardano-white.svg)\n\n# Cardano Tracer\n\n## Cardano Tracer[​](#cardano-tracer \"Direct link to Cardano Tracer\")\n\n`cardano-tracer` is a service for logging and monitoring over Cardano nodes. After it is connected to the node, it periodically asks the node for different information, receives it, and handles it.\n\n`cardano-tracer`\n\n## Contents[​](#contents \"Direct link to Contents\")\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\n### Motivation[​](#motivation \"Direct link to Motivation\")\n\nPreviously, the node handled all the logging by itself. It provides two web-servers for application monitoring: Prometheus and EKG.\n\n`cardano-tracer` is the result of *moving* all the logging and monitoring-related components from the node to a separate service. As a result, the node becomes smaller, faster, and simpler once the current system is deprecated.\n\n`cardano-tracer`\n\n### Overview[​](#overview \"Direct link to Overview\")\n\nYou can think of Cardano node as a **producer** of logging and monitoring information, and `cardano-tracer` as a **consumer** of this information. After a network connection between them is established, `cardano-tracer` periodically asks for such information, and the node replies with it.\n\n`cardano-tracer`\n`cardano-tracer`\n\nThere are 3 such kinds of information:\n\n`cardano-tracer`\n`systemd`\n`cardano-tracer`\n`cardano-tracer`\n\n`cardano-tracer` can work as an aggregator as well: *one* `cardano-tracer` process can receive the information from *multiple* nodes.\n\n`cardano-tracer`\n`cardano-tracer`\n\n## Build and run[​](#build-and-run \"Direct link to Build and run\")\n\nFor how to build `cardano-tracer`, refer to the [New Tracing Quickstart](/docs/operate-a-stake-pool/node-operations/new-tracing-system/new-tracing-system).\n\n`cardano-tracer`\n\n## Configuration[​](#configuration \"Direct link to Configuration\")\n\nThe way how to configure `cardano-tracer` depends on your requirements. There are two basic scenarios:\n\n`cardano-tracer`\n`cardano-tracer`\n`cardano-tracer`\n\nDistributed scenario is for real-life case. You may have `N` nodes, running on `N` different hosts, and you want to collect all the logging and monitoring information from these nodes using one `cardano-tracer` process working on your machine.\n\n`N`\n`N`\n`cardano-tracer`\n\nLocal scenario is best for testing and debugging. For example, you want to try your new infrastructure from scratch so you run `N` nodes and one `cardano-tracer` process on your machine.\n\n`N`\n`cardano-tracer`\n\n### Settings in Cardano Node config.json file[​](#settings-in-cardano-node-configjson-file \"Direct link to Settings in Cardano Node config.json file\")\n\nBackends can be a combination of `Forwarder`, `EKGBackend`, `PrometheusSimple <...>`, and one of `Stdout MachineFormat`, `Stdout HumanFormatColoured` and `Stdout HumanFormatUncoloured`.\n\n`Forwarder`\n`EKGBackend`\n`PrometheusSimple <...>`\n`Stdout MachineFormat`\n`Stdout HumanFormatColoured`\n`Stdout HumanFormatUncoloured`\n\nTracing options that can be given based on a namespace are `severity`, `detail` and `maxFrequency`.\n\n`severity`\n`detail`\n`maxFrequency`\n`{  \n \"UseTraceDispatcher\": true,  \n \"TraceOptions\": {  \n \"\": {  \n \"severity\": \"Notice\",  \n \"detail\": \"DNormal\",  \n \"backends\": [  \n \"Stdout MachineFormat\",  \n \"EKGBackend\",  \n \"Forwarder\"  \n ]  \n },  \n \"ChainDB\": {  \n \"severity\": \"Info\",  \n \"detail\": \"DDetailed\"  \n },  \n \"ChainDB.AddBlockEvent.AddedBlockToQueue\": {  \n \"maxFrequency\": 2.0  \n }  \n },  \n \"TraceOptionPeerFrequency\": 2000  \n}`\n\nFor further node-side configuration explanations, refer to:\n\n[New Tracing Quickstart](/docs/operate-a-stake-pool/node-operations/new-tracing-system/new-tracing-system)\n\n### Distributed Scenario[​](#distributed-scenario \"Direct link to Distributed Scenario\")\n\nThis is an example with 3 nodes and one `cardano-tracer`:\n\n`cardano-tracer`\n`machine A machine B machine C  \n+-----------------+ +-----------------+ +-----------------+  \n| node 1 | | node 2 | | node 3 |  \n+-----------------+ +-----------------+ +-----------------+  \n ^ ^ ^  \n \\ | /  \n \\ | /  \n v v v  \n +---------------------+  \n | cardano-tracer |  \n +---------------------+  \n machine D`\n\nThe minimalistic configuration file for `cardano-tracer` would be:\n\n`cardano-tracer`\n`{  \n \"networkMagic\": 764824073,  \n \"network\": {  \n \"tag\": \"AcceptAt\",  \n \"contents\": \"/tmp/forwarder.sock\"  \n },  \n \"logging\": [  \n {  \n \"logRoot\": \"/tmp/cardano-tracer-logs\",  \n \"logMode\": \"FileMode\",  \n \"logFormat\": \"ForMachine\"  \n }  \n ]  \n}`\n\nThe `network` field specifies the way how `cardano-tracer` will be connected to your nodes. Here you see `AcceptAt` tag, which means that `cardano-tracer` works as a server: it *accepts* network connections by listening the local socket `/tmp/forwarder.sock`. Your nodes work as clients: they *initiate* network connections using their local sockets. It can be shown like this:\n\n`network`\n`cardano-tracer`\n`AcceptAt`\n`cardano-tracer`\n`/tmp/forwarder.sock`\n`machine A machine B machine C  \n+----------------------+ +----------------------+ +----------------------+  \n| node 1 | | node 2 | | node 3 |  \n| \\ | | \\ | | \\ |  \n| v | | v | | v |  \n| /tmp/forwarder.sock | | /tmp/forwarder.sock | | /tmp/forwarder.sock |  \n+----------------------+ +----------------------+ +----------------------+  \n  \n  \n  \n  \n  \n +---------------------+  \n | /tmp/forwarder.sock |  \n | ^ |  \n | \\ |  \n | cardano-tracer |  \n +---------------------+  \n machine D`\n\nTo establish the real network connections between your machines, you need SSH forwarding:\n\n`machine A machine B machine C  \n+----------------------+ +----------------------+ +----------------------+  \n| node 1 | | node 2 | | node 3 |  \n| \\ | | \\ | | \\ |  \n| v | | v | | v |  \n| /tmp/forwarder.sock | | /tmp/forwarder.sock | | /tmp/forwarder.sock |  \n+----------------------+ +----------------------+ +----------------------+  \n ^ ^ ^  \n \\ | /  \n SSH SSH SSH  \n \\ | /  \n v v v  \n +---------------------+  \n | /tmp/forwarder.sock |  \n | ^ |  \n | \\ |  \n | cardano-tracer |  \n +---------------------+  \n machine D`\n\nThe idea of SSH forwarding is simple: we do not connect directly to the process but to their network endpoints instead. You can think of it as a network channel from the local socket on one machine to the local socket on another machine:\n\n`machine A machine D  \n+----------------------------------+ +------------------------------------------+  \n| node 1 --> /tmp/forwarder.sock <-|---SSH channel---|-> /tmp/forwarder.sock <-- cardano-tracer |  \n+----------------------------------+ +------------------------------------------+`\n\nNeither your nodes nor `cardano-tracer` know anything SSH, they only know about their local sockets. Using SSH forwarding mechanism they work together between machines. Since you already have your SSH credentials the connection between your nodes and `cardano-tracer` will be secure.\n\n`cardano-tracer`\n`cardano-tracer`\n\nPath `/tmp/forwarder.sock` is just an example. You can use any other name in any other directory where you have read/write permissions.\n\n`/tmp/forwarder.sock`\n\nTo connect `cardano-node` working on machine `A` with `cardano-tracer` working on machine `D`, run this command on machine `A`:\n\n`cardano-node`\n`A`\n`cardano-tracer`\n`D`\n`A`\n`ssh -nNT -L /tmp/forwarder.sock:/tmp/forwarder.sock -o \"ExitOnForwardFailure yes\" john@109.75.33.121`\n\nwhere:\n\n`/tmp/forwarder.sock`\n`A`\n`D`\n`john`\n`D`\n`109.75.33.121`\n`D`\n\nMake sure you run `ssh`-command **before** you start your node. Since `ssh` creates the channel and `cardano-node` uses that channel, you should *create* it before *using* it.\n\n`ssh`\n`ssh`\n`cardano-node`\n\nNow run the same command on machines `B` and `C` to connect corresponding nodes with the same `cardano-tracer` working on machine `D`.\n\n`B`\n`C`\n`cardano-tracer`\n`D`\n\nNodes working on machines `A`, `B` and `C` should specify paths `/tmp/forwarder.sock` using node's CLI-parameter `--tracer-socket-path-connect` or `--tracer-socket-path-accept` (see explanation below). There is another CLI-parameter `--socket-path` as well, but it's **not** related to `cardano-tracer`.\n\n`A`\n`B`\n`C`\n`/tmp/forwarder.sock`\n`--tracer-socket-path-connect`\n`--tracer-socket-path-accept`\n`--socket-path`\n`cardano-tracer`\n\n### Local Scenario[​](#local-scenario \"Direct link to Local Scenario\")\n\nAs was mentioned above, local scenario is for testing, when your nodes and `cardano-tracer` reside on the same machine. In this case all processes can see the same local sockets so we don't need `ssh`. The configuration file for 3 local nodes would look like this (same as before):\n\n`cardano-tracer`\n`ssh`\n`{  \n \"networkMagic\": 764824073,  \n \"network\": {  \n \"tag\": \"AcceptAt\",  \n \"contents\": \"/tmp/forwarder.sock\"  \n },  \n \"logging\": [  \n {  \n \"logRoot\": \"/tmp/cardano-tracer-logs\",  \n \"logMode\": \"FileMode\",  \n \"logFormat\": \"ForMachine\"  \n }  \n ]  \n}`\n\n`cardano-tracer` works as a server: it *accepts* network connections by listening the local socket `/tmp/forwarder.sock`. Your local nodes work as clients: they *initiate* network connections using the *same* local socket `/tmp/forwarder.sock`.\n\n`cardano-tracer`\n`/tmp/forwarder.sock`\n`/tmp/forwarder.sock`\n\nThere is another way to connect `cardano-tracer` to your nodes: the `cardano-tracer` can work as *initiator*, this is an example of configuration file:\n\n`cardano-tracer`\n`cardano-tracer`\n`{  \n \"networkMagic\": 764824073,  \n \"network\": {  \n \"tag\": \"ConnectTo\",  \n \"contents\": [  \n \"/tmp/cardano-node-1.sock\"  \n \"/tmp/cardano-node-2.sock\"  \n \"/tmp/cardano-node-3.sock\"  \n ]  \n },  \n \"logging\": [  \n {  \n \"logRoot\": \"/tmp/cardano-tracer-logs\",  \n \"logMode\": \"FileMode\",  \n \"logFormat\": \"ForMachine\"  \n }  \n ]  \n}`\n\nAs you see, the tag in `network` field is `ConnectTo` now, which means that `cardano-tracer` works as a client: it *establishes* network connections with your local nodes via the local sockets `/tmp/cardano-node-*.sock`. In this case each socket is used by a particular node.\n\n`network`\n`ConnectTo`\n`cardano-tracer`\n`/tmp/cardano-node-*.sock`\n\nIt is **highly recommended** to use `AcceptAt` for easier maintainance. Use `ConnectTo` only if you really need it.\n\n`AcceptAt`\n`ConnectTo`\n\n`AcceptTo` and `ConnectTo` are mirrored by the reciprocal option on the node `--tracer-socket-path-connect` / `--tracer-socket-path-accept`. If you choose one on the node, you choose the opposite on the tracer. This only makes a difference to which entity initiates the handshake; after the handshake the configuration is identical.\n\n`AcceptTo`\n`ConnectTo`\n`--tracer-socket-path-connect`\n`--tracer-socket-path-accept`\n\nSuppose you have 3 working nodes, and they are connected to the same `cardano-tracer`. And then you want to connect a 4th node to it. If `cardano-tracer` is configured using `AcceptAt`, you don't need to change its configuration - you just connect the additional node to it. But if `cardano-tracer` is configured using `ConnectTo`, you'll need to add a 4th socket path to its configuration file and restart the `cardano-tracer` process.\n\n`cardano-tracer`\n`cardano-tracer`\n`AcceptAt`\n`cardano-tracer`\n`ConnectTo`\n`cardano-tracer`\n\n### Network Magic[​](#network-magic \"Direct link to Network Magic\")\n\nThe field `networkMagic` specifies the value of network magic. It is an integer constant from the genesis file, the node uses this value for the network handshake with peers. Since `cardano-tracer` should be connected to the node, it needs that network magic.\n\n`networkMagic`\n`cardano-tracer`\n\nThe value from the example above, `764824073`, is taken from the Shelley genesis file for [Mainnet](https://book.world.dev.cardano.org/environments.html). Take this value from the genesis file your nodes are launched with.\n\n`764824073`\n\n### Requests[​](#requests \"Direct link to Requests\")\n\nThe optional field `loRequestNum` specifies the number of log items that will be requested from the node. For example, if `loRequestNum` is `10`, `cardano-tracer` will periodically ask 10 log items in one request. This value is useful for fine-tuning network traffic: it is possible to ask 50 log items in one request, or ask them in 50 requests one at a time. `loRequestNum` is the *maximum* number of log items. For example, if `cardano-tracer` requests 50 log items but the node has only 40 at that moment, these 40 items will be returned, the request won't block to wait for additional 10 items.\n\n`loRequestNum`\n`loRequestNum`\n`10`\n`cardano-tracer`\n`loRequestNum`\n`cardano-tracer`\n\nThe optional field `ekgRequestFreq` specifies the period of how often EKG metrics will be requested, in seconds. For example, if `ekgRequestFreq` is `10`, `cardano-tracer` will ask for new EKG metrics every ten seconds. There is no limit as `loRequestNum`, so every request returns *all* the metrics the node has *in this moment of time*.\n\n`ekgRequestFreq`\n`ekgRequestFreq`\n`10`\n`cardano-tracer`\n`loRequestNum`\n\nThe reliable default values are `loRequestNum: 100` and `ekgRequestFreq: 1`, which will be used when these fields are left out of your configuration file.\n\n`loRequestNum: 100`\n`ekgRequestFreq: 1`\n\n### Logging[​](#logging \"Direct link to Logging\")\n\nLogging is one of the most important features of `cardano-tracer`. The field `logging` describes logging parameters:\n\n`cardano-tracer`\n`logging`\n`\"logging\": [  \n {  \n \"logRoot\": \"/tmp/cardano-tracer-logs\",  \n \"logMode\": \"FileMode\",  \n \"logFormat\": \"ForMachine\"  \n }  \n]`\n\nThe field `logRoot` specifies the path to the root directory. This directory will contain all the subdirectories with the log files inside. Remember that each subdirectory corresponds to the particular node. If the root directory does not exist, it will be created.\n\n`logRoot`\n\nThis is an example of log structure:\n\n`/rootDir  \n /subdirForNode0  \n node-2021-11-25T10-06-52.json  \n node.json -> /rootDir/subdirForNode0/node-2021-11-25T10-06-52.json`\n\nIn this example, `subdirForNode0` is a subdirectory containing log files with items received from the node `0`. And `node-2021-11-25T10-06-52.json` is the *current* log: it means that currently `cardano-tracer` is writing items in this log file.\n\n`subdirForNode0`\n`0`\n`node-2021-11-25T10-06-52.json`\n`cardano-tracer`\n\nThe field `logMode` specifies logging mode. There are two possible modes: `FileMode` and `JournalMode`. `FileMode` is for storing logs to the files, `JournalMode` is for storing them in `systemd`'s journal. If you choose `JournalMode`, the field `logRoot` will be ignored.\n\n`logMode`\n`FileMode`\n`JournalMode`\n`FileMode`\n`JournalMode`\n`systemd`\n`JournalMode`\n`logRoot`\n\nThe field `logFormat` specifies the format of logs. There are two possible modes: `ForMachine` and `ForHuman`. `ForMachine` is for JSON format, `ForHuman` is for human-friendly text format.\n\n`logFormat`\n`ForMachine`\n`ForHuman`\n`ForMachine`\n`ForHuman`\n\n`logging` field accepts the list, so you can specify more than one logging section. For example, for both log formats:\n\n`logging`\n`\"logging\": [  \n {  \n \"logRoot\": \"/tmp/cardano-tracer-logs-json\",  \n \"logMode\": \"FileMode\",  \n \"logFormat\": \"ForMachine\"  \n },  \n {  \n \"logRoot\": \"/tmp/cardano-tracer-logs-text\",  \n \"logMode\": \"FileMode\",  \n \"logFormat\": \"ForHuman\"  \n }  \n]`\n\nIn this case log items will be written in JSON format (in `.json`-files) as well as in text format (in `.log`-files).\n\n`.json`\n`.log`\n\n### Logs Rotation[​](#logs-rotation \"Direct link to Logs Rotation\")\n\nAn optional field `rotation` describes parameters for log rotation. If you skip this field, all the log items will be stored in one single file, and usually it's not what you want. These are rotation parameters:\n\n`rotation`\n`\"rotation\": {  \n \"rpFrequencySecs\": 30,  \n \"rpKeepFilesNum\": 3,  \n \"rpLogLimitBytes\": 50000,  \n \"rpMaxAgeHours\": 1  \n}`\n\nThe field `rpFrequencySecs` specifies rotation period, in seconds. In this example, `rpFrequencySecs` is `30`, which means that rotation check will be performed every 30 seconds.\n\n`rpFrequencySecs`\n`rpFrequencySecs`\n`30`\n\nThe field `rpLogLimitBytes` specifies the maximum size of the log file, in bytes. In this example, `rpLogLimitBytes` is `50000`, which means that once the size of the current log file is 50 KB, a new log file will be created.\n\n`rpLogLimitBytes`\n`rpLogLimitBytes`\n`50000`\n\nThe field `rpKeepFilesNum` specifies the number of log files that will be kept. In this example, `rpKeepFilesNum` is `3`, which means that 3 *last* log files will always be kept.\n\n`rpKeepFilesNum`\n`rpKeepFilesNum`\n`3`\n\nThe fields `rpMaxAgeMinutes`, `rpMaxAgeHours` specify the lifetime of the log file, in minutes, or hours. If both fields are specified, `rpMaxAgeMinutes` takes precedence. In this example, `rpMaxAgeHours` is `1`, which means that each log file will be kept for 1 hour only. After that, the log file is considered outdated. N *last* log files (specified by `rpKeepFilesNum`) will be kept even if they are outdated. All other outdated files will be deleted by `cardano-tracer`.\n\n`rpMaxAgeMinutes`\n`rpMaxAgeHours`\n`rpMaxAgeMinutes`\n`rpMaxAgeHours`\n`1`\n`rpKeepFilesNum`\n`cardano-tracer`\n\n### Prometheus[\u0000\u0000​](#prometheus \"Direct link to Prometheus\")\n\nThe optional field `hasPrometheus` specifies the host and port of the web page with metrics. For example:\n\n`hasPrometheus`\n`\"hasPrometheus\": {  \n \"epHost\": \"127.0.0.1\",  \n \"epPort\": 3000  \n}`\n\nHere the web page is available at `http://127.0.0.1:3000`. If you skip this field, no Prometheus endpoint will be started.\n\n`http://127.0.0.1:3000`\n\nAfter you open `http://127.0.0.1:3000` in your browser, you will see the list of identifiers of connected nodes (or the warning message, if there are no connected nodes yet), for example:\n\n`http://127.0.0.1:3000`\n`* KindStar_3001`\n\nThis identifier corresponds to the `TraceOptionNodeName` in the node config, or the fallback `<hostname>_<node port>` if no such value is provided.\n\n`TraceOptionNodeName`\n`<hostname>_<node port>`\n\nEach identifier is a hyperlink to the page where you will see the **current** list of metrics received from the corresponding node, in such a format:\n\n`# TYPE Mem_resident_int gauge  \n# HELP Mem_resident_int Kernel-reported RSS (resident set size)  \nMem_resident_int 103792640  \n# TYPE rts_gc_max_bytes_used gauge  \nrts_gc_max_bytes_used 5811512  \n# TYPE rts_gc_gc_cpu_ms counter  \nrts_gc_gc_cpu_ms 50  \n# TYPE RTS_gcMajorNum_int gauge  \n# HELP RTS_gcMajorNum_int Major GCs  \nRTS_gcMajorNum_int 4  \n# TYPE rts_gc_num_bytes_usage_samples counter  \nrts_gc_num_bytes_usage_samples 4  \n# TYPE remainingKESPeriods_int gauge  \nremainingKESPeriods_int 62  \n# TYPE rts_gc_bytes_copied counter  \nrts_gc_bytes_copied 17114384`\n\nThat page from the example can of course be directly accessed by `http://127.0.0.1:3000/kindstar-3001`.\n\n`http://127.0.0.1:3000/kindstar-3001`\n\n### EKG Monitoring[​](#ekg-monitoring \"Direct link to EKG Monitoring\")\n\nThe optional field `hasEKG` specifies the host and port of the web\npage with EKG metrics. For example:\n\n`hasEKG`\n`\"hasEKG\": {  \n \"epHost\": \"127.0.0.1\",  \n \"epPort\": 3100  \n}`\n\nJust as with Prometheus, the root path `/` on EKG shows a list of connected nodes. The response is either human-readable names (HTML) with clickable\nlinks, or JSON mapping from connected node names to relative URLs,\ndepending on desired content type (`Accept:` header of the request).\n\n`/`\n`Accept:`\n\nThe URL routes dynamically depend on the connected nodes *in this moment of time*; the node names\nare [sluggified](https://hackage.haskell.org/package/slugify).\n\nFor a node with a specified name in its configuration:\n\n`{   \n TraceOptionNodeName: \"foo-node\"  \n}`\n\nand another connection that does not specify a node name, the list of clickable identifiers of connected\nnodes will be available at `http://127.0.0.1:3100` as:\n\n`http://127.0.0.1:3100`\n`* foo-node  \n* KindStar_3001`\n\nJust as with Prometheus, the fallback for `TraceOptionNodeName` is `<hostname>_<node port>`.\n\n`TraceOptionNodeName`\n`<hostname>_<node port>`\n\nClicking an identifier will take you to its monitoring page. Clicking\non `foo-node` (`http://localhost:3100/foo-node`) and `KindStar_3001` (`127.0.0.1:3100/kindstar-3001`) takes you to the\nrespective metrics monitoring.\n\n`foo-node`\n`http://localhost:3100/foo-node`\n`KindStar_3001`\n`127.0.0.1:3100/kindstar-3001`\n\nSending a HTTP GET request with a JSON Accept header gives the metrics\nof an identifier as JSON. `jq '.'` pretty-prints the JSON object.\n\n`jq '.'`\n`$ curl --silent -H 'Accept: application/json' '127.0.0.1:3100/kindstar-3001' | jq '.'  \n{  \n \"Mem\": {  \n \"resident_int\": {  \n \"type\": \"g\",  \n \"val\": 790822912  \n }  \n },  \n \"RTS\": {  \n \"alloc_int\": {  \n \"type\": \"g\",  \n \"val\": 159054205680  \n },  \n \"gcHeapBytes_int\": {  \n \"type\": \"g\",  \n \"val\": 750780416  \n[...]`\n\n### Verbosity[​](#verbosity \"Direct link to Verbosity\")\n\n`{  \n \"networkMagic\": ..,  \n ..   \n \"verbosity\": \"ErrorsOnly\"  \n}`\n\nThe `verbosity` field (optional) specifies the verbosity level for the `cardano-tracer` itself. There are 3 levels:\n\n`verbosity`\n`cardano-tracer`\n`Minimum`\n`cardano-tracer`\n`ErrorsOnly`\n`Maximum`\n\nIf you skip this field, `ErrorsOnly` verbosity will be used by default.\n\n`ErrorsOnly`",
  "images": [],
  "extraction_metadata": {
    "batch_number": 9,
    "extraction_timestamp": "2025-09-19T14:05:00.496633",
    "extraction_time": 2.430634021759033,
    "source": "tavily_api_raw"
  }
}