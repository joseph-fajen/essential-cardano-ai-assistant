{
  "url": "https://developers.cardano.org/docs/integrate-cardano/exchange-integrations",
  "content": "![Cardano Logo](/img/cardano-black.svg)\n![Cardano Logo](/img/cardano-white.svg)\n\n# Exchange Integrations\n\n## Overview[‚Äã](#overview \"Direct link to Overview\")\n\nThis guide is for exchanges, custodians, and other entities interested in or currently listing ada or Cardano native tokens. It outlines the main available components for integration purposes, providing step-by-step instructions and best practices.\n\n## Understanding Cardano's Accounting Model[‚Äã](#understanding-cardanos-accounting-model \"Direct link to Understanding Cardano's Accounting Model\")\n\nCardano utilizes the Extended UTXO (eUTXO) model for its accounting system, which extends the UTXO design to support multi-assets and smart contracts.\nIn this model, each transaction consists of inputs and outputs, where inputs represent unspent outputs from previous transactions. This ensures that all assets recorded on the ledger are represented as unspent outputs, enabling efficient and secure transaction processing.\n\n## Integration Components[‚Äã](#integration-components \"Direct link to Integration Components\")\n\nRosetta specification does not include transaction signing capabilities. This is done in a separate offline service for best security practices using any signing libraries available. See example using [CSL](https://github.com/Emurgo/cardano-serialization-lib/blob/master/doc/getting-started/singing_rosetta_tx.ts).  \nFor creating addresses, [cardano-addresses](https://github.com/IntersectMBO/cardano-addresses) provides mnemonic (backup phrase) creation, and conversion of a mnemonic to seed for wallet restoration, and address derivation functionalities. This can also be achieved using other libraries like [cardano-serialization-lib](https://github.com/Emurgo/cardano-serialization-lib)\n\n[**cardano-graphql**](https://github.com/cardano-foundation/cardano-graphql): GraphQL API for querying blockchain data.\n\n[**cardano-wallet**](https://github.com/cardano-foundation/cardano-wallet): Backend service providing APIs for wallet operations.\n\nDoes not support offline transaction signing; all keys are exposed online.  \nCardano Wallet is currently in maintenance-only mode. The Cardano Foundation is committed to maintaining it for the foreseeable future by upgrading to new versions of the cardano-node, fixing bugs, improving quality and stability of both the code and server stability, plus providing general user support.\n\n[**cardano-db-sync**](https://github.com/IntersectMBO/cardano-db-sync): Syncs blockchain data to a PostgreSQL database.\n\n[**cardano-node**](https://github.com/IntersectMBO/cardano-node): The core component for participating in the Cardano decentralized blockchain.\n\n[**Cardano token registry**](https://developers.cardano.org/docs/native-tokens/cardano-token-registry/): Local metadata server to manage off-chain token metadata for native assets on Cardano.\n\n## Wallet Management[‚Äã](#wallet-management \"Direct link to Wallet Management\")\n\n### Address Handling[‚Äã](#address-handling \"Direct link to Address Handling\")\n\nA common and effective approach for exchanges integrating with Cardano involves using individual deposit addresses per customer and managing withdrawals from a centralized wallet. This model enables clear tracking, simplifies auditing, and enhances security and operational control.\n\nThe typical workflow is as follows:\n\n**Address Creation** - The exchange generates a unique deposit address for each customer using [cardano-address](https://github.com/IntersectMBO/cardano-addresses)\n\n**Deposit Monitoring** - The exchange continuously monitors the blockchain for incoming transactions to these addresses.\n\n**Customer Account Update** - Upon detecting a deposit, the exchange credits the corresponding customer account in its internal database.\n\n**Consolidation of Funds** - The exchange periodically moves funds from individual deposit addresses to a centralized withdrawal wallet by creating and submitting a transaction. This consolidation step simplifies fund management and improves operational efficiency.\n\n**Withdrawals** - When a customer requests a withdrawal, the exchange creates an outgoing transaction from the centralized withdrawal wallet and updates the customer's account in the internal database to reflect the withdrawal.\n\n## Transaction Handling[‚Äã](#transaction-handling \"Direct link to Transaction Handling\")\n\n### Creation and Submission[‚Äã](#creation-and-submission \"Direct link to Creation and Submission\")\n\nCardano offers multiple tools for transaction creation and submission, each designed to suit different integration architectures. The choice of tool depends on your infrastructure, security model, and level of control required. Most tools also support **fee estimation**, either explicitly or as part of the transaction construction process.\n\n| Tool | Create | Sign | Submit | Notes |\n| --- | --- | --- | --- | --- |\n| [`cardano-wallet`](https://github.com/cardano-foundation/cardano-wallet) | ‚úÖ | ‚úÖ | ‚úÖ | Full-featured REST API with built-in fee calculation and UTxO management. |\n| [`cardano-rosetta`](https://github.com/cardano-foundation/cardano-rosetta-java) | ‚úÖ | ‚ùå | ‚úÖ | Rosetta does not handle key management or signing. Transactions must be signed offline. |\n| [`cardano-serialization-lib`](https://github.com/Emurgo/cardano-serialization-lib) | ‚úÖ | ‚úÖ | ‚ùå | Low-level library for custom workflows. Commonly used with `cardano-submit-api` for submission. |\n| [`cardano-submit-api`](https://github.com/IntersectMBO/cardano-node/tree/master/cardano-submit-api) | ‚ùå | ‚ùå | ‚úÖ | Lightweight API for submitting signed transactions to a Cardano node. |\n\n`cardano-wallet`\n`cardano-rosetta`\n`cardano-serialization-lib`\n`cardano-submit-api`\n`cardano-submit-api`\n\nThe best practice for exchanges is to use `cardano-rosetta` for transaction construction and submission, and sign the transaction using signing libraries of their choice such as `cardano-serialization-lib`.\n\n`cardano-rosetta`\n`cardano-serialization-lib`\n\n### Fee Calculation[‚Äã](#fee-calculation \"Direct link to Fee Calculation\")\n\nThe formula for calculating minimal fees for a transaction (tx) is:\n\n`a * size(tx) + b`\n\nWhere:\n\n`a`\n`b`\n`size(tx)`\n\n### Monitoring Transactions[‚Äã](#monitoring-transactions \"Direct link to Monitoring Transactions\")\n\nOnce transactions are submitted to the Cardano network, exchanges must monitor their status to ensure successful inclusion in a block and confirmation over time. This step is critical for updating customer balances, handling retries, and maintaining overall system integrity.\n\nSeveral tools and interfaces are available to support transaction monitoring:\n\n| Tool | Monitoring Capability | Notes |\n| --- | --- | --- |\n| [`cardano-rosetta-java`](https://github.com/cardano-foundation/cardano-rosetta-java) | ‚úÖ Transaction status and block inclusion | Suitable for exchanges using the [Rosetta API](https://cardano-foundation.github.io/cardano-rosetta-java/api#tag/block) standard. Supports structured responses for [Account Balance](https://cardano-foundation.github.io/cardano-rosetta-java/api#tag/account/POST/account/balance) updates and transaction queries. |\n| [`cardano-graphql`](https://github.com/cardano-foundation/cardano-graphql) | ‚úÖ Rich query support for entire blockchain data | Useful for querying confirmations, transaction metadata, and UTxO states using GraphQL. Cross-platform, typed, and queryable API for Cardano. |\n| [`cardano-wallet`](https://github.com/cardano-foundation/cardano-wallet) | ‚úÖ Built-in tracking for submitted transactions | Automatically tracks transaction state, confirmation depth, and balances. Exposes these via a REST API. |\n\n`cardano-rosetta-java`\n`cardano-graphql`\n`cardano-wallet`\n\nAdditional considerations:\n\n## Native Assets[‚Äã](#native-assets \"Direct link to Native Assets\")\n\nCardano supports **native assets** that can be stored and transferred directly in UTxOs alongside ada. These assets can be **fungible** (tokens) or **non-fungible** (NFTs), and are handled **natively by the ledger** without smart contracts.\n\nNative assets follow the same transaction and validation rules as ada and are treated as first-class citizens in the Cardano ledger.\n\n#### Why This Matters for Exchanges[‚Äã](#why-this-matters-for-exchanges \"Direct link to Why This Matters for Exchanges\")\n\n### Working with Native Assets[‚Äã](#working-with-native-assets \"Direct link to Working with Native Assets\")\n\nUse tools like [`cardano-rosetta-java`](https://github.com/cardano-foundation/cardano-rosetta-java) or [`cardano-graphql`](https://github.com/cardano-foundation/cardano-graphql) to track native assets across UTxOs. These tools allow you to:\n\n`cardano-rosetta-java`\n`cardano-graphql`\n\nüîó **See also:** [Using multi-assets with Rosetta](https://cardano-foundation.github.io/cardano-rosetta-java/docs/user-guides/multi-assets)\n\n### Cardano Token Registry[‚Äã](#cardano-token-registry \"Direct link to Cardano Token Registry\")\n\nThe **Cardano Token Registry** provides a way to register **off-chain metadata** for native assets on Cardano. This metadata is used by wallets, explorers, and exchanges to display human-readable and visual information about tokens.\n\nRegistered metadata includes:\n\nThis makes it easier for users and systems to interpret tokens consistently across the ecosystem.\n\nThe Cardano Token Registry data is included **by default** when using [`cardano-graphql`](https://github.com/input-output-hk/cardano-graphql), so exchanges using it can access token metadata without additional integration.\n\n`cardano-graphql`\n\nYou can also self-host the token registry using the official GitHub repository:\n\nüîó [cf-token-metadata-registry ‚Äì GitHub](https://github.com/cardano-foundation/cf-token-metadata-registry)\n\nAlways check and validate the **decimal places** of a token using the registry to ensure accurate accounting and display of fractional amounts.\n\n### Minimum ada Requirement for Native Assets[‚Äã](#minimum-ada-requirement-for-native-assets \"Direct link to Minimum ada Requirement for Native Assets\")\n\nEvery output must contain enough ada - the amount of ada depends on the **byte-size of the output**. This includes both the output being created and any change remaining.\n\nThe minimum ada calculation is **simplified** (CIP-55) to be more transparent and predictable:\n\n**Current Formula:** `(160 + |serialized_output|) * coinsPerUTxOByte`\n\n`(160 + |serialized_output|) * coinsPerUTxOByte`\n\nWhere:\n\n`160`\n`|serialized_output|`\n`coinsPerUTxOByte`\n`coinsPerUTxOWord`\n\n**Key Improvements:**\n\nWhen a UTxO contains **native tokens (fungible or NFTs)**, the serialized output is larger due to:\n\nAs these grow, so does the minimum ADA needed.\n\nTransactions failing to meet the minimum ada requirement will be rejected by the network.\n\nüîó **References**:\n\n#### Exchange Implementation Approaches[‚Äã](#exchange-implementation-approaches \"Direct link to Exchange Implementation Approaches\")\n\n**Deposits:**\n\n**Withdrawals:**\nChoose one approach:\n\n#### Practical Examples (for simpler calculation fees are not considered)[‚Äã](#practical-examples-for-simpler-calculation-fees-are-not-considered \"Direct link to Practical Examples (for simpler calculation fees are not considered)\")\n\n**Example 1: Token deposit**\n\n`User deposits: 1000 MyToken + 2.5 ada  \nMinimum required: 1.25 ada  \nExchange credits:  \n - MyToken: 1000  \n - ada: 2.5 (including 1 ada excess)`\n\n**Example 2: Direct token Buy (user deposit address has ada more than minimum required)**\n\n`User buy request: 1000 MyToken  \nMinimum required: 1.25 ada  \nExchange credits:  \n - MyToken: 1000  \n - ada: Use the ada from the user deposit address and create new utxos with ada + MyToken`\n\n**Example 3: Direct token Buy (user deposit address has no ada)**\n\n`User buy request: 1000 MyToken [conversion value: 1 ada ==> 100 MyToken]  \nMinimum required: 1.25 ada  \nExchange credits:  \n - MyToken: 875  \n - ada: 1.25 ada`\n\n**Example 4: Token withdrawal (user deposit address has ada more than minimum required)**\n\n`User withdraw request: 1000 MyToken  \nMinimum required: 1.25 ada  \nExchange debited:  \n - MyToken: 1000  \n - ada: 1.25 ada attached with utxo`\n\n**Example 5: Token withdrawal (user deposit address has no ada)**\n\n`User withdraw request: 1000 MyToken [conversion value: 1 ada ==> 100 MyToken]  \nMinimum required: 1.25 ada  \nExchange debited:  \n - MyToken: 875  \n - ada: 1.25 ada attached with utxo`\n\n**Calculation Methods:**\n\n`cardano-serialization-lib`\n\nWith the new CIP-55 formula, dynamic calculation is now much simpler and more predictable than before. Consider implementing it instead of fixed allocations for better efficiency.\n\n## Explorers[‚Äã](#explorers \"Direct link to Explorers\")\n\nAll available explorers can be found [here](https://explorer.cardano.org).\n\n## Handling Upgrades[‚Äã](#handling-upgrades \"Direct link to Handling Upgrades\")\n\n### Upgrade Process[‚Äã](#upgrade-process \"Direct link to Upgrade Process\")\n\n**Docker:**\n\n**Binaries:**\n\n### Reliability of Upgrades[‚Äã](#reliability-of-upgrades \"Direct link to Reliability of Upgrades\")\n\nAdopting a multi-environment strategy is essential for ensuring reliable and safe upgrades. Deploying changes first to a staging or pre-production environment allows for thorough validation before promotion to production.  \nImplementing Infrastructure as Code (IaC) alongside CI/CD pipelines significantly reduces the risk of human error and enables consistent, repeatable deployments.  \nTo further enhance uptime and availability, it's recommended to maintain multiple instances of critical components. This ensures that a fully functional stack remains available during upgrades, minimizing or eliminating service interruptions.\n\n### Testing Environment[‚Äã](#testing-environment \"Direct link to Testing Environment\")\n\nRunning a dedicated testnet environment is highly recommended for exchanges to ensure robust testing and validation, especially when dealing with complex logic or preparing for events like hard forks.  \nTestnets offer a safer and more flexible space to simulate real-world scenarios without risking production stability. They also require significantly less hardware and offer faster sync times compared to mainnet, making them ideal for continuous integration and testing workflows.  \nThere are two testnet environments:\n\nFaucets for [Test ada](https://docs.cardano.org/cardano-testnets/tools/faucet)\n\n### Compatibility[‚Äã](#compatibility \"Direct link to Compatibility\")\n\n## Support and Resources[‚Äã](#support-and-resources \"Direct link to Support and Resources\")",
  "images": [],
  "extraction_metadata": {
    "batch_number": 7,
    "extraction_timestamp": "2025-09-19T14:04:49.862174",
    "extraction_time": 2.4011168479919434,
    "source": "tavily_api_raw"
  }
}