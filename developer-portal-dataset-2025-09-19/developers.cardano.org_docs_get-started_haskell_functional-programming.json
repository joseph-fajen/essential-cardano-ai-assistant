{
  "url": "https://developers.cardano.org/docs/get-started/haskell/functional-programming",
  "content": "![Cardano Logo](/img/cardano-black.svg)\n![Cardano Logo](/img/cardano-white.svg)\n\n# Functional Programming in Haskell\n\nThis is an introductory course on functional programming in Haskell. It is designed for first year computing students in Nottingham, but the lectures are also made available on [YouTube](http://tinyurl.com/haskell-notts2).\n\nThe course is based on part I of [Programming in Haskell](http://people.cs.nott.ac.uk/pszgmh/pih.html).  \nIt is recommended for following the course, to purchase the below textbook, watch the youtube videos, slides are provided below to follow along, and then to try out to programming examples with resources below as well.   \nAll resources and links are provided at the bottom of the page.  \n  \nAll credit goes to the [Graham Hutton](https://people.cs.nott.ac.uk/pszgmh/), University of Nottingham.\n\n## What This Course Covers[​](#what-this-course-covers \"Direct link to What This Course Covers\")\n\nThe course is based on *Part I* of Graham Hutton’s textbook **Programming in Haskell** and introduces foundational topics such as:\n\nThe full lecture series is available **free on YouTube**, accompanied by slides and example code.\n\n## Step-by-Step Learning Path[​](#step-by-step-learning-path \"Direct link to Step-by-Step Learning Path\")\n\n### Step 1: Bookmark the Main Page[​](#step-1-bookmark-the-main-page \"Direct link to Step 1: Bookmark the Main Page\")\n\nThis is your hub. It includes the video lectures, downloadable slides, and example code.\n\n### Step 2: Watch Lectures in Order[​](#step-2-watch-lectures-in-order \"Direct link to Step 2: Watch Lectures in Order\")\n\nEach lecture builds on the last. Follow the sequence exactly:\n\n### Step 3: Read the Book (Optional but Helpful)[​](#step-3-read-the-book-optional-but-helpful \"Direct link to Step 3: Read the Book (Optional but Helpful)\")\n\n*Programming in Haskell* (2nd edition) fills in background and provides exercises not covered in the videos.\n\nUse it to:\n\n### Step 4: Code Along with Examples[​](#step-4-code-along-with-examples \"Direct link to Step 4: Code Along with Examples\")\n\nDownload the example code (linked on the course site) and run them in your local Haskell environment or an online interpreter like [replit](https://replit.com/) or [Try Haskell](https://tryhaskell.org/).\n\nExperiment with:\n\n### Step 5: Do the Exercises[​](#step-5-do-the-exercises \"Direct link to Step 5: Do the Exercises\")\n\nSome lectures include hands-on exercises (especially Recursion and IO). Try solving them yourself before checking any solutions.\n\n### Tools You’ll Need[​](#tools-youll-need \"Direct link to Tools You’ll Need\")\n\n### Tips for Success[​](#tips-for-success \"Direct link to Tips for Success\")\n\n### Bonus: What to Do After This Course[​](#bonus-what-to-do-after-this-course \"Direct link to Bonus: What to Do After This Course\")\n\nOnce you’ve finished:\n\n### Lectures[​](#lectures \"Direct link to Lectures\")\n\n*Additional material:*\n\n### Resources[​](#resources \"Direct link to Resources\")",
  "images": [],
  "extraction_metadata": {
    "batch_number": 5,
    "extraction_timestamp": "2025-09-19T14:04:40.000976",
    "extraction_time": 1.9930140972137451,
    "source": "tavily_api_raw"
  }
}