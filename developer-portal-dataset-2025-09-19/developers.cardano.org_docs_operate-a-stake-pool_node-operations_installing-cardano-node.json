{
  "url": "https://developers.cardano.org/docs/operate-a-stake-pool/node-operations/installing-cardano-node",
  "content": "![Cardano Logo](/img/cardano-black.svg)\n![Cardano Logo](/img/cardano-white.svg)\n\n# Getting `cardano-node`\n\n`cardano-node`\n\nBinaries for the **latest** version of the node may be downloaded from the [cardano-node GitHub Releases](https://github.com/intersectmbo/cardano-node/releases) page.\n\nAlternatively, one can build `cardano-node` from source code locally.\n\n`cardano-node`\n\n## Building from source[​](#building-from-source \"Direct link to Building from source\")\n\nThe preferred way of building `cardano-node` is via Nix, but the node is\nbuildable also using standard Haskell tools after setting up the building\nenvironment.\n\n`cardano-node`\n\n### Hardware requirements[​](#hardware-requirements \"Direct link to Hardware requirements\")\n\nTo set up your platform, you will need:\n\n| Network | CPU Cores | Free RAM | Free storage | OS for Pasive Node | OS for Stake pool |\n| --- | --- | --- | --- | --- | --- |\n| Mainnet | 2 | 24GB | 300GB of free storage (350GB recommended for future growth) | Linux / Windows / MacOS | Linux |\n| Testnet | 2 | 4GB | 20GB | Linux / Windows / MacOS | Linux |\n\n### Building via Nix[​](#building-via-nix \"Direct link to Building via Nix\")\n\nHaving [Git](https://git-scm.com/) and [Nix](https://nixos.org/download/) installed on your system, run the following command to get a built `cardano-node`:\n\n`cardano-node`\n`git clone https://github.com/IntersectMBO/cardano-node  \ncd cardano-node  \ngit tag | sort -V  \ngit switch -d tags/<TAGGED VERSION>  \nnix build .#cardano-node`\n\nAlternatively you can build a node without manually cloning the repository with:\n\n`nix build github:IntersectMBO/cardano-node/<TAGGED VERSION>`\n\nConsider setting up the IOG binary cache in order to avoid building the universe locally on your machine. See the [IOGX](https://github.com/input-output-hk/iogx/blob/main/doc/nix-setup-guide.md) template documentation for more information.\n\n### Building via `cabal`[​](#building-via-cabal \"Direct link to building-via-cabal\")\n\n`cabal`\n\nTo download the source code and build it, you need the following packages and\ntools on your system:\n\n`git`\n`gcc`\n`clang`\n`gmp`\n`zlib`\n`systemd`\n`ncurses`\n`lmdb`\n`openssl`\n`ncurses`\n`cabal`\n`3.10.2.0`\n`9.6.7`\n\n#### System libraries[​](#system-libraries \"Direct link to System libraries\")\n\n`sudo apt-get update -y  \nsudo apt-get install automake build-essential pkg-config libffi-dev libgmp-dev libssl-dev libncurses-dev libsystemd-dev zlib1g-dev make g++ tmux git jq wget libtool autoconf liblmdb-dev -y`\n`sudo yum update -y  \nsudo yum install git gcc gcc-c++ tmux gmp-fdevel make tar xz wget zlib-devel libtool autoconf -y  \nsudo yum install systemd-devel ncurses-devel ncurses-compat-libs which jq openssl-devel lmdb-devel -y`\n\nYou'll need the following packages and tools on your MacOS system:\n\n`xcode-select --install`\n\nThen using homebrew install the following:\n\n`brew install jq libtool autoconf automake pkg-config openssl`\n\nYou will need to install llvm in case you are using M1\n\n`brew install llvm@13`\n\nThese instructions might fall out of date unnoticed given the fact that the user base on Windows is small. If you find something is off, please submit a PR.\n\nGit can be installed via [chocolatey](https://community.chocolatey.org/) (via `choco install git`) or [Scoop](https://scoop.sh) (via `scoop install git`).\n\n`choco install git`\n`scoop install git`\n\nUsing [Winget](https://winget.run/) will install [Git for Windows](https://gitforwindows.org/) which might be confusing as it works in an environment separate from MSYS2. It is perfectly possible to use this git but things can become confusing.\n\nThe rest of the libraries will be installed inside MSYS2, for whichever [environment](https://www.msys2.org/docs/environments/) you choose to use. As GHC on Windows switched to `clang` it seems acceptable to recommend using `CLANG64` environment, but others might also work.\n\n`clang`\n`CLANG64`\n\nGHCup offers installing a MSYS2 environment local to the Haskell installation, just by running the command on [GHCup's front page](https://www.haskell.org/ghcup/). It also can work with an existing system-wide [MSYS2](https://www.msys2.org/) installation if using the following command (just adding a couple of parameters to the invocation of the bootstrap script. If you installed it somewhere else than `C:\\msys64` modify the parameter accordingly):\n\n`C:\\msys64`\n`Set-ExecutionPolicy Bypass -Scope Process -Force;[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072;  \ntry { & ([ScriptBlock]::Create((Invoke-WebRequest https://www.haskell.org/ghcup/sh/bootstrap-haskell.ps1 -UseBasicParsing))) -Interactive -DisableCurl -ExistingMsys2Dir C:\\msys64 -Msys2Env CLANG64 } catch { Write-Error $_ }`\n\nOnce an MSYS2 environment is installed we should install the following packages via `pacman` (note that you will have to prefix the `pacman` invocation with `ghcup run --mingw-path --` if using the GHCup MSYS2):\n\n`pacman`\n`pacman`\n`ghcup run --mingw-path --`\n`pacman -S autoconf autotools ca-certificates mingw-w64-clang-x86_64-toolchain mingw-w64-clang-x86_64-gmp mingw-w64-clang-x86_64-libtool mingw-w64-clang-x86_64-libffi mingw-w64-clang-x86_64-openssl mingw-w64-clang-x86_64-zlib mingw-w64-clang-x86_64-lmdb`\n\n#### Installing the Haskell environment[​](#installing-the-haskell-environment \"Direct link to Installing the Haskell environment\")\n\nThe recommended way to install the Haskell tools is via [GHCup](https://www.haskell.org/ghcup/). Its installation script will guide you through the installation, and warn you about packages that you have to make sure are installed in the system (the ones described on the step above). Check [this page](https://www.haskell.org/ghcup/install/) for further explanation on the installation process.\n\nOn Windows, we discussed how to install GHCup in the step above, depending on how you want to install MSYS2.\n\nOnce GHCup is installed, open a new terminal (to get an updated environment) and run:\n\n`ghcup install --set ghc 9.6.7  \nghcup install --set cabal 3.12.1.0`\n\nAlternatively, with `ghcup tui` you can pick the specific versions of the tools that you want to install, in particular you should have installed and set:\n\n`ghcup tui`\n`cabal >= 3.12.1.0`\n`GHC >= 9.6.7`\n\nTo check that you will use the GHCup tools (and not any other installation on the system), you can execute\n\n`which cabal`\n\nand it should return a path of this shape: `/home/<user>/.ghcup/bin/cabal`.\n\n`/home/<user>/.ghcup/bin/cabal`\n\n#### Dependencies required to be at specific versions[​](#dependencies-required-to-be-at-specific-versions \"Direct link to Dependencies required to be at specific versions\")\n\nPre-built libraries can be downloaded from iohk-nix releases, following what is done [in the base CI Github Action](https://github.com/input-output-hk/actions/blob/latest/base/action.yml).\n\nIn particular for Windows this is probably the easiest method. Note you will need to set these variables in your `.bashrc` or whatever you use to source your shell:\n\n`.bashrc`\n`export PKG_CONFIG_PATH=/mingw64/opt/cardano/lib/pkgconfig:$PKG_CONFIG_PATH  \nexport LD_LIBRARY_PATH=/mingw64/opt/cardano/bin:$LD_LIBRARY_PATH  \nexport PATH=/mingw64/opt/cardano/bin:$PATH`\n\nDecide which version of Cardano Node you will be installing.\nA list of available tags is available at: <https://github.com/IntersectMBO/cardano-node/tags>.\nSet the environment variable to the tag you selected (or use `master` for the latest unstable version):\n\n`master`\n`CARDANO_NODE_VERSION='10.3.1'  \nIOHKNIX_VERSION=$(curl https://raw.githubusercontent.com/IntersectMBO/cardano-node/$CARDANO_NODE_VERSION/flake.lock | jq -r '.nodes.iohkNix.locked.rev')  \necho \"iohk-nix version: $IOHKNIX_VERSION\"`\n\nThe variable `IOHKNIX_VERSION` will be used going forward to retrieve the correct versions of `sodium`, `secp256k1` and `blst`.\n\n`IOHKNIX_VERSION`\n`sodium`\n`secp256k1`\n`blst`\n\nMake sure that `secp256k1`, `sodium` and `blst` versions match flake input version in [`iohkNix`](https://github.com/input-output-hk/iohk-nix/blob/master/flake.nix#L14) for a particular node version used.\n\n`secp256k1`\n`sodium`\n`blst`\n`iohkNix`\n\n##### Installing \"sodium\"[​](#installing-sodium \"Direct link to Installing \\\"sodium\\\"\")\n\nCardano uses a custom fork of `sodium` which exposes some internal functions\nand adds some other new functions. This fork lives in\n<https://github.com/intersectmbo/libsodium>.\nUsers need to install that custom version of `sodium` with the following steps.\n\n`sodium`\n`sodium`\n\nCreate a working directory for your builds:\n\n`mkdir -p ~/src  \ncd ~/src`\n\nFind out the correct `sodium` version for your build:\n\n`sodium`\n`SODIUM_VERSION=$(curl https://raw.githubusercontent.com/input-output-hk/iohk-nix/$IOHKNIX_VERSION/flake.lock | jq -r '.nodes.sodium.original.rev')  \necho \"Using sodium version: $SODIUM_VERSION\"`\n\nDownload and install `sodium`:\n\n`sodium`\n`: ${SODIUM_VERSION:='dbb48cc'}  \ngit clone https://github.com/intersectmbo/libsodium  \ncd libsodium  \ngit checkout $SODIUM_VERSION  \n./autogen.sh  \n./configure  \nmake  \nmake check  \nsudo make install`\n\nAdd the following to your `~/.bashrc` file and source it (or re-open the terminal):\n\n`~/.bashrc`\n`export LD_LIBRARY_PATH=\"/usr/local/lib:$LD_LIBRARY_PATH\"  \nexport PKG_CONFIG_PATH=\"/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH\"`\n\nFor some distributions you will also need to configure the dynamic linker. If\nthe executable is linked with the right `libsodium.so` file (which you can\ncheck by running `ldd`), the running binary might still use the wrong library.\nYou can check this by running `pldd`. If the `pldd` shows that the running executable\nis using the wrong library, run `ldconfig`.\n\n`libsodium.so`\n`ldd`\n`pldd`\n`pldd`\n`ldconfig`\n\n##### Installing `secp256k1`[​](#installing-secp256k1 \"Direct link to installing-secp256k1\")\n\n`secp256k1`\n\nFind out the correct `secp256k1` version:\n\n`secp256k1`\n`SECP256K1_VERSION=$(curl https://raw.githubusercontent.com/input-output-hk/iohk-nix/$IOHKNIX_VERSION/flake.lock | jq -r '.nodes.secp256k1.original.ref')  \necho \"Using secp256k1 version: ${SECP256K1_VERSION}\"`\n\nDownload and install `secp256k1`:\n\n`secp256k1`\n`: ${SECP256K1_VERSION:='v0.3.2'}  \ngit clone --depth 1 --branch ${SECP256K1_VERSION} https://github.com/bitcoin-core/secp256k1  \ncd secp256k1  \n./autogen.sh  \n./configure --enable-module-schnorrsig --enable-experimental  \nmake  \nmake check  \nsudo make install`\n\n##### Installing `blst`[​](#installing-blst \"Direct link to installing-blst\")\n\n`blst`\n\nFind out the correct `blst` version:\n\n`blst`\n`BLST_VERSION=$(curl https://raw.githubusercontent.com/input-output-hk/iohk-nix/$IOHKNIX_VERSION/flake.lock | jq -r '.nodes.blst.original.ref')  \necho \"Using blst version: ${BLST_VERSION}\"`\n\nDownload and install `blst` so that `cardano-base` can pick it up (assuming that `pkg-config` is installed):\n\n`blst`\n`cardano-base`\n`pkg-config`\n`: ${BLST_VERSION:='v0.3.11'}  \ngit clone --depth 1 --branch ${BLST_VERSION} https://github.com/supranational/blst  \ncd blst  \n./build.sh  \ncat > libblst.pc << EOF  \nprefix=/usr/local  \nexec_prefix=\\${prefix}  \nlibdir=\\${exec_prefix}/lib  \nincludedir=\\${prefix}/include  \n  \nName: libblst  \nDescription: Multilingual BLS12-381 signature library  \nURL: https://github.com/supranational/blst  \nVersion: ${BLST_VERSION#v}  \nCflags: -I\\${includedir}  \nLibs: -L\\${libdir} -lblst  \nEOF  \nsudo cp libblst.pc /usr/local/lib/pkgconfig/  \nsudo cp bindings/blst_aux.h bindings/blst.h bindings/blst.hpp /usr/local/include/  \nsudo cp libblst.a /usr/local/lib  \nsudo chmod u=rw,go=r /usr/local/{lib/{libblst.a,pkgconfig/libblst.pc},include/{blst.{h,hpp},blst_aux.h}}`\n\n#### Installing the node[​](#installing-the-node \"Direct link to Installing the node\")\n\n##### Downloading the source code for cardano-node[​](#downloading-the-source-code-for-cardano-node \"Direct link to Downloading the source code for cardano-node\")\n\nCreate a working directory for your builds:\n\n`mkdir -p ~/src  \ncd ~/src`\n\nDownload the Cardano node sources:\n\n`git clone https://github.com/intersectmbo/cardano-node.git`\n\nChange the working directory to the downloaded source code folder:\n\n`cd cardano-node`\n\nCheck out the latest version of cardano-node (choose the tag with the highest version number: `TAGGED-VERSION`):\n\n`TAGGED-VERSION`\n`git tag | sort -V  \ngit switch -d tags/<TAGGED VERSION>`\n\n##### Configuring the build options[​](#configuring-the-build-options \"Direct link to Configuring the build options\")\n\nWe explicitly use the GHC version that we installed earlier. This avoids defaulting to a system version of GHC that might be different than the one you have installed.\n\n`echo \"with-compiler: ghc-9.6.7\" >> cabal.project.local`\n\nYou will need to run following commands on M1, those commands will set some cabal related options before building\n\n`echo \"package trace-dispatcher\" >> cabal.project.local  \necho \" ghc-options: -Wwarn\" >> cabal.project.local  \necho \"\" >> cabal.project.local  \n  \necho \"package HsOpenSSL\" >> cabal.project.local  \necho \" flags: -homebrew-openssl\" >> cabal.project.local  \necho \"\" >> cabal.project.local`\n\nMore recent versions of MacOS seems to install openssl in a different location than expected by default. If you have installed openssl via homebrew and encounter the following build error:\n\n`Failed to build HsOpenSSL-0.11.7.2. The failure occurred during the configure  \nstep.  \n[1 of 1] Compiling Main (...)  \nLinking .../dist-newstyle/tmp/src-75805/HsOpenSSL-0.11.7.2/dist/setup/setup ...  \nConfiguring HsOpenSSL-0.11.7.2...  \nsetup: Can’t find OpenSSL library`\n\nYou'll most likely need to add relevant symlinks as follows:\n\n`sudo mkdir -p /usr/local/opt/openssl  \nsudo ln -s /opt/homebrew/opt/openssl@3/lib /usr/local/opt/openssl/lib  \nsudo ln -s /opt/homebrew/opt/openssl@3/include /usr/local/opt/openssl/include`\n\nThis is a wart of the `HsOpenSSL` library wrapper, and using classic methods such as setting `LDFLAGS` & `CPPFLAGS`, or using `--extra-include-dirs` and `--extra-lib-dirs` won't work properly.\n\n`HsOpenSSL`\n`LDFLAGS`\n`CPPFLAGS`\n`--extra-include-dirs`\n`--extra-lib-dirs`\n\n##### Building and installing the node[​](#building-and-installing-the-node \"Direct link to Building and installing the node\")\n\nBuild the node and CLI with `cabal`:\n\n`cabal`\n`cabal update  \ncabal build exe:cardano-node  \ncabal build exe:cardano-cli`\n\nOn Windows, should you run into an error like this one when building:\n\n`ld.lld: error: undefined symbol: __local_stdio_printf_options  \n>>> referenced by libHSprocess-1.6.25.0-4d1c620770857b639d352d5e988299133f830295.a(runProcess.o):(swprintf_s)  \nclang: error: linker command failed with exit code 1 (use -v to see invocation)`\n\nYou should comment out `extra-lib-dirs` and `extra-include-dirs` in `~/AppData/Roaming/cabal/config`. See [this ticket](https://github.com/haskell/process/issues/340) for an example.\n\n`extra-lib-dirs`\n`extra-include-dirs`\n`~/AppData/Roaming/cabal/config`\n\nInstall the newly built node and CLI commands to the `~/.local/bin` directory:\n\n`~/.local/bin`\n`mkdir -p ~/.local/bin  \ncp -p \"$(cabal list-bin cardano-node)\" ~/.local/bin/  \ncp -p \"$(cabal list-bin cardano-cli)\" ~/.local/bin/`\n\n**Note:** If cardano-cli does not build with 'cabal build all', run 'cabal build cardano-cli'.\n**Note:** `~/.local/bin` should be in the `$PATH`.\n\n`~/.local/bin`\n`$PATH`\n\nNote, we avoid using `cabal install` because that method prevents the installed binaries from reporting\nthe git revision with the `--version` switch.\n\n`cabal install`\n`--version`\n\nCheck the version that has been installed:\n\n`cardano-node --version  \ncardano-cli --version`\n\nRepeat the above process when you need to update to a new version.\n\n**Note:** If serialization of the ledger state changed, snapshots in your `db/ledger` folder will be deleted by the node on startup. Consider backing those up before starting a new version of the node.\n\n`db/ledger`\n`cabal`",
  "images": [],
  "extraction_metadata": {
    "batch_number": 9,
    "extraction_timestamp": "2025-09-19T14:05:00.496633",
    "extraction_time": 2.430634021759033,
    "source": "tavily_api_raw"
  }
}