{
  "url": "https://developers.cardano.org/docs/get-started/cardano-serialization-lib/overview",
  "content": "![Cardano Logo](/img/cardano-black.svg)\n![Cardano Logo](/img/cardano-white.svg)\n\n# Get Started with Cardano Serialization Lib\n\nThis is a library for serialization & deserialization of data structures\nused in Cardano’s Haskell implementation of Shelley along with useful\nutility functions.\n\n## How can you use this library[​](#how-can-you-use-this-library \"Direct link to How can you use this library\")\n\nRust is wonderfully portable! You can easily bind to the native Rust\nlibrary from any common programming language (even C and WebAssembly)!\n\n### NPM packages[​](#npm-packages \"Direct link to NPM packages\")\n\n### Mobile bindings[​](#mobile-bindings \"Direct link to Mobile bindings\")\n\n## Benefits of using this library[​](#benefits-of-using-this-library \"Direct link to Benefits of using this library\")\n\nSerialization/deserialization code is automatically generated from\nCardano’s official specification, which guarantees it can easily stay up\nto date! We do this using an EMURGO-written tool called [cddl-codegen](https://github.com/Emurgo/cddl-codegen)\nwhich can be re-used for other tasks such as automatically generating a\nRust library for Cardano metadata specifications!\n\nIt is also very easy to create scripts in Rust or WASM to share with\nstake pools, or even embed inside an online tool! No more crazy\ncardano-cli bash scripts!\n\nPowerful and flexible enough to be used to power wallets and exchanges!\n(Yes, it’s used in production!)\n\n## Documentation[​](#documentation \"Direct link to Documentation\")\n\nThis library generates both [Typescript](https://www.typescriptlang.org/) and [Flow](https://flow.org/) type definitions,\nso it’s often easiest to see what is possible by just looking at the\ntypes! You can find the Flow types [here](https://github.com/Emurgo/cardano-serialization-lib/blob/master/rust/pkg/cardano_serialization_lib.js.flow).\n\nYou can also look in the [example](https://github.com/Emurgo/cardano-serialization-lib/tree/master/example) folder to see how to use this library from Typescript or just experiment with the library.\n\n## What about other versions of Cardano?[​](#what-about-other-versions-of-cardano \"Direct link to What about other versions of Cardano?\")\n\nIf you are looking for legacy bindings, you can find them at the\nfollowing:\n\n## Original binary specifications[​](#original-binary-specifications \"Direct link to Original binary specifications\")\n\nHere are the location of the original [CDDL](http://cbor.io/tools.html) specifications:\n\n## Building[​](#building \"Direct link to Building\")\n\nIf you need to install Rust, do the following:\n\n`curl https://sh.rustup.rs -sSf | sh -s -- -y  \necho 'export PATH=$HOME/.cargo/bin/:$PATH' >> $BASH_ENV  \nrustup install stable  \nrustup target add wasm32-unknown-unknown --toolchain stable  \ncurl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh`\n\nTo build this repository, do the following:\n\n`git submodule update --init --recursive  \nnvm use  \nnpm install  \nnpm run rust:build-nodejs`\n\n## Testing[​](#testing \"Direct link to Testing\")\n\n`npm run rust:test`\n\n## Publishing[​](#publishing \"Direct link to Publishing\")\n\nTo publish a new version to [crates.io](https://crates.io)\n\n`npm run rust:publish`\n\nTo publish new versions to NPM (only needed if you are an admin of this project)\n\n`npm run js:publish-nodejs  \nnpm run js:publish-browser  \nnpm run js:publish-asm`",
  "images": [],
  "extraction_metadata": {
    "batch_number": 4,
    "extraction_timestamp": "2025-09-19T14:04:34.999822",
    "extraction_time": 3.8223392963409424,
    "source": "tavily_api_raw"
  }
}