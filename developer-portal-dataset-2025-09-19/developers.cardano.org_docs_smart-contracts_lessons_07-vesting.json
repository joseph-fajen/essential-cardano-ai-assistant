{
  "url": "https://developers.cardano.org/docs/smart-contracts/lessons/07-vesting",
  "content": "![Cardano Logo](/img/cardano-black.svg)\n![Cardano Logo](/img/cardano-white.svg)\n\n# Vesting Contract\n\nVesting contracts are a type of smart contract designed to lock funds for a specified period, ensuring that only the designated beneficiary can withdraw them after the lockup period ends. This lesson will guide you through the process of understanding, implementing, and interacting with a vesting contract on Cardano.\n\n## Overview[​](#overview \"Direct link to Overview\")\n\n### What is a Vesting Contract?[​](#what-is-a-vesting-contract \"Direct link to What is a Vesting Contract?\")\n\nA vesting contract locks funds and allows the beneficiary to withdraw them after a specified lockup period. It ensures security and control over fund distribution.\n\n### Key Features[​](#key-features \"Direct link to Key Features\")\n\n## Smart Contract Details[​](#smart-contract-details \"Direct link to Smart Contract Details\")\n\n### Datum Definition[​](#datum-definition \"Direct link to Datum Definition\")\n\nThe datum serves as the configuration for the vesting contract. It includes:\n\n`lock_until`\n`owner`\n`beneficiary`\n\nFirst, we define the datum's shape, as this datum serves as configuration and contains the different parameters of our vesting operation.\n\n`pub type VestingDatum {  \n /// POSIX time in milliseconds, e.g. 1672843961000  \n lock_until: Int,  \n /// Owner's credentials  \n owner: ByteArray,  \n /// Beneficiary's credentials  \n beneficiary: ByteArray,  \n}`\n\nThis datum can be found in `aiken-vesting/aiken-workspace/lib/vesting/types.ak`.\n\n`aiken-vesting/aiken-workspace/lib/vesting/types.ak`\n\nNext, we define the spend validator.\n\n`validator vesting {  \n spend(  \n datum_opt: Option<VestingDatum>,  \n _redeemer: Data,  \n _input: OutputReference,  \n tx: Transaction,  \n ) {  \n // In principle, scripts can be used for different purpose (e.g. minting  \n // assets). Here we make sure it's only used when 'spending' from a eUTxO  \n expect Some(datum) = datum_opt  \n or {  \n key_signed(tx.extra_signatories, datum.owner),  \n and {  \n key_signed(tx.extra_signatories, datum.beneficiary),  \n valid_after(tx.validity_range, datum.lock_until),  \n },  \n }  \n }  \n  \n else(_) {  \n fail  \n }  \n}`\n\nIn this example, we define a `vesting` validator that ensures the following conditions are met:\n\n`vesting`\n\nOr:\n\n### How it works[​](#how-it-works \"Direct link to How it works\")\n\nThe owner of the funds deposits the funds into the vesting contract. The funds are locked up until the lockup period expires.\n\nTransactions can include validity intervals that specify when the transaction is valid, both from and until a certain time. The ledger verifies these validity bounds before executing a script and will only proceed if they are legitimate.\n\nThis approach allows scripts to incorporate a sense of time while maintaining determinism within the script's context. For instance, if a transaction has a lower bound `A`, we can infer that the current time is at least `A`.\n\n`A`\n`A`\n\nIt's important to note that since we don't control the upper bound, a transaction might be executed even 30 years after the vesting delay. However, from the script's perspective, this is entirely acceptable.\n\nThe beneficiary can withdraw the funds after the lockup period expires. The beneficiary can also be different from the owner of the funds.\n\n### Testing[​](#testing \"Direct link to Testing\")\n\nTo test the vesting contract, we have provided the a comphrehensive test script,you can run tests with `aiken check`.\n\n`aiken check`\n\nThe test script includes the following test cases:\n\nWe recommend you to check out [`vesting.ak`](https://github.com/cardanobuilders/cardanobuilders.github.io/blob/main/codes/course-hello-cardano/03-vesting/src/aiken-workspace/validators/vesting.ak) to learn more.\n\n`vesting.ak`\n\n### Compile and build script[​](#compile-and-build-script \"Direct link to Compile and build script\")\n\nTo compile the script, run the following command:\n\n`aiken build`\n\nThis command will generate a CIP-0057 Plutus blueprint, which you can find in [`plutus.json`](https://github.com/cardanobuilders/cardanobuilders.github.io/blob/main/codes/course-hello-cardano/03-vesting/src/aiken-workspace/plutus.json).\n\n`plutus.json`\n\n## Deposit funds[​](#deposit-funds \"Direct link to Deposit funds\")\n\nFirst, the owner can deposit funds into the vesting contract. The owner can specify the lockup period.\n\n`const assets: Asset[] = [  \n {  \n unit: \"lovelace\",  \n quantity: \"10000000\",  \n },  \n];  \n  \nconst lockUntilTimeStamp = new Date();  \nlockUntilTimeStamp.setMinutes(lockUntilTimeStamp.getMinutes() + 1);`\n\nIn this example, we deposit 10 ADA into the vesting contract. The funds are locked up for 1 minute, and the beneficiary is specified.\n\n`// app wallet  \nconst wallet = new MeshWallet({  \n networkId: 0,  \n key: {  \n type: \"mnemonic\",  \n words: appWallet,  \n },  \n fetcher: provider,  \n submitter: provider,  \n});  \n  \nconst utxos = await wallet.getUtxos();  \nconst changeAddress = await wallet.getChangeAddress();  \n  \nconst { pubKeyHash: ownerPubKeyHash } = deserializeAddress(changeAddress);  \nconst { pubKeyHash: beneficiaryPubKeyHash } =  \n deserializeAddress(beneficiaryAddress);`\n\nFor this tutorial, we use another wallet to fund the deposit. We get the UTXOs from the app wallet and the change address.\n\nWe also need both the owner and beneficiary's public key hashes. We can get the public key hash from the address using `deserializeAddress`.\n\n`deserializeAddress`\n`const txBuilder = new MeshTxBuilder({  \n fetcher: provider,  \n verbose: true,  \n});  \n  \nconst unsignedTx = await txBuilder  \n .txOut(script.address, amount)  \n .txOutInlineDatumValue(  \n mConStr0([lockUntilTimeStampMs, ownerPubKeyHash, beneficiaryPubKeyHash])  \n )  \n .changeAddress(changeAddress)  \n .selectUtxosFrom(utxos)  \n .complete();`\n\nWe construct the transaction to deposit the funds into the vesting contract. We specify the script address of the vesting contract, the amount to deposit, and the lockup period, owner, and beneficiary of the funds.\n\nFinally, we sign and submit the transaction.\n\n`const signedTx = await wallet.signTx(unsignedTx);  \nconst txHash = await wallet.submitTx(signedTx);`\n\nUpon successful execution, you will receive a transaction hash. Save this transaction hash for withdrawing the funds.\n\nExample of a [successful deposit transaction](https://preprod.cardanoscan.io/transaction/556f2bfcd447e146509996343178c046b1b9ad4ac091a7a32f85ae206345e925).\n\n## Withdraw funds[​](#withdraw-funds \"Direct link to Withdraw funds\")\n\nAfter the lockup period expires, the beneficiary can withdraw the funds from the vesting contract. The owner can also withdraw the funds from the vesting contract.\n\nFirst, let's look for the UTxOs containing the funds locked in the vesting contract.\n\n`const txHashFromDesposit =  \n \"556f2bfcd447e146509996343178c046b1b9ad4ac091a7a32f85ae206345e925\";  \nconst utxos = await provider.fetchUTxOs(txHash);  \nconst vestingUtxo = utxos[0];`\n\nWe fetch the UTxOs containing the funds locked in the vesting contract. We specify the transaction hash of the deposit transaction.\n\nLike before, we prepare a few variables to be used in the transaction. We get the wallet address and the UTXOs of the wallet. We also get the script address of the vesting contract, to send the funds to the script address. We also get the owner and beneficiary public key hashes.\n\nNext, we prepare the datum and the slot number to set the transaction valid interval to be valid only after the slot.\n\n`const datum = deserializeDatum<VestingDatum>(vestingUtxo.output.plutusData!);  \n  \nconst invalidBefore =  \n unixTimeToEnclosingSlot(  \n Math.min(datum.fields[0].int as number, Date.now() - 15000),  \n SLOT_CONFIG_NETWORK.preprod  \n ) + 1;`\n\nWe prepare the datum and the slot number to set the transaction valid interval to be valid only after the slot. We get the lockup period from the datum and set the transaction valid interval to be valid only after the lockup period.\n\nNext, we construct the transaction to withdraw the funds from the vesting contract.\n\n`const txBuilder = new MeshTxBuilder({  \n fetcher: provider,  \n verbose: true,  \n});  \n  \nconst unsignedTx = await txBuilder  \n .spendingPlutusScript(\"V3\")  \n .txIn(  \n vestingUtxo.input.txHash,  \n vestingUtxo.input.outputIndex,  \n vestingUtxo.output.amount,  \n script.address  \n )  \n .spendingReferenceTxInInlineDatumPresent()  \n .spendingReferenceTxInRedeemerValue(\"\")  \n .txInScript(script.cbor)  \n .txOut(walletAddress, [])  \n .txInCollateral(  \n collateralInput.txHash,  \n collateralInput.outputIndex,  \n collateralOutput.amount,  \n collateralOutput.address  \n )  \n .invalidBefore(invalidBefore)  \n .requiredSignerHash(pubKeyHash)  \n .changeAddress(walletAddress)  \n .selectUtxosFrom(inputUtxos)  \n .complete();`\n\nwe construct the transaction to withdraw the funds from the vesting contract. We specify the UTxO containing the funds locked in the vesting contract, the script address of the vesting contract, the wallet address to send the funds to, and the transaction valid interval.\n\nFinally, we sign and submit the transaction.\n\nExample of a [successful withdraw transaction](https://preprod.cardanoscan.io/transaction/13d6b2258680bbdf08f50a3bbc03e7ed674f5614844ce773fc191c9582282b04).\n\n## Source code[​](#source-code \"Direct link to Source code\")\n\nThe source code for this lesson is available on [GitHub](https://github.com/cardanobuilders/cardanobuilders.github.io/tree/main/codes/course-hello-cardano/03-vesting).\n\n## Challenge[​](#challenge \"Direct link to Challenge\")\n\nChange the vesting contract to gradual vesting schedule where instead of a single unlock date, implement gradual vesting where funds are released on a schedule. Or add a cliff feature where the beneficiary must wait for a minimum period before any tokens become available.",
  "images": [],
  "extraction_metadata": {
    "batch_number": 11,
    "extraction_timestamp": "2025-09-19T14:05:12.534540",
    "extraction_time": 3.978458881378174,
    "source": "tavily_api_raw"
  }
}