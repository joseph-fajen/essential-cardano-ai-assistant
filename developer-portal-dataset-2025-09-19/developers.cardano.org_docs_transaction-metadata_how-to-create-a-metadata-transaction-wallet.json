{
  "url": "https://developers.cardano.org/docs/transaction-metadata/how-to-create-a-metadata-transaction-wallet",
  "content": "![Cardano Logo](/img/cardano-black.svg)\n![Cardano Logo](/img/cardano-white.svg)\n\n# How to create a metadata transaction using cardano-wallet\n\nThis guide assumes that you have a basic understanding of `cardano-wallet` and `cardano-cli`, how to use it and that you have installed it into your system. Otherwise, we recommend reading [Installing cardano-node](/docs/operate-a-stake-pool/node-operations/installing-cardano-node), [Running cardano-node](/docs/operate-a-stake-pool/node-operations/running-cardano), and [Exploring Cardano Wallets](/docs/integrate-cardano/creating-wallet-faucet) guides first.\n\n`cardano-wallet`\n`cardano-cli`\n\nThis guide also assumes that you have `cardano-node` and `cardano-wallet` running in the background and connected to one of the `testnet` networks.\n\n`cardano-node`\n`cardano-wallet`\n`testnet`\n\n## Overview[â€‹](#overview \"Direct link to Overview\")\n\nThis article will explore how we can utilize the **Transaction Metadata** feature of the **Cardano** blockchain. More specifically, how we can insert and retrieve metadata that we have stored in the blockchain for a decentralized application using **Transaction Metadata**.\n\n## Use case[â€‹](#use-case \"Direct link to Use case\")\n\nLet's imagine a decentralized **To-Do List Application** that stores and retrieve its metadata not from centralized servers or storage but instead from the **Cardano blockchain**. First, let's check the diagram below to see how something like this could theoretically work:\n\n![img](/assets/images/todo-list-app-45f9667e8173e1fe60c0ce49c5e5f679.png)\n\n![img](/assets/images/todo-list-app-45f9667e8173e1fe60c0ce49c5e5f679.png)\n\nThe diagram is heavily simplified and is not recommended to deploy in production.\n\nWe see here that there is a **front-end** application the user interacts with and is responsible for inserting and retrieving the metadata to/from the **back-end** server. The **back-end** server is responsible for communicating to the `cardano-node` by creating **transactions** and querying the blockchain for the **metadata** information required by the **front-end**.\n\n`cardano-node`\n\nThe **front-end** application is not necessarily tied to the specific **back-end** API and could switch to another API as long as it ultimately communicates to the **Cardano** network.\n\nHow do you actually create **transaction metadata** in the **Cardano** blockchain, you ask? We'll let's get our hands dirty!\n\n## Setup[â€‹](#setup \"Direct link to Setup\")\n\nTo create a transaction metadata using the `cardano-wallet`, you must first create a wallet if you haven't already.\n\n`cardano-wallet`\n\n\\*\\* Generate mnemonic seed \\*\\*\n\n`cardano-wallet recovery-phrase generate`\n\n\\*\\* Create Wallet with the generated mnemonic seed \\*\\*\n\n`curl --request POST \\  \n --url http://localhost:1337/v2/wallets \\  \n --header 'Content-Type: application/json' \\  \n --data '{  \n \"name\": \"test_cf_1\",  \n \"mnemonic_sentence\": [\"shift\", \"badge\", \"heavy\", \"action\", \"tube\", \"divide\", \"course\", \"quality\", \"capable\", \"velvet\", \"cart\", \"marriage\", \"vague\", \"aware\", \"maximum\", \"exist\", \"crime\", \"file\", \"analyst\", \"great\", \"cabbage\", \"course\", \"sad\", \"apology\"],  \n \"passphrase\": \"test123456\"  \n}' | jq`\n\nNow that you have a wallet, we can now retrieve a **wallet address**:\n\n`curl --request GET \\  \n --url 'http://localhost:1337/v2/wallets/5076b34c6949dbd150eb9c39039037543946bdce/addresses?state=unused' | jq '.[0][\"id\"]'`\n\nNow that you have a **wallet address**, you can now request for some `tAda` funds from the [Cardano Testnet Faucet](https://developers.cardano.org/docs/integrate-cardano/testnet-faucet/).\n\n`tAda`\n\nOnce you have some funds, we can now create the sample metadata that we want to store into the blockchain.\n\nNow let's say that the `JSON` shape we decided on for our **To-Do List** application is the following:\n\n`JSON`\n`{  \n \"1337\": {  \n \"name\": \"hello world\",  \n \"completed\": 0  \n }  \n}`\n\nBased on our theoretical **To-Do List** application, this `JSON` shape could be a way to insert / update entries into our list. We choose an arbitrary number (`1337`) as the key, and we are basically saying that all metadata that will be inserted with that key is related to the **To-Do List** application data. Although we don't have control over what will be inserted with that metadata key since **Cardano** is an open platform.\n\n`JSON`\n`1337`\n\nNow that we have our `JSON` data, we can create a transaction and embed the metadata into the transaction. Ultimately storing it into the **Cardano** blockchain forever.\n\n`JSON`\n\n## JSON Format[â€‹](#json-format \"Direct link to JSON Format\")\n\n`cardano-wallet` has special requirements in terms of the `JSON` format of the payload that it accepts. Here are some examples:\n\n`cardano-wallet`\n`JSON`\n`{  \n \"0\": {  \n \"string\": \"cardano\"  \n },  \n \"1\": {  \n \"int\": 14  \n },  \n \"2\": {  \n \"bytes\": \"2512a00e9653fe49a44a5886202e24d77eeb998f\"  \n },  \n \"3\": {  \n \"list\": [  \n {  \n \"int\": 14  \n }  \n ]  \n },  \n \"4\": {  \n \"map\": [  \n {  \n \"k\": {  \n \"string\": \"key\"  \n },  \n \"v\": {  \n \"string\": \"value\"  \n }  \n }  \n ]  \n }  \n}`\n\nSo we will have to convert our `JSON` metadata payload to the format the `cardano-wallet` accepts:\n\n`JSON`\n`cardano-wallet`\n`{  \n \"1337\": {  \n \"map\": [  \n {  \n \"k\": {  \n \"string\": \"name\"  \n },  \n \"v\": {  \n \"string\": \"hello world\"  \n }  \n },  \n {  \n \"k\": {  \n \"string\": \"completed\"  \n },  \n \"v\": {  \n \"int\": 0  \n }  \n }  \n ]  \n }  \n}`\n\n## Submit to blockchain[â€‹](#submit-to-blockchain \"Direct link to Submit to blockchain\")\n\nOnce we have the accepted format, we can now finally submit the metadata to the blockchain.\n\nFirst, let's retrieve another **unused wallet address** from our wallet:\n\n`curl --request GET \\  \n --url 'http://localhost:1337/v2/wallets/5076b34c6949dbd150eb9c39039037543946bdce/addresses?state=unused' | jq '.[0][\"id\"]'`\n\nNow we will send `1,000,000 lovelace` to our own wallet while attaching the metadata in the transaction, ultimately storing it into the blockchain forever.\n\n`1,000,000 lovelace`\n`curl --request POST \\  \n --url http://localhost:1337/v2/wallets/5076b34c6949dbd150eb9c39039037543946bdce/transactions \\  \n --header 'Content-Type: application/json' \\  \n --data '{  \n \"passphrase\": \"test123456\",  \n \"payments\": [  \n {  \n \"address\": \"addr_test1qpg2eglv9gf2rksvdj53t6ajfgzkycaadlt2fatjyn4etpze0592agqpwraqajx2dsu2sxj64uese5s4qum293wuc00q6hnhqq\",  \n \"amount\": {  \n \"quantity\": 1000000,  \n \"unit\": \"lovelace\"  \n }  \n }  \n ],  \n \"metadata\": {  \n \"1337\": {  \n \"map\": [  \n {  \n \"k\": {  \n \"string\": \"name\"  \n },  \n \"v\": {  \n \"string\": \"hello world\"  \n }  \n },  \n {  \n \"k\": {  \n \"string\": \"completed\"  \n },  \n \"v\": {  \n \"int\": 0  \n }  \n }  \n ]  \n }  \n }  \n}'`\n\nCongratulations, you are now able to submit **Cardano** transactions with metadata embedded into them. ðŸŽ‰ðŸŽ‰ðŸŽ‰\n\nUp next, we discuss how to retrieve metadata that we have stored in the **Cardano** blockchain. **@TODO**",
  "images": [],
  "extraction_metadata": {
    "batch_number": 12,
    "extraction_timestamp": "2025-09-19T14:05:17.156321",
    "extraction_time": 1.6163160800933838,
    "source": "tavily_api_raw"
  }
}