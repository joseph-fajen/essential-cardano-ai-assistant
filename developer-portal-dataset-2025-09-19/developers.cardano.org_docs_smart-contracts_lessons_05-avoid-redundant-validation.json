{
  "url": "https://developers.cardano.org/docs/smart-contracts/lessons/05-avoid-redundant-validation",
  "content": "![Cardano Logo](/img/cardano-black.svg)\n![Cardano Logo](/img/cardano-white.svg)\n\n# Avoid Redundant Validation\n\nDo you have a question about the previous lessons - why have we performed even minting and state update in spending validators with withdrawal script? We know that every time we spend a UTxO from a spending validator would trigger checks, why can't I validate the counter update in the spending validator directly?\n\n## A Transaction with Multiple Script Validation[​](#a-transaction-with-multiple-script-validation \"Direct link to A Transaction with Multiple Script Validation\")\n\nImagine there is a complex transaction that involves multiple script validations. For example, a transaction that mints tokens, unlocking multiple script UTxOs, and withdraws funds. Each of these actions may require its own set of checks and validations.\n\nIf we enforced all the common checks in each of the scripts, we would end up with redundant validations that are executed multiple times, leading to inefficiencies and increased transaction costs.\n\n## How can we do better?[​](#how-can-we-do-better \"Direct link to How can we do better?\")\n\nWe can avoid redundant validations by centralizing the common checks in a single script, which is executed only once. This way, we can ensure that all the necessary validations are performed without duplicating the logic across multiple scripts.\n\nIn the architecture above, we have a single `WithdrawalCheck` script that performs the common validations. This script is executed once, and it checks the conditions for all the other scripts involved in the transaction.\n\n`WithdrawalCheck`\n\n## Example: Continue from Lesson 4[​](#example-continue-from-lesson-4 \"Direct link to Example: Continue from Lesson 4\")\n\nLet's assume we have all the common logics checked in the lesson 4's withdrawal script. Rather than copy pasting all checks from withdrawal script to the spending and minting validators, we can do this instead to avoid redundant validations:\n\n### Spending[​](#spending \"Direct link to Spending\")\n\n`use aiken/crypto.{ScriptHash}  \nuse cardano/transaction.{OutputReference, Transaction}  \nuse cocktail.{withdrawal_script_validated}  \n  \nvalidator spending_logics_delegated(  \n delegated_withdrawal_script_hash: ScriptHash,  \n) {  \n spend(  \n _datum_opt: Option<Data>,  \n _redeemer: Data,  \n _input: OutputReference,  \n tx: Transaction,  \n ) {  \n withdrawal_script_validated(  \n tx.withdrawals,  \n delegated_withdrawal_script_hash,  \n )  \n }  \n  \n else(_) {  \n fail @\"unsupported purpose\"  \n }  \n}`\n\n### Minting[​](#minting \"Direct link to Minting\")\n\n`use aiken/crypto.{ScriptHash}  \nuse cardano/assets.{PolicyId}  \nuse cardano/transaction.{Transaction}  \nuse cocktail.{withdrawal_script_validated}  \n  \nvalidator minting_logics_delegated(  \n delegated_withdrawal_script_hash: ScriptHash,  \n) {  \n mint(_redeemer: Data, _policy_id: PolicyId, tx: Transaction) {  \n withdrawal_script_validated(  \n tx.withdrawals,  \n delegated_withdrawal_script_hash,  \n )  \n }  \n  \n else(_) {  \n fail @\"unsupported purpose\"  \n }  \n}`\n\n## Why delegate to withdrawal script?[​](#why-delegate-to-withdrawal-script \"Direct link to Why delegate to withdrawal script?\")\n\nYou might notice that we are delegating the validation to the withdrawal script. This is a common pattern in Cardano smart contracts, where a withdrawal script is used to perform common validations for multiple scripts.\n\nHowever, validation delegation can happen in different ways. For example, you can delegate all checks to a spending or minting validator as well, why would we prefer withdrawal script most of the time?\n\n### Clean trigger[​](#clean-trigger \"Direct link to Clean trigger\")\n\nRecall that spending validation is triggered when a UTxO is spent, and minting validation is triggered when a token is minted. By delegating to a withdrawal script, we can ensure that the common validations are performed only once, regardless of how many scripts are involved in the transaction.\n\nAnd the withdrawal script can be triggered by withdrawing 0 lovelace, aka the community call it [`withdraw 0 trick`](https://aiken-lang.org/fundamentals/common-design-patterns#forwarding-validation--other-withdrawal-tricks). It is a clean way to trigger the validation without affecting the transaction's logic or state.\n\n`withdraw 0 trick`\n\n## Simplified Explanation[​](#simplified-explanation \"Direct link to Simplified Explanation\")\n\n### Why Avoid Redundant Validation?[​](#why-avoid-redundant-validation \"Direct link to Why Avoid Redundant Validation?\")\n\nWhen multiple scripts are involved in a transaction, repeating the same checks in each script leads to inefficiencies and higher costs. Instead, centralizing common checks in a single script ensures that validations are performed only once, saving resources and simplifying logic.\n\n### Centralized Validation[​](#centralized-validation \"Direct link to Centralized Validation\")\n\nBy using a single script, such as a withdrawal script, we can delegate common checks to it. This script acts as a central validator for all other scripts in the transaction.\n\n### Example Flow[​](#example-flow \"Direct link to Example Flow\")\n\nImagine a transaction with multiple scripts:\n\nInstead of duplicating checks in each script, the withdrawal script validates all common conditions, ensuring efficiency.\n\n### Delegation in Practice[​](#delegation-in-practice \"Direct link to Delegation in Practice\")\n\nHere’s how delegation works:\n\nThis approach reduces redundancy and keeps the logic clean and maintainable.\n\n### Clean Trigger with Withdrawal Script[​](#clean-trigger-with-withdrawal-script \"Direct link to Clean Trigger with Withdrawal Script\")\n\nThe withdrawal script can be triggered using the `withdraw 0 trick`, which allows validation without affecting the transaction state. This method is widely used for its simplicity and effectiveness.\n\n`withdraw 0 trick`\n\n### Key Benefits[​](#key-benefits \"Direct link to Key Benefits\")\n\nBy following this pattern, developers can create smarter and more efficient Cardano contracts.",
  "images": [],
  "extraction_metadata": {
    "batch_number": 11,
    "extraction_timestamp": "2025-09-19T14:05:12.534540",
    "extraction_time": 3.978458881378174,
    "source": "tavily_api_raw"
  }
}