{
  "url": "https://developers.cardano.org/docs/smart-contracts/lessons/01-hello-world",
  "content": "![Cardano Logo](/img/cardano-black.svg)\n![Cardano Logo](/img/cardano-white.svg)\n\n# Hello World\n\nWelcome to the first lesson of the Cardano Application Development Course! In this session, you'll set up the [Mesh SDK](https://meshjs.dev/) and learn how to create a wallet using `MeshWallet` and send assets using `MeshTxBuilder`.\n\n`MeshWallet`\n`MeshTxBuilder`\n\n## System setup[​](#system-setup \"Direct link to System setup\")\n\nBefore we begin, let's prepare our system for development. We will be using Node.js and TypeScript for this course, so make sure you have them installed on your machine.\n\n### Create a package.json file[​](#create-a-packagejson-file \"Direct link to Create a package.json file\")\n\nFirst, create a new `package.json` file in the root of your project with the following content:\n\n`package.json`\n`{  \n \"type\": \"module\",  \n \"dependencies\": {},  \n \"scripts\": {}  \n}`\n\n### Install the necessary packages[​](#install-the-necessary-packages \"Direct link to Install the necessary packages\")\n\nOpen your terminal and run these commands to install the required packages and MeshSDK:\n\n`npm install  \nnpm install tsx @meshsdk/core`\n\nHere's how your `package.json` file should look after installing the packages:\n\n`package.json`\n`{  \n \"type\": \"module\",  \n \"dependencies\": {  \n \"@meshsdk/core\": \"^1.9.0\",  \n \"tsx\": \"^4.19.4\"  \n },  \n \"scripts\": {}  \n}`\n`@meshsdk/core`\n`tsx`\n\n## Create a wallet[​](#create-a-wallet \"Direct link to Create a wallet\")\n\nWe will use [`MeshWallet`](https://meshjs.dev/apis/wallets/meshwallet). This class provides methods to create a new wallet, generate mnemonic phrases, and get the wallet address.\n\n`MeshWallet`\n\n### Generate mnemonic phrases[​](#generate-mnemonic-phrases \"Direct link to Generate mnemonic phrases\")\n\nTo create a new wallet, we need to generate a mnemonic phrase. A mnemonic phrase is a set of words that can be used to recover your wallet. It is important to keep your mnemonic phrase safe and secure, as it can be used to access your funds.\n\nTo create a new wallet mnemonic, do the following:\n\n`import { MeshWallet } from \"@meshsdk/core\";  \n  \n// Generate new mnemonic phrases for your wallet  \nconst mnemonic = MeshWallet.brew();  \nconsole.log(\"Your mnemonic phrases are:\", mnemonic);`\n`brew`\n\n### Initialize the wallet and get the wallet address[​](#initialize-the-wallet-and-get-the-wallet-address \"Direct link to Initialize the wallet and get the wallet address\")\n\nNow that we have generated a mnemonic phrase, we can initialize the wallet with it. The `MeshWallet` class provides a method to create a new wallet using the mnemonic phrase.\n\n`MeshWallet`\n`// Initialize the wallet with a mnemonic key  \nconst wallet = new MeshWallet({  \n networkId: 0, // preprod testnet  \n key: {  \n type: \"mnemonic\",  \n words: mnemonic as string[],  \n },  \n});  \n  \n// Get the wallet address  \nconst address = await wallet.getChangeAddress();  \nconsole.log(\"Your wallet address is:\", address);`\n`networkId`\n`key`\n`getChangeAddress`\n\n### Run the code[​](#run-the-code \"Direct link to Run the code\")\n\nHere is the source code. Create a new file `mnemonic.ts` and copy the code into it:\n\n`mnemonic.ts`\n`import { MeshWallet } from \"@meshsdk/core\";  \n  \n// Generate new mnemonic phrases for your wallet  \nconst mnemonic = MeshWallet.brew();  \nconsole.log(\"Your mnemonic phrases are:\", mnemonic);  \n  \n// Initialize the wallet with a mnemonic key  \nconst wallet = new MeshWallet({  \n networkId: 0, // preprod testnet  \n key: {  \n type: \"mnemonic\",  \n words: mnemonic as string[],  \n },  \n});  \n  \n// Get the wallet address  \nconst address = await wallet.getChangeAddress();  \nconsole.log(\"Your wallet address is:\", address);`\n\nUpdate the `package.json` file to add a script to run the code:\n\n`package.json`\n`{  \n \"type\": \"module\",  \n \"dependencies\": {  \n \"@meshsdk/core\": \"^1.9.0\",  \n \"tsx\": \"^4.19.4\"  \n },  \n \"scripts\": {  \n \"mnemonic\": \"tsx mnemonic.ts\"  \n }  \n}`\n\nRun the script:\n\n`npm run mnemonic`\n\nThis will generate a new mnemonic phrase and wallet address for you. The output will look something like this:\n\n`> mnemonic  \n> tsx mnemonic.ts  \n  \nYour mnemonic phrases are: [  \n 'access', 'spawn', 'taxi',  \n 'prefer', 'fortune', 'sword',  \n 'nerve', 'price', 'valid',  \n 'panther', 'sure', 'hello',  \n 'layer', 'try', 'grace',  \n 'seven', 'fossil', 'voice',  \n 'tobacco', 'circle', 'measure',  \n 'solar', 'pride', 'together'  \n]  \nYour wallet address is: addr_test1qptwuv6dl863u3k93mjrg0hgs0ahl08lfhsudxrwshcsx59cjxatme29s6cl7drjceknunry049shu9eudnsjvwqq9qsuem66d`\n\n## Send lovelace[​](#send-lovelace \"Direct link to Send lovelace\")\n\nNow that we have a wallet and some lovelace, let's learn how to send lovelace using the Mesh SDK. We will use the `MeshTxBuilder` class to create a transaction and send it to the network.\n\n`MeshTxBuilder`\n\n### Get lovelace from faucet[​](#get-lovelace-from-faucet \"Direct link to Get lovelace from faucet\")\n\nTo get some lovelace for testing, you can use the [Cardano Preprod Testnet Faucet](https://docs.cardano.org/cardano-testnets/tools/faucet). Paste your wallet address and click on the \"Request funds\" button. You should receive some lovelace in your wallet shortly.\n\n### Get Blockfrost API key[​](#get-blockfrost-api-key \"Direct link to Get Blockfrost API key\")\n\nIn order to create transactions, we need to use APIs to get UTXOs from the network. For this, we will use Blockfrost to get UTXOs and submit transactions. Sign up for a free account and get your [Blockfrost API key](https://blockfrost.io/).\n\nYou should get the preprod API key, which starts with `preprod`. You can find the API key in the \"Projects\" section of your Blockfrost account.\n\n`preprod`\n\n### Get wallet information[​](#get-wallet-information \"Direct link to Get wallet information\")\n\nNow, let's get the wallet information using the `MeshWallet` class.\n\n`MeshWallet`\n`// Get wallet data needed for the transaction  \nconst utxos = await wallet.getUtxos();  \nconst changeAddress = await wallet.getChangeAddress();`\n`getUtxos`\n`getChangeAddress`\n\n### Create a transaction to send lovelace[​](#create-a-transaction-to-send-lovelace \"Direct link to Create a transaction to send lovelace\")\n\nNow, we will create a transaction to send lovelace using the [`MeshTxBuilder`](https://meshjs.dev/apis/txbuilder) class.\n\n`MeshTxBuilder`\n`// Create the transaction  \nconst txBuilder = new MeshTxBuilder({  \n fetcher: provider,  \n verbose: true, // optional, prints the transaction body  \n});  \n  \nconst unsignedTx = await txBuilder  \n .txOut(  \n \"addr_test1qpvx0sacufuypa2k4sngk7q40zc5c4npl337uusdh64kv0uafhxhu32dys6pvn6wlw8dav6cmp4pmtv7cc3yel9uu0nq93swx9\",  \n [{ unit: \"lovelace\", quantity: \"1500000\" }]  \n )  \n .changeAddress(changeAddress)  \n .selectUtxosFrom(utxos)  \n .complete();`\n`txOut`\n`changeAddress`\n`selectUtxosFrom`\n`complete`\n\n### Sign and submit the transaction[​](#sign-and-submit-the-transaction \"Direct link to Sign and submit the transaction\")\n\nNow that we have created the transaction, we need to sign it and submit it to the network.\n\n`const signedTx = await wallet.signTx(unsignedTx);  \nconst txHash = await wallet.submitTx(signedTx);  \nconsole.log(\"Transaction hash:\", txHash);`\n`signTx`\n`submitTx`\n\n### Run the code[​](#run-the-code-1 \"Direct link to Run the code\")\n\nHere is the source code. Create a new file `send-lovelace.ts` and copy the code into it:\n\n`send-lovelace.ts`\n`import { BlockfrostProvider, MeshTxBuilder, MeshWallet } from \"@meshsdk/core\";  \n  \n// Set up the blockchain provider with your key  \nconst provider = new BlockfrostProvider(\"YOUR_KEY_HERE\");  \n  \n// Initialize the wallet with a mnemonic key  \nconst wallet = new MeshWallet({  \n networkId: 0,  \n fetcher: provider,  \n submitter: provider,  \n key: {  \n type: \"mnemonic\",  \n words: [\"your\", \"mnemonic\", \"...\", \"here\"],  \n },  \n});  \n  \n// Get wallet data needed for the transaction  \nconst utxos = await wallet.getUtxos();  \nconst changeAddress = await wallet.getChangeAddress();  \n  \n// Create the transaction  \nconst txBuilder = new MeshTxBuilder({  \n fetcher: provider,  \n verbose: true, // optional, prints the transaction body  \n});  \n  \nconst unsignedTx = await txBuilder  \n .txOut(  \n \"addr_test1qpvx0sacufuypa2k4sngk7q40zc5c4npl337uusdh64kv0uafhxhu32dys6pvn6wlw8dav6cmp4pmtv7cc3yel9uu0nq93swx9\",  \n [{ unit: \"lovelace\", quantity: \"1500000\" }]  \n )  \n .changeAddress(changeAddress)  \n .selectUtxosFrom(utxos)  \n .complete();  \n  \nconst signedTx = await wallet.signTx(unsignedTx);  \nconst txHash = await wallet.submitTx(signedTx);  \nconsole.log(\"Transaction hash:\", txHash);`\n\nUpdate the `package.json` file to add a script to run the code:\n\n`package.json`\n`{  \n \"type\": \"module\",  \n \"dependencies\": {  \n \"@meshsdk/core\": \"^1.9.0\",  \n \"tsx\": \"^4.19.4\"  \n },  \n \"scripts\": {  \n \"mnemonic\": \"tsx mnemonic.ts\",  \n \"send-lovelace\": \"tsx send-lovelace.ts\"  \n }  \n}`\n\nRun the script:\n\n`npm run send-lovelace`\n\nThis will create a transaction to send lovelace to the recipient address and submit it to the network. The output will look something like this:\n\n`> send-lovelace  \n> tsx send-lovelace.ts  \n  \ntxBodyJson - before coin selection {\"inputs\":[],\"outputs\":[{\"address\":\"addr_test1qpvx0sacufuypa2k4sngk7q40zc5c4npl337uusdh64kv0uafhxhu32dys6pvn6wlw8dav6cmp4pmtv7cc3yel9uu0nq93swx9\",\"amount\":[{\"unit\":\"lovelace\",\"quantity\":\"1500000\"}]}],\"fee\":\"0\",\"collaterals\":[],\"requiredSignatures\":[],\"referenceInputs\":[],\"mints\":[],\"changeAddress\":\"addr_test1qp2k7wnshzngpqw0xmy33hvexw4aeg60yr79x3yeeqt3s2uvldqg2n2p8y4kyjm8sqfyg0tpq9042atz0fr8c3grjmysdp6yv3\",\"metadata\":{},\"validityRange\":{},\"certificates\":[],\"withdrawals\":[],\"votes\":[],\"signingKey\":[],\"chainedTxs\":[],\"inputsForEvaluation\":{},\"network\":\"mainnet\",\"expectedNumberKeyWitnesses\":0,\"expectedByronAddressWitnesses\":[]}  \ntxBodyJson - after coin selection {\"inputs\":[{\"type\":\"PubKey\",\"txIn\":{\"txHash\":\"99d859b305ab8021e497fad0dc55373e50fffd3e7026142fa3cf5accfe0d3aab\",\"txIndex\":1,\"amount\":[{\"unit\":\"lovelace\",\"quantity\":\"9823719\"}],\"address\":\"addr_test1qp2k7wnshzngpqw0xmy33hvexw4aeg60yr79x3yeeqt3s2uvldqg2n2p8y4kyjm8sqfyg0tpq9042atz0fr8c3grjmysdp6yv3\"}}],\"outputs\":[{\"address\":\"addr_test1qpvx0sacufuypa2k4sngk7q40zc5c4npl337uusdh64kv0uafhxhu32dys6pvn6wlw8dav6cmp4pmtv7cc3yel9uu0nq93swx9\",\"amount\":[{\"unit\":\"lovelace\",\"quantity\":\"1500000\"}]},{\"address\":\"addr_test1qp2k7wnshzngpqw0xmy33hvexw4aeg60yr79x3yeeqt3s2uvldqg2n2p8y4kyjm8sqfyg0tpq9042atz0fr8c3grjmysdp6yv3\",\"amount\":[{\"unit\":\"lovelace\",\"quantity\":\"8153730\"}]}],\"fee\":\"169989\",\"collaterals\":[],\"requiredSignatures\":[],\"referenceInputs\":[],\"mints\":[],\"changeAddress\":\"addr_test1qp2k7wnshzngpqw0xmy33hvexw4aeg60yr79x3yeeqt3s2uvldqg2n2p8y4kyjm8sqfyg0tpq9042atz0fr8c3grjmysdp6yv3\",\"metadata\":{},\"validityRange\":{},\"certificates\":[],\"withdrawals\":[],\"votes\":[],\"signingKey\":[],\"chainedTxs\":[],\"inputsForEvaluation\":{\"99d859b305ab8021e497fad0dc55373e50fffd3e7026142fa3cf5accfe0d3aab1\":{\"input\":{\"outputIndex\":1,\"txHash\":\"99d859b305ab8021e497fad0dc55373e50fffd3e7026142fa3cf5accfe0d3aab\"},\"output\":{\"address\":\"addr_test1qp2k7wnshzngpqw0xmy33hvexw4aeg60yr79x3yeeqt3s2uvldqg2n2p8y4kyjm8sqfyg0tpq9042atz0fr8c3grjmysdp6yv3\",\"amount\":[{\"unit\":\"lovelace\",\"quantity\":\"9823719\"}]}}},\"network\":\"mainnet\",\"expectedNumberKeyWitnesses\":0,\"expectedByronAddressWitnesses\":[]}  \nTransaction hash: 62a825c607e4ca5766325c2fccd7ee98313ff81b7e8a4af67eac421b0f0866ff`\n\nYou should see the transaction hash in the output.\n\nNote, in the `MeshTxBuilder` class, we have set `verbose: true`, which will print the transaction body before and after coin selection. This is useful for debugging and understanding how the transaction is built.\n\n`MeshTxBuilder`\n`verbose: true`\n\n## Source code[​](#source-code \"Direct link to Source code\")\n\nThe source code for this lesson is available on [GitHub](https://github.com/cardanobuilders/cardanobuilders.github.io/tree/main/codes/course-hello-cardano/01-wallet-send-lovelace).\n\n### Educational[​](#educational \"Direct link to Educational\")\n\nYou can find a youtube video of an initial walkthrough/workshop [here](https://www.youtube.com/watch?v=Spz8iAggFns).",
  "images": [],
  "extraction_metadata": {
    "batch_number": 11,
    "extraction_timestamp": "2025-09-19T14:05:12.534540",
    "extraction_time": 3.978458881378174,
    "source": "tavily_api_raw"
  }
}