{
  "url": "https://developers.cardano.org/docs/operate-a-stake-pool/relay-node-configuration",
  "content": "![Cardano Logo](/img/cardano-black.svg)\n![Cardano Logo](/img/cardano-white.svg)\n\n# Cardano Relay Node Configuration\n\n## Install node software[​](#install-node-software \"Direct link to Install node software\")\n\nFirst, follow & complete the guide [Installing the node from source](/docs/operate-a-stake-pool/node-operations/installing-cardano-node).\n\nThe focus of this tutorial is on learning how to setup a stake pool. So unless you have the proper knowledge or guidance to set up a Mainnet pool, continue as recommended to set up a pool on a [testnet network](/docs/get-started/testnets-and-devnets) and not the Mainnet.\n\nContinue below when you have a machine with the software installed. The guide below will set up your node as a relay and verify its connection to the Cardano network. You can then prepare further nodes as needed for your stake pool by the same process.\n\n## Configuration Files[​](#configuration-files \"Direct link to Configuration Files\")\n\nThe `cardano-node` application requires the following configuration files to run as of writing this article.\n\n`cardano-node`\n\nFor a timeline and description of thse Ledger eras, see the\n[Cardano Roadmap](https://roadmap.cardano.org) and the\n[Cardano Features](https://github.com/cardano-foundation/CIPs/blob/master/CIP-0059/feature-table.md) table.\n\nKeep in mind that when you set up the Block Producer later, it will have a more restricted topology than your Relay: generally only connecting to nodes in your own stake pool.\n\n## Pre-Production Testnet[​](#pre-production-testnet \"Direct link to Pre-Production Testnet\")\n\n`mkdir -p $HOME/cardano-testnet  \ncd $HOME/cardano-testnet`\n\nThese files are included in the download of `cardano-node`; if needed again they can be obtained by:\n\n`cardano-node`\n`curl -O -J https://book.world.dev.cardano.org/environments/preprod/config.json  \ncurl -O -J https://book.world.dev.cardano.org/environments/preprod/topology.json  \ncurl -O -J https://book.world.dev.cardano.org/environments/preprod/byron-genesis.json  \ncurl -O -J https://book.world.dev.cardano.org/environments/preprod/shelley-genesis.json  \ncurl -O -J https://book.world.dev.cardano.org/environments/preprod/alonzo-genesis.json  \ncurl -O -J https://book.world.dev.cardano.org/environments/preprod/conway-genesis.json`\n\nEach network has a `config` file, `genesis` file(s), `topology` file, and unique identifier called the **Network Magic**.\n\n`config`\n`genesis`\n`topology`\n\nIf your Block Producer node is already setup, you can add it to your relay topology file by adding its IP address and port number to \"localRoots\".\n\n`nano topology.json  \n  \n{  \n \"LocalRoots\": {  \n \"groups\": [  \n {  \n \"localRoots\": {  \n \"accessPoints\": [  \n { \"address\": \"your-blockproducer-address\", \"port\": 6000 }  \n ],  \n \"advertise\": false  \n },  \n \"valency\": 1  \n }  \n ]  \n },  \n \"PublicRoots\": [  \n {  \n \"publicRoots\": {  \n \"accessPoints\": [  \n {  \n \"address\": \"preprod-node.world.dev.cardano.org\",  \n \"port\": 30000  \n }  \n ],  \n \"advertise\": false  \n }  \n }  \n ],  \n \"useLedgerAfterSlot\": 4642000  \n}`\n\nSave and close the topology.json file.\n\n`useLedgerAfterSlot`\n`valency`\n`localRoots`\n`localRoots`\n`publicRoots`\n`useLedgerAfterSlot`\n`pkill -HUP cardano-node`\n\n## Creating Startup Scripts and Services[​](#creating-startup-scripts-and-services \"Direct link to Creating Startup Scripts and Services\")\n\nTo run an instance of Cardano Node, we create a bash script and configure the options. Additionally, we create a systemd service to start the node which ensures that in case of system reboot or crashes, the Cardano Node starts again automatically.\n\nFirst, switch to the directory containing configuration files\n\n`cd $HOME/cardano-testnet`\n\nNow create the start script startTestNode.sh\n\n`nano startTestNode.sh`\n\nReplace `<$HOME>` with local values of the `$HOME` environment variable on each machine. To find those values, run `echo $HOME`.\n\n`<$HOME>`\n`$HOME`\n`echo $HOME`\n\ncopy the following in the file\n\n`#!/bin/bash  \n# Set a variable to indicate the port where the Cardano Node listens  \nPORT=6000  \n# Set a variable to indicate the local IP address of the computer where Cardano Node runs  \n# 0.0.0.0 listens on all local IP addresses for the computer  \nHOSTADDR=0.0.0.0  \n# Set a variable to indicate the file path to your topology file  \nTOPOLOGY=<$HOME>/cardano-testnet/topology.json  \n# Set a variable to indicate the folder where Cardano Node stores blockchain data  \nDB_PATH=<$HOME>/cardano-testnet/db  \n# Set a variable to indicate the path to the Cardano Node socket for Inter-process communication (IPC)  \nSOCKET_PATH=<$HOME>/cardano-testnet/db/socket  \n# Set a variable to indicate the file path to your main Cardano Node configuration file  \nCONFIG=<$HOME>/cardano-testnet/config.json  \n#  \n# Run Cardano Node using the options that you set using variables  \n#  \n/usr/local/bin/cardano-node run --topology ${TOPOLOGY} --database-path ${DB_PATH} --socket-path ${SOCKET_PATH} --host-addr ${HOSTADDR} --port ${PORT} --config ${CONFIG}`\n\nFor a detailed understanding of all the configuration parameters, please refer to [Running cardano-node](/docs/operate-a-stake-pool/node-operations/running-cardano#cardano-node-parameters)\n\nSave and close the startTestNode.sh file.\n\nTo set execute permissions for the startTestNode.sh file, type:\n\nchmod +x $HOME/cardano-testnet/startTestNode.sh\n\nTo create the folder where Cardano Node stores blockchain data, type:\n\nmkdir $HOME/cardano-testnet/db\n\nTo run Cardano Node as a service, use nano to create a file named cardano-testnode.service and then add the following contents to the file.\n\nReplace `<$USER>` and `<$HOME>` with their values of the environment variable. To find the values use following commands:\n\n`<$USER>`\n`<$HOME>`\n\necho $USER\necho $HOME\n\n`[Unit]  \nDescription = Cardano TestNode Service  \nWants = network-online.target  \nAfter = network-online.target  \n  \n[Service]  \nUser = <$USER>  \nType = simple  \nWorkingDirectory = <$HOME>/cardano-testnet  \nExecStart = /bin/bash -c '<$HOME>/cardano-testnet/startTestNode.sh'  \nExecReload = pkill -HUP cardano-node  \nKillSignal = SIGINT  \nRestartKillSignal = SIGINT  \nTimeoutStopSec = 300  \nLimitNOFILE = 32768  \nRestart = always  \nRestartSec = 5  \nSyslogIdentifier = cardano-testnode  \n  \n[Install]  \nWantedBy = multi-user.target`\n\nSave and close the cardano-testnode.service file.\n\nTo move the cardano-node.service file to the folder /etc/systemd/system and set file permissions, type:\n\nsudo mv $HOME/cardano-testnet/cardano-testnode.service /etc/systemd/system/cardano-testnode.service\nsudo chmod 644 /etc/systemd/system/cardano-testnode.service\n\n## Launching Cardano Relay Node[​](#launching-cardano-relay-node \"Direct link to Launching Cardano Relay Node\")\n\nTo start Cardano Node as a service when the computer boots, type:\n\nsudo systemctl daemon-reload\nsudo systemctl enable cardano-testnode.service\n\nNow the relay node is ready to start\n\nsudo systemctl reload-or-restart cardano-testnode\n\nIf you have everything set correctly, you should see something like this on using the command `journalctl --unit=cardano-node --follow`:\n\n`journalctl --unit=cardano-node --follow`\n`Dec 1 15:31:40 localhost cardano-testnode[162851]: #033[35m[localhos:cardano.node.basicInfo.protocol:Notice:5]#033[0m [2022-12-01 14:31:40.95 UTC] Byron; Shelley  \nDec 1 15:31:40 localhost cardano-testnode[162851]: #033[35m[localhos:cardano.node.basicInfo.version:Notice:5]#033[0m [2022-12-01 14:31:40.95 UTC] 1.35.4  \nDec 1 15:31:40 localhost cardano-testnode[162851]: #033[35m[localhos:cardano.node.basicInfo.commit:Notice:5]#033[0m [2022-12-01 14:31:40.95 UTC] ebc7be471b30e5931b35f9bbc236d21c375b91bb  \nDec 1 15:31:40 localhost cardano-testnode[162851]: #033[35m[localhos:cardano.node.basicInfo.nodeStartTime:Notice:5]#033[0m [2022-12-01 14:31:40.95 UTC] 2022-12-01 14:31:40.958841061 UTC  \nDec 1 15:31:40 localhost cardano-testnode[162851]: #033[35m[localhos:cardano.node.basicInfo.systemStartTime:Notice:5]#033[0m [2022-12-01 14:31:40.95 UTC] 2022-06-01 00:00:00 UTC  \nDec 1 15:31:40 localhost cardano-testnode[162851]: #033[35m[localhos:cardano.node.basicInfo.slotLengthByron:Notice:5]#033[0m [2022-12-01 14:31:40.95 UTC] 20s  \nDec 1 15:31:40 localhost cardano-testnode[162851]: #033[35m[localhos:cardano.node.basicInfo.epochLengthByron:Notice:5]#033[0m [2022-12-01 14:31:40.95 UTC] 21600  \nDec 1 15:31:40 localhost cardano-testnode[162851]: #033[35m[localhos:cardano.node.basicInfo.slotLengthShelley:Notice:5]#033[0m [2022-12-01 14:31:40.95 UTC] 1s  \nDec 1 15:31:40 localhost cardano-testnode[162851]: #033[35m[localhos:cardano.node.basicInfo.epochLengthShelley:Notice:5]#033[0m [2022-12-01 14:31:40.95 UTC] 432000  \nDec 1 15:31:40 localhost cardano-testnode[162851]: #033[35m[localhos:cardano.node.basicInfo.slotsPerKESPeriodShelley:Notice:5]#033[0m [2022-12-01 14:31:40.95 UTC] 129600  \nDec 1 15:31:40 localhost cardano-testnode[162851]: #033[35m[localhos:cardano.node.basicInfo.slotLengthAllegra:Notice:5]#033[0m [2022-12-01 14:31:40.95 UTC] 1s  \nDec 1 15:31:40 localhost cardano-testnode[162851]: #033[35m[localhos:cardano.node.basicInfo.epochLengthAllegra:Notice:5]#033[0m [2022-12-01 14:31:40.95 UTC] 432000  \nDec 1 15:31:40 localhost cardano-testnode[162851]: #033[35m[localhos:cardano.node.basicInfo.slotsPerKESPeriodAllegra:Notice:5]#033[0m [2022-12-01 14:31:40.95 UTC] 129600  \nDec 1 15:31:40 localhost cardano-testnode[162851]: #033[35m[localhos:cardano.node.basicInfo.slotLengthMary:Notice:5]#033[0m [2022-12-01 14:31:40.95 UTC] 1s  \nDec 1 15:31:40 localhost cardano-testnode[162851]: #033[35m[localhos:cardano.node.basicInfo.epochLengthMary:Notice:5]#033[0m [2022-12-01 14:31:40.95 UTC] 432000  \nDec 1 15:31:40 localhost cardano-testnode[162851]: #033[35m[localhos:cardano.node.basicInfo.slotsPerKESPeriodMary:Notice:5]#033[0m [2022-12-01 14:31:40.95 UTC] 129600  \nDec 1 15:31:40 localhost cardano-testnode[162851]: #033[35m[localhos:cardano.node.basicInfo.slotLengthAlonzo:Notice:5]#033[0m [2022-12-01 14:31:40.95 UTC] 1s  \nDec 1 15:31:40 localhost cardano-testnode[162851]: #033[35m[localhos:cardano.node.basicInfo.epochLengthAlonzo:Notice:5]#033[0m [2022-12-01 14:31:40.95 UTC] 432000  \nDec 1 15:31:40 localhost cardano-testnode[162851]: #033[35m[localhos:cardano.node.basicInfo.slotsPerKESPeriodAlonzo:Notice:5]#033[0m [2022-12-01 14:31:40.95 UTC] 129600  \nDec 1 15:31:40 localhost cardano-testnode[162851]: #033[35m[localhos:cardano.node.basicInfo.slotLengthBabbage:Notice:5]#033[0m [2022-12-01 14:31:40.95 UTC] 1s  \nDec 1 15:31:40 localhost cardano-testnode[162851]: #033[35m[localhos:cardano.node.basicInfo.epochLengthBabbage:Notice:5]#033[0m [2022-12-01 14:31:40.95 UTC] 432000  \nDec 1 15:31:40 localhost cardano-testnode[162851]: #033[35m[localhos:cardano.node.basicInfo.slotsPerKESPeriodBabbage:Notice:5]#033[0m [2022-12-01 14:31:40.95 UTC] 129600`\n\nSyncing the blockchain from zero can take a while. Please be patient. If you want to stop syncing, you can do so using the command `sudo systemctl stop cardano-node`. Restarting the relay node will resume syncing the blockchain.\n\n`sudo systemctl stop cardano-node`\n\n## Reloading the Topology configuration[​](#reloading-the-topology-configuration \"Direct link to Reloading the Topology configuration\")\n\nIn case you have made an update to `topology.json` file, since this node is assumed to be running in P2P mode - you can can load these changes without having to perform a full node restart using command below:\n\n`topology.json`\n\nsudo systemctl reload cardano-node",
  "images": [],
  "extraction_metadata": {
    "batch_number": 10,
    "extraction_timestamp": "2025-09-19T14:05:05.551444",
    "extraction_time": 2.0458879470825195,
    "source": "tavily_api_raw"
  }
}