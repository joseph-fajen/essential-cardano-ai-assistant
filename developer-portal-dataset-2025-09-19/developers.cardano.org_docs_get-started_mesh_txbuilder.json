{
  "url": "https://developers.cardano.org/docs/get-started/mesh/txbuilder",
  "content": "![Cardano Logo](/img/cardano-black.svg)\n![Cardano Logo](/img/cardano-white.svg)\n\n# Transaction Builder\n\nThe `MeshTxBuilder` is a powerful low-level APIs that allows you to build and sign transactions.\n\n`MeshTxBuilder`\n\nThe `MeshTxBuilder` is a powerful interface where the higher level `Transaction` class is indeed a pre-built combination of the `MeshTxBuilder` APIs. With these lower level APIs, it builds the object to be passing to various serialization libraries.\n\n`MeshTxBuilder`\n`Transaction`\n`MeshTxBuilder`\n\nCheck out the [Mesh Playground](https://meshjs.dev/apis/txbuilder) for live demo and full explanation.\n\n## Initialize the MeshTxBuilder[​](#initialize-the-meshtxbuilder \"Direct link to Initialize the MeshTxBuilder\")\n\nTo start building an customized transaction, you need to first initialize MeshTxBuilder:\n\n`import { BlockfrostProvider, MeshTxBuilder } from \"@meshsdk/core\";  \n  \nconst blockchainProvider = new BlockfrostProvider('<Your-API-Key>');  \n  \nconst txBuilder = new MeshTxBuilder({  \n fetcher: blockchainProvider,  \n evaluator: blockchainProvider,  \n});`\n\nThe MeshTxBuilder instance has the following signature:\n\n`{  \n fetcher?: IFetcher;  \n submitter?: ISubmitter;  \n evaluator?: IEvaluator;  \n serializer?: IMeshTxSerializer;  \n isHydra?: boolean;  \n params?: Partial<Protocol>;  \n}`\n\nThere are 6 optional fields to pass in to initialized the lower level APIs instance:\n\n`serializer`\n`fetcher`\n`submitter`\n`evaluator`\n`isHydra`\n`params`\n\n## Send a value transaction[​](#send-a-value-transaction \"Direct link to Send a value transaction\")\n\nSending value with `MeshTxBuilder` come with the `.txOut()` endpoint:\n\n`MeshTxBuilder`\n`.txOut()`\n`.txOut(address: string, amount: Asset[])`\n\nIn order to send values (so as every Cardano transaction), we have to fund the transaction to do so. There are 2 ways to provide values in a transaction:\n\nSpecifying which input to spend with:\n\n`.txIn(txHash: string, txIndex: number, amount?: Asset[], address?: string)`\n\nProviding an array of UTxOs, and perform auto UTxO selection:\n\n`.selectUtxosFrom(extraInputs: UTxO[], strategy?: UtxoSelectionStrategy, threshold?: string, includeTxFees?: boolean)`\n\nSince the input and output values might not be the same, we have to specify the address (usually own's address) to receive change:\n\n`.changeAddress(addr: string)`\n\nThe following shows a simple example of building a transaction to send values with UTxO selection:\n\n`txBuilder  \n .txOut(address, [{ unit: \"lovelace\", quantity: amount }])  \n .changeAddress(changeAddress)  \n .selectUtxosFrom(utxos)  \n .complete();`",
  "images": [],
  "extraction_metadata": {
    "batch_number": 6,
    "extraction_timestamp": "2025-09-19T14:04:44.452431",
    "extraction_time": 1.4428989887237549,
    "source": "tavily_api_raw"
  }
}