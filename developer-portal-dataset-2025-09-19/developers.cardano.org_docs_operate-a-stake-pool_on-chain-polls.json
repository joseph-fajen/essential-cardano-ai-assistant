{
  "url": "https://developers.cardano.org/docs/operate-a-stake-pool/on-chain-polls",
  "content": "![Cardano Logo](/img/cardano-black.svg)\n![Cardano Logo](/img/cardano-white.svg)\n\n# On-Chain Polls\n\nIn the 8.0.0 version of Cardano-node, we incorporated a new group of commands to facilitate voting among stake pool operators. An \"official\" poll is characterized by being endorsed with a genesis delegate key.\n\nThis tutorial requires cardano-node 8.0.0\n\n<https://github.com/IntersectMBO/cardano-node/releases/tag/8.0.0>\n\n## CIP-0094 - Poll participation[​](#cip-0094---poll-participation \"Direct link to CIP-0094 - Poll participation\")\n\n### Pre-requisites[​](#pre-requisites \"Direct link to Pre-requisites\")\n\n​For this guide, you require a Cardano-cli that has the `governance poll` subcommands. You can use anything from the Cardano-node [release v8.0.0](https://github.com/IntersectMBO/cardano-node/releases) or a specially [backported 1.35.7 version](https://github.com/CardanoSolutions/cardano-node/releases/tag/1.35.7%2Bcip-0094). Once a Genesis Delegate Key holder has signed and posted a new poll question on the chain, it will appear in this Cardano Foundation [CIP-0094-polls repository](https://github.com/cardano-foundation/CIP-0094-polls).\n\n`governance poll`\n\nYou can find the JSON file containing the poll question in CBOR format by navigating into the specific subfolder.\n\nFor instance, the first [PreProd network Test question](https://github.com/cardano-foundation/CIP-0094-polls/tree/main/networks/preprod/d8c1b1d871a27d74fbddfa16d28ce38288411a75c5d3561bb74066bcd54689e2) appears like this:\n**poll.json**\n\n`{  \n \"type\": \"GovernancePoll\",  \n \"description\": \"An on-chain poll for SPOs: How satisfied are you with the current rewards and incentives scheme?\",  \n \"cborHex\": \"a1185ea200827840486f77207361746973666965642061726520796f752077697468207468652063757272656e74207265776172647320616e6420696e63656e74697665732073636568656d653f0183816c646973736174697366696564816a6e6f206f70696e696f6e8169736174697366696564\"  \n}`\n\nThe signature from the genesis delegate key isn't included in this metadata but is employed as an additional signatory on the initiating transaction.\n\nDownload this file to your node.\n\n## Creating answer[​](#creating-answer \"Direct link to Creating answer\")\n\n​\nFrom that point, you can generate a metadata entry to respond to the poll using the `governance answer-poll` command in the following way:\n​\n\n`governance answer-poll`\n`$ cardano-cli governance answer-poll --poll-file poll.json`\n\n​\nThis command will invite an interactive response from you. If you prefer not to respond interactively, you can employ `--answer` along with the index of the answer.\n\n`--answer`\n\nExecuting this command will present the survey in a format easy to comprehend and will ask for your answer, as demonstrated below:\n​\n\n`How satisfied are you with the current rewards and incentives scheme?  \n[0] dissatisfied  \n[1] no opinion  \n[2] satisfied  \n​  \nPlease indicate an answer (by index): _`\n\nYou can move forward by entering one of the possible answer indices (in this case, `0`, `1`, or `2`) followed by a newline. This will generate witnessed metadata in the form of a detailed JSON schema, which should be subsequently posted on-chain in any transaction and **signed with your stake pool's cold key**: ideally, this is achieved by constructing a basic transaction directed to yourself that carries the metadata.\n\n`0`\n`1`\n`2`\n\nHere is a sample of metadata where the answer `2` is selected:\n\n`2`\n\n**answer.json**\n\n`{  \n \"94\": {  \n \"map\": [  \n {  \n \"k\": { \"int\": 2 },  \n \"v\": { \"bytes\": \"62c6be72bdf0b5b16e37e4f55cf87e46bd1281ee358b25b8006358bf25e71798\" }  \n },  \n {  \n \"k\": { \"int\": 3 },  \n \"v\": { \"int\": 2 }  \n }  \n ]  \n }  \n}`\n\n## Publishing answer[​](#publishing-answer \"Direct link to Publishing answer\")\n\n​\nFrom this point, you can utilize the `transaction build` command to generate a transaction for posting on-chain. You will require a signing key linked to a UTxO possessing sufficient funds to facilitate the transaction (approximately 0.2 Ada if you're making a basic transaction to yourself).\n\n`transaction build`\n\nAssuming you have stored the metadata generated from the previous step in a file named `answer.json`, the command to construct the transaction would appear as follows:\n\n`answer.json`\n`$ cardano-cli conway transaction build \\  \n --babbage-era \\  \n --cardano-mode \\  \n --mainnet \\  \n --tx-in $TXID#$IX \\  \n --change-address $ADDRESS \\  \n --metadata-json-file answer.json \\  \n --json-metadata-detailed-schema \\  \n --required-signer-hash $POOL_ID \\  \n --out-file answer.tx`\n\nPlease be aware that adding `--required-signer-hash` is crucial for the response to be considered valid for the survey; this serves as your identification as a stake pool operator.\n\n`--required-signer-hash`\n\nYou can produce the `$POOL_ID` hash from the Bech32 formatted pool ID using the Bech32 command:\n​\n\n`$POOL_ID`\n`$ bech32 <<< pool1....`\n\nTo submit the response to the chain, you need to provide the respective values for `--tx-in` & `--change-address` from one of your wallets.\n\n`--tx-in`\n`--change-address`\n\nFrom this point, you can sign `answer.tx` using your stake pool's cold key and any necessary payment key, then submit the result as usual. If everything proceeds correctly, the cardano-cli should present a transaction id that you can monitor on-chain to confirm your survey response was correctly published.\n\n`answer.tx`\n\nSPO-Poll Dashboards where your transaction should now be visible:\n\n## Verifying Answers[​](#verifying-answers \"Direct link to Verifying Answers\")\n\n​\nLastly, you can validate answers observed on-chain using the `governance verify-poll` command. The term 'verify' here has a dual meaning:\n\n`governance verify-poll`\n\nAssuming you still have the original `poll.json` file, and a signed transaction carrying a survey answer as `answer.signed`, you can confirm its validity using:\n​\n\n`poll.json`\n`answer.signed`\n`$ cardano-cli governance verify-poll \\  \n --poll-file poll.json \\  \n --tx-file answer.signed`\n\n​\nUpon successful execution, this should produce something like:\n​\n\n`Found valid poll answer, signed by:  \n[  \n \"f8db28823f8ebd01a2d9e24efb2f0d18e387665770274513e370b5d5\"  \n]`\n\n​\nAlternatively, the command will identify a problem with the answer and/or poll.\n\n## References[​](#references \"Direct link to References\")",
  "images": [],
  "extraction_metadata": {
    "batch_number": 9,
    "extraction_timestamp": "2025-09-19T14:05:00.496633",
    "extraction_time": 2.430634021759033,
    "source": "tavily_api_raw"
  }
}