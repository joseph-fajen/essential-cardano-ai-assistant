{
  "url": "https://developers.cardano.org/docs/get-started/cli-operations/native-assets/",
  "content": "![Cardano Logo](/img/cardano-black.svg)\n![Cardano Logo](/img/cardano-white.svg)\n\n# Native assets\n\nFrom the Mary ledger upgrade and onwards, Cardano supports [multi-assets](https://github.com/intersectmbo/cardano-ledger/releases/download/cardano-ledger-spec-2023-01-18/mary-ledger.pdf), also referred to as a *native tokens* feature. This feature extends the ledger’s accounting infrastructure (originally designed for processing ada-only transactions) to accommodate transactions using a range of assets. These assets include ada and a variety of user-defined token types, the mixture of which can be transacted in a single tx output. Note that native tokens cannot exist on its own at a UTXO, a minimum number of lovelace is required at the UTXO to support the native tokens.\n\n## What are Native assets?[​](#what-are-native-assets \"Direct link to What are Native assets?\")\n\nNative assets are user-defined, custom tokens. They are supported natively, which means that the ledger handles the accounting and tracking of token-related activities. This offers distinct advantages for developers as there is no need to create smart contracts to mint or burn custom tokens, removing a layer of added complexity and potential for manual errors.\n\nAn asset is uniquely identified by an *asset ID*, which is a pair of both the *policy ID* and an *asset name*:\n\n`hex(\"couttscoin\") = \"636f75747473636f696e\"`\n`echo -n \"couttscoin\" | xxd -ps  \n636f75747473636f696e`\n\nTokens that have the same asset ID have the property of being fungible with each other, and are not fungible with tokens that have a different asset ID.\n\nFurther reading:\n\nBefore you start, you should:\n\n### Syntax for expressing values in a transaction output[​](#syntax-for-expressing-values-in-a-transaction-output \"Direct link to Syntax for expressing values in a transaction output\")\n\nLovelace values can be specified in two ways:\n\n`${quantity} lovelace`\n`${quantity}`\n`${assetName}`\n\nValues for other assets can be specified as:\n\n`${quantity} ${policyId}.${assetName}`\n`${quantity} ${policyId}`\n\nWhere `quantity` is a signed integer and `policyId` is a hex-encoded policy ID [a script hash], and `assetName` is a hex-encoded assetName.\n\n`quantity`\n`policyId`\n`assetName`\n\n### Syntax of native asset values[​](#syntax-of-native-asset-values \"Direct link to Syntax of native asset values\")\n\nThe `cardano-cli` can specify native asset values in transaction outputs and when minting or burning tokens. The syntax for these values has been designed to be backwards-compatible with the previous ada-only syntax (`address+lovelace`):\n\n`cardano-cli`\n`address+lovelace`\n`42 lovelace`\n`INT policyid.assetName`\n`42 $MYPOLICY.61737365744e616d65`\n`INT policyid`\n`42 $MYPOLICY`\n`policyid.assetName`\n`$MYPOLICY.61737365744e616d65`\n`assetName`\n`+`\n\n`100 lovelace + 42 $MYPOLICY.666f6f + -2 $MYPOLICY.626172 + 10 lovelace`\n\n`100 lovelace + 42 $MYPOLICY.666f6f + -2 $MYPOLICY.626172 + 10 lovelace`\n\n**Negating individual values**\n\nAny individual value can be negated using the `-` prefix operator. For example:\n\n`-`\n`-42 $MYPOLICY`\n`-72191 $MYPOLICY.666f6f`\n`-100`\n`-920 lovelace`\n\n**Combining individual values**\n\nValues can be combined using the binary operator `+`. For example:\n\n`+`\n`42 lovelace + -1 (this would result in a Value of 41 lovelace)`\n`20 $MYPOLICY + 12 $MYPOLICY.666f6f + -2 $MYPOLICY.626172`\n`201 4$MYPOLICY.666f6f + 12 + -1 + 9 lovelace + 10 $MYPOLICY`\n\n### Creating a transaction[​](#creating-a-transaction \"Direct link to Creating a transaction\")\n\nThe native tokens syntax can be used in the following contexts:\n\n`cardano-cli conway transaction build-raw --tx-out=\"...\"`\n`cardano-cli conway transaction build-raw --mint=\"...\"`\n\nThe CLI command `cardano-cli conway transaction build-raw` creates the transaction body. The `--tx-out` option specifies the transaction output in the usual way *(This is expressed as address+lovelace, where address is a Bech32-encoded address, and lovelace is the amount in lovelace)*, and the `--mint` option specifies the value to be minted or burnt.\n\n`cardano-cli conway transaction build-raw`\n`--tx-out`\n`--mint`\n\n### Transaction outputs (TxOuts)[​](#transaction-outputs-txouts \"Direct link to Transaction outputs (TxOuts)\")\n\nThe syntax for TxOut values has been extended to include multi-asset tokens. These values can be specified in two different ways:\n\n`$address $value`\n`${address}+${value}`\n\n(where *address* is a Cardano address and *value* is a value). The second form is provided for backwards compatibility with earlier versions of the node.\n\nTo receive tokens, you just need to specify any address. It is not necessary to use special addresses to hold multi-asset tokens.\n\nTo inspect the values in an address, you need to query your node for the UTXOs associated to that address using:\n\n`cardano-cli query utxo --address \"$ADDRESS\"`\n\n## Token minting policies[​](#token-minting-policies \"Direct link to Token minting policies\")\n\nToken minting policies are written using multi-signature scripts. This allows the asset controller to express conditions such as the need for specific token issuers to agree to mint new tokens, or to forbid minting tokens after a certain slot if [token locking](/docs/get-started/cli-operations/simple-scripts/#type-before) is also used.\n\nHere’s an example of a very simple minting policy, which grants the right to mint tokens to a single key:\n\n`{  \n \"keyHash\": \"fe38d7...599\",  \n \"type\": \"sig\"  \n}`\n\nThis minting policy requires any transaction that mints tokens to be witnessed by the key with the hash `fe38d7...599`. More involved examples can be found in the [multi-signature simple scripts documentation](/docs/get-started/cli-operations/simple-scripts/#json-script-syntax).\n\n`fe38d7...599`\n\n### Minting a new native token[​](#minting-a-new-native-token \"Direct link to Minting a new native token\")\n\n#### Overview[​](#overview \"Direct link to Overview\")\n\nThis section describes how to manually mint a new native token ('customcoin') using cardano-cli, and send a transaction of this newly minted token to a new address.\n\n#### Pre-requisites[​](#pre-requisites \"Direct link to Pre-requisites\")\n\nDownload the latest version of [cardano-node from the releases page](https://github.com/intersectmbo/cardano-node/releases) and config files for the public testnet from the [Cardano World](https://book.world.dev.cardano.org/environments.html)\n\nRun the cardano-node:\n\n`cardano-node run --topology topology.json --database-path db --port 3001 --config config.json --socket-path node.socket  \n  \nexport CARDANO_NODE_SOCKET_PATH=~/node.socket`\n`cardano-cli address key-gen \\  \n --verification-key-file payment.vkey \\  \n --signing-key-file payment.skey`\n\nThe code should output something similar to this:\n\n`$ cat payment.skey   \n{  \n \"type\": \"PaymentSigningKeyShelley_ed25519\",  \n \"description\": \"Payment Signing Key\",  \n \"cborHex\": \"58206c7c578e06f9175e20e63353b9beac984183f47ea7778960def47974435829f3\"  \n}  \n$ cat payment.vkey   \n{  \n \"type\": \"PaymentVerificationKeyShelley_ed25519\",  \n \"description\": \"Payment Verification Key\",  \n \"cborHex\": \"5820e70b3f8c2c18cdacc46efee076963029ca22c853d58e99cbe78f9a8e64c8c85f\"  \n}`\n`cardano-cli address build \\  \n--payment-verification-key-file payment.vkey \\  \n--out-file payment.addr`\n\nThis code produces the following payment address:\n\n`$ cat payment.addr  \naddr_test1vp6jzppqqegyvjnwc25dg853eam2xmxvydjntfw6d8x4p7qrnsnj9`\n`cardano-cli query utxo --address`\n\nThe response should show no funds:\n\n `TxHash TxIx Amount  \n--------------------------------------------------------------------------------------`\n\nUse the [testnet faucet](https://docs.cardano.org/cardano-testnets/tools/faucet/) to fund your address,\n\nand check again:\n\n`cardano-cli query utxo --address $(< payment.addr)  \n TxHash TxIx Amount  \n--------------------------------------------------------------------------------------  \n503c699e81d4abc3f8a1d2681425aee1e2ac5770a5be5b9314339591a7158f34 0 10000000000 lovelace + TxOutDatumNone`\n\n#### Start the minting process[​](#start-the-minting-process \"Direct link to Start the minting process\")\n\n`mkdir policy  \n  \ncardano-cli address key-gen \\  \n --verification-key-file policy.vkey \\  \n --signing-key-file policy.skey  \n  \n  \ntouch policy.script && echo \"\" > policy.script   \n  \n  \necho \"{\" >> policy.script   \necho \" \\\"keyHash\\\": \\\"$(cardano-cli address key-hash --payment-verification-key-file policy.vkey)\\\",\" >> policy.script   \necho \" \\\"type\\\": \\\"sig\\\"\" >> policy.script   \necho \"}\" >> policy.script   \n  \ncat policy.script   \n{  \n \"keyHash\": \"3c293ef7fa09577e8a656016d59abe042ed9fe38cdfd9d81568450c6\",  \n \"type\": \"sig\"  \n}`\n\nThe policyID is the script hash of the `policy.script`:\n\n`policy.script`\n`cardano-cli hash script --script-file policy.script   \n  \n11375f8ee31c280e1f2ec6fe11a73bca79d7a6a64f18e1e6980f0c74`\n\nget the asset name in hex, our token will be named \"melcoin\":\n\n`echo -n \"customcoin\" | xxd -ps   \n  \n637573746f6d636f696e`\n\n#### Build the asset-minting transaction[​](#build-the-asset-minting-transaction \"Direct link to Build the asset-minting transaction\")\n\n`cardano-cli query protocol-parameters --out-file pparams.json`\n`customcoin`\n`cardano-cli conway transaction calculate-min-required-utxo \\  \n--protocol-params-file pparams.json \\  \n--tx-out addr_test1vp6jzppqqegyvjnwc25dg853eam2xmxvydjntfw6d8x4p7qrnsnj9+\"1000 11375f8ee31c280e1f2ec6fe11a73bca79d7a6a64f18e1e6980f0c74.637573746f6d636f696e\"  \nCoin 1051640`\n\nThis means that we need at least 1051640 lovelace at the utxo to support the 1000 `customcoin`. To give ourselves some room for future transactions where we might send `custocoin` to different addresses\nwe will send 10 ada on the minting transaction.\n\n`customcoin`\n`custocoin`\n`11375f8ee31c280e1f2ec6fe11a73bca79d7a6a64f18e1e6980f0c74.637573746f6d636f696e`\n`cardano-cli conway transaction build \\  \n--tx-in 503c699e81d4abc3f8a1d2681425aee1e2ac5770a5be5b9314339591a7158f34#0 \\  \n--tx-out $(< payment.addr)+10000000+\"1000 11375f8ee31c280e1f2ec6fe11a73bca79d7a6a64f18e1e6980f0c74.637573746f6d636f696e\" \\  \n--mint=\"1000 11375f8ee31c280e1f2ec6fe11a73bca79d7a6a64f18e1e6980f0c74.637573746f6d636f696e\" \\  \n--mint-script-file policy.script \\  \n--change-address $(< payment.addr) \\  \n--out-file mint-tx.raw  \n  \nEstimated transaction fee: Coin 175621`\n\n#### Sign the transaction:[​](#sign-the-transaction \"Direct link to Sign the transaction:\")\n\n`cardano-cli conway transaction sign \\  \n--tx-file mint-tx.raw \\  \n--signing-key-file policy.skey \\  \n--signing-key-file payment.skey \\  \n--out-file mint-tx.signed`\n\n#### Submit the transaction:[​](#submit-the-transaction \"Direct link to Submit the transaction:\")\n\n`cardano-cli conway transaction submit --tx-file mint-tx.signed  \nTransaction successfully submitted.`\n`cardano-cli query utxo --address $(< payment.addr)  \n TxHash TxIx Amount  \n--------------------------------------------------------------------------------------  \nd4b158e58cb58da28b25837300f6ef8f9f7d67fd5a5ce07648d17a6fae31b88a 0 10000000 lovelace + 1000 11375f8ee31c280e1f2ec6fe11a73bca79d7a6a64f18e1e6980f0c74.637573746f6d636f696e + TxOutDatumNone  \nd4b158e58cb58da28b25837300f6ef8f9f7d67fd5a5ce07648d17a6fae31b88a 1 9989824379 lovelace + TxOutDatumNone`\n\n### Transferring tokens[​](#transferring-tokens \"Direct link to Transferring tokens\")\n\nTokens can be sent just like ada by any token holder, just remember that it is not possible to send *only* native-assets in a transaction, some\nada always needs to be included in each output. The minimum amount is determined by the `utxoCostPerByte` protocol parameter. Also note that,\ncurrently, the `build` command cannot automatically balance native assets. This is, we need to manually balance native assets with `--tx-out` flags and\nuse `--change-address` to automatically balance ada-only utxos.\n\n`utxoCostPerByte`\n`build`\n`--tx-out`\n`--change-address`\n\nFor example, to send 1 `customcoin` to the address `addr_test1vp9khgeajxw8snjjvaaule727hpytrvpsnq8z7h9t3zeuegh55grh` we do:\n\n`customcoin`\n`addr_test1vp9khgeajxw8snjjvaaule727hpytrvpsnq8z7h9t3zeuegh55grh`\n`cardano-cli conway transaction calculate-min-required-utxo \\  \n--protocol-params-file pparams.json \\  \n--tx-out addr_test1vp9khgeajxw8snjjvaaule727hpytrvpsnq8z7h9t3zeuegh55grh+\"1 11375f8ee31c280e1f2ec6fe11a73bca79d7a6a64f18e1e6980f0c74.637573746f6d636f696e\"  \nCoin 1043020`\n\nand build the transaction with:\n\n`cardano-cli conway transaction build \\  \n--tx-in d4b158e58cb58da28b25837300f6ef8f9f7d67fd5a5ce07648d17a6fae31b88a#0 \\  \n--tx-in d4b158e58cb58da28b25837300f6ef8f9f7d67fd5a5ce07648d17a6fae31b88a#1 \\  \n--tx-out addr_test1vp9khgeajxw8snjjvaaule727hpytrvpsnq8z7h9t3zeuegh55grh+1043020+\"1 11375f8ee31c280e1f2ec6fe11a73bca79d7a6a64f18e1e6980f0c74.637573746f6d636f696e\" \\  \n--tx-out $(< payment.addr)+8956980+\"999 11375f8ee31c280e1f2ec6fe11a73bca79d7a6a64f18e1e6980f0c74.637573746f6d636f696e\" \\  \n--change-address $(< payment.addr) \\  \n--out-file tx.raw`\n`cardano-cli conway transaction sign --tx-file tx.raw --signing-key-file policy.skey --signing-key-file payment.skey --out-file tx.signed`\n`cardano-cli conway transaction submit --tx-file tx.signedTransaction successfully submitted.`\n\n### Buying and spending tokens[​](#buying-and-spending-tokens \"Direct link to Buying and spending tokens\")\n\nToken holders “buy” tokens from a token issuer. This will usually involve sending some ada to a specific address that has been set up by the token issuer and informing the token issuer about the address where the tokens should be sent. The token issuer will then set up a transaction that will transfer a multi-asset token to the specified address.\n\nTokens that have been issued to a token holder can be “spent” by returning them to a token issuer (i.e. by redeeming the tokens). This is done using a normal transaction. The token issuer will then provide the token holder with the agreed object in return (which may be an item of value, a service, a different kind of token, some ada, etc).\n\n`cardano-cli conway transaction build-raw ... --out-file txbody  \n   \ncardano-cli conway transaction sign ... --tx-body-file txbody --out-file tx  \n  \ncardano-cli conway transaction submit ... --tx-file tx`\n\n### Destroying (burning) tokens[​](#destroying-burning-tokens \"Direct link to Destroying (burning) tokens\")\n\nTokens can be destroyed by a token issuer according to the token policy by supplying a negative value in the `--mint` field. That allows acquiring tokens in the UTXO entry in the input of a transaction, without adding them to one of the outputs, effectively destroying them. For example, tokens created in the previous section can be destroyed as follows:\n\n`--mint`\n`TXID1=$(cardano-cli conway transaction txid --tx-body-file \"$TX_BODY_FILE_1\")  \nTX_BODY_FILE_2=...  \nTX_FILE_2=...  \n   \ncardano-cli conway transaction build-raw \\  \n--fee 0 \\  \n--tx-in \"$TXID1\"#0 \\  \n--tx-out=\"$ADDR+$LOVELACE\" \\  \n--mint=\"-5 $POLICYID.637573746f6d636f696e\" \\  \n--out-file \"$TX_BODY_FILE_2\"  \n   \ncardano-cli conway transaction sign \\  \n--signing-key-file \"$SPENDING_KEY\" \\  \n--signing-key-file \"$MINTING_KEY\" \\  \n--script-file \"$SCRIPT\" \\  \n--tx-body-file \"$TX_BODY_FILE_2\" \\  \n--out-file \"TX_FILE_2\"  \n   \ncardano-cli conway transaction submit --tx-file \"$TX_FILE_2\"`\n\nNote: Destroying tokens requires both the payment credential for using the UTXO entry with the tokens, *and* a credential for the minting policy script.",
  "images": [],
  "extraction_metadata": {
    "batch_number": 5,
    "extraction_timestamp": "2025-09-19T14:04:40.000976",
    "extraction_time": 1.9930140972137451,
    "source": "tavily_api_raw"
  }
}