{
  "url": "https://developers.cardano.org/docs/get-started/mesh/transactions-smart-contract",
  "content": "![Cardano Logo](/img/cardano-black.svg)\n![Cardano Logo](/img/cardano-white.svg)\n\n# Smart Contracts Transactions\n\nIn this section, we will look at how to create transactions to work with smart contracts. If you are new to transactions, be sure to check out how to create transactions to [send lovelace and assets](/docs/get-started/mesh/transactions-basic).\n\nWe have also released a collection of Aiken smart contracts and its corresponding transactions. You can check out the [Aiken Playground](https://meshjs.dev/smart-contracts) for live demo and full explanation.\n\nIn this section, we will explore the following:\n\n## Lock Assets in Smart Contract[​](#lock-assets-in-smart-contract \"Direct link to Lock Assets in Smart Contract\")\n\nToken locking is a feature where certain assets are reserved on the smart contract. The assets can only be unlocked when certain conditions are met, for example, when making a purchase.\n\nTo lock assets in the always succeed contract:\n\n`import { Transaction } from \"@meshsdk/core\";  \n  \n// this is the script address of always succeed contract  \nconst scriptAddress = \"addr_test1wpnlxv2xv9a9ucvnvzqakwepzl9ltx7jzgm53av2e9ncv4sysemm8\";  \n  \nconst tx = new Transaction({ initiator: wallet }).sendAssets(  \n {  \n address: scriptAddress,  \n datum: {  \n value: \"supersecret\",  \n },  \n },  \n [  \n {  \n unit: \"64af286e2ad0df4de2e7de15f8ff5b3d27faecf4ab2757056d860a424d657368546f6b656e\",  \n quantity: \"1\",  \n },  \n ]  \n);  \n  \nconst unsignedTx = await tx.build();  \nconst signedTx = await wallet.signTx(unsignedTx);  \nconst txHash = await wallet.submitTx(signedTx);`\n\n[Try demo](https://meshjs.dev/apis/transaction/smart-contract#lockAssets)\n\n## Unlock Assets from Smart Contract[​](#unlock-assets-from-smart-contract \"Direct link to Unlock Assets from Smart Contract\")\n\nAs we may have locked assets in the contract, you can create transactions to unlock the assets with a redeemer that corresponds to the datum. Define the corresponding code to create the datum, only a transaction with the correct datum hash is able to unlock the asset. Define the unit of the locked asset to search for the UTXO in the smart contract, which is required for the transaction's input.\n\n`async function _getAssetUtxo({ scriptAddress, asset, datum }) {  \n const koios = new KoiosProvider(\"preprod\");  \n  \n const utxos = await koios.fetchAddressUTxOs(scriptAddress, asset);  \n  \n const dataHash = resolveDataHash(datum);  \n  \n let utxo = utxos.find((utxo: any) => {  \n return utxo.output.dataHash == dataHash;  \n });  \n  \n return utxo;  \n}  \n  \n// fetch input UTXO  \nconst assetUtxo = await _getAssetUtxo({  \n scriptAddress: \"addr_test1wpnlxv2xv9a9ucvnvzqakwepzl9ltx7jzgm53av2e9ncv4sysemm8\",  \n asset: \"64af286e2ad0df4de2e7de15f8ff5b3d27faecf4ab2757056d860a424d657368546f6b656e\",  \n datum: \"supersecret\",  \n});  \n  \n// get wallet change address  \nconst address = await wallet.getChangeAddress();  \n  \n// create the unlock asset transaction  \nconst tx = new Transaction({ initiator: wallet })  \n .redeemValue({  \n value: assetUtxo,  \n script: {  \n version: \"V1\",  \n code: \"4e4d01000033222220051200120011\",  \n },  \n datum: \"supersecret\",  \n })  \n .sendValue(address, assetUtxo) // address is recipient address  \n .setRequiredSigners([address]);  \n  \nconst unsignedTx = await tx.build();  \n// note that the partial sign is set to true  \nconst signedTx = await wallet.signTx(unsignedTx, true);  \nconst txHash = await wallet.submitTx(signedTx);`\n\n[Try demo](https://meshjs.dev/apis/transaction/smart-contract#unlockAssets)\n\n## Minting Assets with Smart Contract[​](#minting-assets-with-smart-contract \"Direct link to Minting Assets with Smart Contract\")\n\nWe can use a Plutus Script to mint tokens. This script is designed to always succeed, meaning that anyone can sign and mint tokens with it, as there are no validation on this script.\n\n`import {  \n Transaction,  \n AssetMetadata,  \n Mint,  \n Action,  \n PlutusScript,  \n} from \"@meshsdk/core\";  \n  \nconst script: PlutusScript = {  \n code: plutusMintingScriptCbor,  \n version: \"V2\",  \n};  \n  \nconst redeemer: Partial<Action> = {  \n tag: \"MINT\",  \n};  \n  \nconst tx = new Transaction({ initiator: wallet });  \n  \nconst assetMetadata1: AssetMetadata = {  \n name: \"Mesh Token\",  \n image: \"ipfs://QmRzicpReutwCkM6aotuKjErFCUD213DpwPq6ByuzMJaua\",  \n mediaType: \"image/jpg\",  \n description: \"This NFT is minted by Mesh (https://meshjs.dev/).\",  \n};  \nconst asset1: Mint = {  \n assetName: \"MeshToken\",  \n assetQuantity: \"1\",  \n metadata: assetMetadata1,  \n label: \"721\",  \n recipient: \"addr_test1vpvx0sacufuypa2k4sngk7q40zc5c4npl337uusdh64kv0c7e4cxr\",  \n};  \ntx.mintAsset(script, asset1, redeemer);  \n  \nconst unsignedTx = await tx.build();  \nconst signedTx = await wallet.signTx(unsignedTx);  \nconst txHash = await wallet.submitTx(signedTx);`\n\nCheck out the [Mesh Playground](https://meshjs.dev/apis/transaction/smart-contract) for live demo and full explanation.",
  "images": [],
  "extraction_metadata": {
    "batch_number": 6,
    "extraction_timestamp": "2025-09-19T14:04:44.452431",
    "extraction_time": 1.4428989887237549,
    "source": "tavily_api_raw"
  }
}