{
  "url": "https://developers.cardano.org/docs/get-started/cardano-serialization-lib/create-react-app",
  "content": "![Cardano Logo](/img/cardano-black.svg)\n![Cardano Logo](/img/cardano-white.svg)\n\n# Create React App for Serialization-Lib\n\n## cardano-wallet-connector[​](#cardano-wallet-connector \"Direct link to cardano-wallet-connector\")\n\n`cardano-wallet-connector` is a Create React App boilerplate code that includes examples of how to use the Serialization-Lib to connect\nto different Cardano Web wallets and send transactions. This lets developers who are familiar with React JS to get started\nquickly with Cardano. The boilerplate code includes examples of how to execute simple transaction of sending someone ADA\nand also how to interact with Plutus scripts (locking and redeeming assets from scripts). A developer familiar with React JS can clone\nthe GitHub repo and start building DApps\n\n`cardano-wallet-connector`\n\nGitHub: [cardano-wallet-connector](https://github.com/dynamicstrategies/cardano-wallet-connector)\n\n## Table of Contents[​](#table-of-contents \"Direct link to Table of Contents\")\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\nReact JS is by far the most popular front-end framework and continues to grow fast, judging by the number of\nStackoverflow questions when compared to other frameworks such as Angular, Vue and Svelte ([source](https://gist.github.com/tkrotoff/b1caa4c3a185629299ec234d2314e190)).\nIt is also well documented, so that a beginner with some Javascript knowledge can pick it up,\nand powerful enough that more sophisticated full stack frameworks such as Next JS incorporate it.\n\nA Create React App is the command that any new application is created with in React JS and anyone who has used this framework before\nwill know what it is and what to do with it.\n\nReact also has a mobile extension called React Native and the Serialization Lib has binding for it. Therefore choosing React Js\nas starting point for a new projects comes with benefits that it can be expanded to a full stack, or a mobile project later on.\n\nHaving boilerplate code for React JS makes it easy for a large population of developers to get up and running quickly with Cardano.\nAnd those familiar with other front-end frameworks can pick-it-up quickly after a short revision of [React basics](https://reactjs.org/docs/create-a-new-react-app.html)\n\n## Use Cases[​](#use-cases \"Direct link to Use Cases\")\n\nThe boilerplate code covers the following use cases, starting with the simplest and working toward the more\ninvolved examples of interacting with smart contracts\n\nIn all of these examples the user signs the transactions with their Web wallet.\nThe wallets included in the boilerplate are Nami, Flint and CCVault\n(this last one has been rebranded to Eternlwallet at the end of March 2022). The code is extensible to other\nwallets by adding a few lines of code as long as wallet follows the [CIP-30 standard](https://cips.cardano.org/cips/cip30/)\n\n## Installation[​](#installation \"Direct link to Installation\")\n\nClone the Git repository into your dev machine and start a local server. When it finishes loading it will tell you what\nIP and port number it started on. In most cases it will be on localhost:3000. If the browser does not\nautomatically open this address then open `localhost:3000` in your web browser.\n\n`localhost:3000`\n`git clone https://github.com/dynamicstrategies/cardano-wallet-connector.git  \ncd cardano-wallet-connector  \nnpm install  \nnpm start`\n\nCheck the Node version that you are running and make sure that it is version 14 or greater\n\n`node --version`\n\n## Code Walkthrough[​](#code-walkthrough \"Direct link to Code Walkthrough\")\n\nIn this section we will walkthrough the code and explain what different parts of it do. This should give the reader\na better understanding of what code is doing and what and then use this\ninformation to built their own use cases. For this we will start with the example of how to Send some ada to an address\n\nBuilding a Sending a transaction can be broken down into 8 steps:\n\n### 1. Define Protocol Parameters[​](#1-define-protocol-parameters \"Direct link to 1. Define Protocol Parameters\")\n\nThese parameters are set by Cardano and are static for the most part. If in doubt, the parameters can be checked by looking\nin the table called `epoch_param` that is maintained by the `cardano-db-sync` service - how this is done is out of scope,\nfor more info consult [cardano-db-sync](https://github.com/IntersectMBO/cardano-db-sync)\n\n`epoch_param`\n`cardano-db-sync`\n`this.protocolParams = {  \n linearFee: {  \n minFeeA: \"44\",  \n minFeeB: \"155381\",  \n },  \n minUtxo: \"34482\",  \n poolDeposit: \"500000000\",  \n keyDeposit: \"2000000\",  \n maxValSize: 5000,  \n maxTxSize: 16384,  \n priceMem: 0.0577,  \n priceStep: 0.0000721,  \n coinsPerUtxoWord: \"34482\",  \n}`\n\n### 2. Initialize the Transaction Builder[​](#2-initialize-the-transaction-builder \"Direct link to 2. Initialize the Transaction Builder\")\n\nThe transaction builder is initialized by giving it the protocol parameters\n\n`initTransactionBuilder = async () => {  \n  \n const txBuilder = TransactionBuilder.new(  \n TransactionBuilderConfigBuilder.new()  \n .fee_algo(  \n LinearFee.new(  \n BigNum.from_str(this.protocolParams.linearFee.minFeeA),   \n BigNum.from_str(this.protocolParams.linearFee.minFeeB)  \n )  \n )  \n .pool_deposit(BigNum.from_str(this.protocolParams.poolDeposit))  \n .key_deposit(BigNum.from_str(this.protocolParams.keyDeposit))  \n .coins_per_utxo_word(BigNum.from_str(this.protocolParams.coinsPerUtxoWord))  \n .max_value_size(this.protocolParams.maxValSize)  \n .max_tx_size(this.protocolParams.maxTxSize)  \n .prefer_pure_change(true)  \n .build()  \n );  \n  \n return txBuilder  \n}`\n\n### 3. Add UTXOs to the Transaction as Inputs[​](#3-add-utxos-to-the-transaction-as-inputs \"Direct link to 3. Add UTXOs to the Transaction as Inputs\")\n\nDefine the address where the ada will be sent and the address to where any change will be given after the transaction builder is\ndone with balancing the transaction (so that the inputs + fees are always equal to the outputs). The first address is usually where you\nwant to send the ada (your friend, or plutus script address) and the second address is usually your own wallet address, so that the change\ncomes back to you.\n\n`const shelleyOutputAddress = Address.from_bech32(this.state.addressBech32SendADA)  \nconst shelleyChangeAddress = Address.from_bech32(this.state.changeAddress)`\n\nThen add inputs to the transaction. This can be done by giving the Transaction Builder all the\navailable UTXOs in your wallet and the letting the Transaction Builder choose which ones to use.\nThere are a number of algorithms to choose from for how the Transaction Builder will choose the UTXOs. The available ones are\n`0` for LargestFirst, `1` for RandomImprove, `2` for LargestFirstMultiAsset and `3` for RandomImproveMultiAsset\nIn this example we use the RandomImprove algorithm.\n\n`0`\n`1`\n`2`\n`3`\n`const txUnspentOutputs = await this.getTxUnspentOutputs();  \ntxBuilder.add_inputs_from(txUnspentOutputs, 1)`\n\nNote that as of version Serialization-Lib v10, it now has these UTXO selection algorithms built-in.\nIn the previous versions of teh Serialization-Lib, the RandomImprove had to be done using other libraries which and as a result you still might\nsee this when reading code from implementation of others - be careful to check which version of the Serialization-Lib they are using\n\n### 4. Add Outputs to the Transaction[​](#4-add-outputs-to-the-transaction \"Direct link to 4. Add Outputs to the Transaction\")\n\nEvery transaction needs some Outputs that it will spend. When sending ada the amount needs to be sent in Lovelaces and\nthere are 1 000 000 lovelaces in 1 ada. The amount of lovelaces to send needs to be give as a String\n\n`txBuilder.add_output(  \n TransactionOutput.new(  \n shelleyOutputAddress,  \n Value.new(BigNum.from_str(this.state.lovelaceToSend.toString()))  \n ),  \n);`\n\n### 5. Add the Address where Change will be sent[​](#5-add-the-address-where-change-will-be-sent \"Direct link to 5. Add the Address where Change will be sent\")\n\nThis is needed to ensure that the values of inputs + fees is\nalways equal to the value of outputs\n\n`txBuilder.add_change_if_needed(shelleyChangeAddress)`\n\n### 6. Build the Body of the Transaction[​](#6-build-the-body-of-the-transaction \"Direct link to 6. Build the Body of the Transaction\")\n\nA transaction is composed of the Body that defines what inputs and outputs are affected, and\nthe Transaction Witness that defines who signed the transaction and in cases where\nPlutus scripts are involved it also carries Datums and Validation logic. This step builds\nthe Transaction Body\n\n`const txBody = txBuilder.build();`\n\nThe next step creates the Transaction Witness\n\n### 7. Sign the Transaction[​](#7-sign-the-transaction \"Direct link to 7. Sign the Transaction\")\n\nA Transaction Witness is created, added to the transaction and the transaction is signed with the Web wallet.\nWhen this part of the code is executed a pop-up from the user's web wallet will ask for the user to provide the password to their wallet\nand once the user provides the password the wallet then Signs the transaction\n\n`const transactionWitnessSet = TransactionWitnessSet.new();  \n  \nconst tx = Transaction.new(  \n txBody,  \n TransactionWitnessSet.from_bytes(transactionWitnessSet.to_bytes())  \n)  \n  \nlet txVkeyWitnesses = await this.API.signTx(  \n Buffer.from(  \n tx.to_bytes(), \"utf8\"  \n ).toString(\"hex\"),   \n true  \n);  \n  \ntxVkeyWitnesses = TransactionWitnessSet.from_bytes(  \n Buffer.from(txVkeyWitnesses, \"hex\")  \n);  \n  \ntransactionWitnessSet.set_vkeys(txVkeyWitnesses.vkeys());  \n  \nconst signedTx = Transaction.new(  \n tx.body(),  \n transactionWitnessSet  \n);`\n\n### 8. Send the Transaction[​](#8-send-the-transaction \"Direct link to 8. Send the Transaction\")\n\nThe last step is to submit the transaction to the web wallet. The web wallet then forwards it to the blockchain.\nIf the submitted transaction passes validation checks that are done by the wallet it will return a transaction Id which means that\nthe transaction has been added to the Mempool and waiting to be added to be included in one of the upcoming blocks.\n\n`const submittedTxHash = await this.API.submitTx(  \n Buffer.from(  \n signedTx.to_bytes(), \"utf8\"  \n ).toString(\"hex\")  \n);  \nconsole.log(submittedTxHash)`\n\nWe can `console.log(submittedTxHash)` the Transaction Hash and go try to find it on a blockchain explorer such as [cardanoscan.io](https://cardanoscan.io/)\n\n`console.log(submittedTxHash)`\n\n## UI Components[​](#ui-components \"Direct link to UI Components\")\n\nWhen building a front-end app it is useful to have buttons, forms and other components that the user can interact with.\nSo included in the Create React App is an example of UI components from Blueprint JS which is a high performance\nReact-based UI toolkit for the web. It is an opensource project developer by Palantir that has an extensive library\nfor building applications and is well documented\n\nLink to [Blueprint UI docs](https://blueprintjs.com/docs/)\n\n## Demo[​](#demo \"Direct link to Demo\")\n\nA working demo of this Create React App is available [HERE](https://dynamicstrategies.io/wconnector)\n\n## Troubleshooting[​](#troubleshooting \"Direct link to Troubleshooting\")\n\n### Out of Memory[​](#out-of-memory \"Direct link to Out of Memory\")\n\nIf you get an error that starts with:\n\n`FATAL ERROR: Reached heap limit Allocation failed - JavaScript heap out of memory ...`\n\n`FATAL ERROR: Reached heap limit Allocation failed - JavaScript heap out of memory ...`\n\nthen run this snippet in your terminal before executing `npm start`\n\n`npm start`\n`export NODE_OPTIONS=\"--max-old-space-size=8192\"`\n\n### Not Enough ADA[​](#not-enough-ada \"Direct link to Not Enough ADA\")\n\nIf you get this error:\n\n`Not enough ADA leftover to include non-ADA assets in a change address ...`\n\n`Not enough ADA leftover to include non-ADA assets in a change address ...`\n\nThen first make sure that you have enough ada in your wallet and then try changing the \"strategy\" number\nin this part of the code `txBuilder.add_inputs_from(txUnspentOutputs, 1)` which determines how it selects\navailable UTXOs from your wallet from section [Add UTXOs to the Transaction as Inputs](#3-add-utxos-to-the-transaction-as-inputs).\nThe options are `0` for LargestFirst, `1` for RandomImprove, `2` for LargestFirstMultiAsset and `3` for RandomImproveMultiAsset\n\n`txBuilder.add_inputs_from(txUnspentOutputs, 1)`\n`0`\n`1`\n`2`\n`3`",
  "images": [],
  "extraction_metadata": {
    "batch_number": 4,
    "extraction_timestamp": "2025-09-19T14:04:34.999822",
    "extraction_time": 3.8223392963409424,
    "source": "tavily_api_raw"
  }
}