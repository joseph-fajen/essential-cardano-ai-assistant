{
  "url": "https://developers.cardano.org/docs/operate-a-stake-pool/block-producer-keys",
  "content": "![Cardano Logo](/img/cardano-black.svg)\n![Cardano Logo](/img/cardano-white.svg)\n\n# Generating Cardano Block producer Keys\n\nTo run a stake pool, three key pairs are needed:\n\nTo understand the purpose of these keys, refer to [Cardano Key Pairs](/docs/operate-a-stake-pool/cardano-key-pairs).\n\nFirst we change to the keys folder we created in last chapter -\n\n`cd $HOME/cardano-testnet/keys`\n\n## Generating Cold Keys[​](#generating-cold-keys \"Direct link to Generating Cold Keys\")\n\nMake a set of cold keys and create the cold counter file.\n\n`cardano-cli node key-gen \\  \n --cold-verification-key-file cold.vkey \\  \n --cold-signing-key-file cold.skey \\  \n --operational-certificate-issue-counter cold.counter`\n\n## Generating KES Keys[​](#generating-kes-keys \"Direct link to Generating KES Keys\")\n\n`cardano-cli node key-gen-KES \\  \n --verification-key-file kes.vkey \\  \n --signing-key-file kes.skey`\n\n## Generating VRF Keys[​](#generating-vrf-keys \"Direct link to Generating VRF Keys\")\n\nMake a VRF key pair.\n\n`cardano-cli node key-gen-VRF \\  \n --verification-key-file vrf.vkey \\  \n --signing-key-file vrf.skey`\n\nand update vrf key permissions to read-only.\n\n`chmod 400 vrf.skey`\n\n## StakePool operational certificate generation[​](#stakepool-operational-certificate-generation \"Direct link to StakePool operational certificate generation\")\n\nDetermine the number of slots per KES period from the genesis file.\n\n`slotsPerKESPeriod=$(cat ../shelley-genesis.json | jq -r '.slotsPerKESPeriod')  \necho slotsPerKESPeriod: ${slotsPerKESPeriod}  \n  \nslotNo=$(cardano-cli query tip --testnet-magic 1 | jq -r '.slot')  \necho slotNo: ${slotNo}`\n\nFind `kesPeriod` by dividing the slot tip number by `slotsPerKESPeriod`.\n\n`kesPeriod`\n`slotsPerKESPeriod`\n`kesPeriod=$((${slotNo} / ${slotsPerKESPeriod}))  \necho kesPeriod: ${kesPeriod}  \nstartKesPeriod=${kesPeriod}  \necho startKesPeriod: ${startKesPeriod}`\n\nWith this calculation, we can generate an operational certificate for the pool. Change the `{startKesPeriod}` in script from the value above accordingly.\n\n`{startKesPeriod}`\n`cardano-cli node issue-op-cert \\  \n --kes-verification-key-file kes.vkey \\  \n --cold-signing-key-file cold.skey \\  \n --operational-certificate-issue-counter cold.counter \\  \n --kes-period <startKesPeriod> \\  \n --out-file node.cert`\n\n## Update Startup Script[​](#update-startup-script \"Direct link to Update Startup Script\")\n\nIf we run gLiveView now, we will see that the node is running as a Relay.\n\n`cd ..  \n./gLiveView.sh`\n\n![Relay](/assets/images/snsky_relay-e95925003b4152a67443bee8bf3a46ef.jpg)\n\n![Relay](/assets/images/snsky_relay-e95925003b4152a67443bee8bf3a46ef.jpg)\n\nTo update the node startup script with the new KES, VRF and Operation Certificate:\n\n`cat > startTestNode.sh<< EOF   \n#!/bin/bash  \n# Set a variable to indicate the port where the Cardano Node listens  \nPORT=6001  \n# Set a variable to indicate the local IP address of the computer where Cardano Node runs  \n# 0.0.0.0 listens on all local IP addresses for the computer  \nHOSTADDR=0.0.0.0  \n# Set a variable to indicate the file path to your topology file  \nTOPOLOGY=$HOME/cardano-testnet/topology.json  \n# Set a variable to indicate the folder where Cardano Node stores blockchain data  \nDB_PATH=$HOME/cardano-testnet/db  \n# Set a variable to indicate the path to the Cardano Node socket for Inter-process communication (IPC)  \nSOCKET_PATH=$HOME/cardano-testnet/db/socket  \n# Set a variable to indicate the file path to your main Cardano Node configuration file  \nCONFIG=$HOME/cardano-testnet/config.json  \n# Set the pool keys  \nKES=$HOME/cardano-testnet/keys/kes.skey  \nVRF=$HOME/cardano-testnet/keys/vrf.skey  \nCERT=$HOME/cardano-testnet/keys/node.cert  \n#  \n# Run Cardano Node using the options that you set using variables  \n#  \ncardano-node run --topology \\${TOPOLOGY} --database-path \\${DB_PATH} --socket-path \\${SOCKET_PATH} --host-addr \\${HOSTADDR} --port \\${PORT} --config \\${CONFIG} --shelley-kes-key \\${KES} --shelley-vrf-key \\${VRF} --shelley-operational-certificate \\${CERT}  \nEOF`\n\nRestart the node:\n\n`sudo systemctl reload-or-restart cardano-testnode`\n\nAfter the restart, if we run gLiveView again we should see that the node has changed from Relay to Core Node:\n\n![Block Producer](/assets/images/snsky_producer-6b045bf03699b4e569f33cab1e6d3320.jpg)\n\n![Block Producer](/assets/images/snsky_producer-6b045bf03699b4e569f33cab1e6d3320.jpg)\n\nNow we have converted the relay node to block producing node. The next step will be to register the pool on the network.",
  "images": [],
  "extraction_metadata": {
    "batch_number": 8,
    "extraction_timestamp": "2025-09-19T14:04:55.057544",
    "extraction_time": 2.1853792667388916,
    "source": "tavily_api_raw"
  }
}