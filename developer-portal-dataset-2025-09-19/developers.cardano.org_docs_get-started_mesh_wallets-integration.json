{
  "url": "https://developers.cardano.org/docs/get-started/mesh/wallets-integration",
  "content": "![Cardano Logo](/img/cardano-black.svg)\n![Cardano Logo](/img/cardano-white.svg)\n\n# Wallets Integration\n\nWith Mesh, you can initialize a new wallet with:\n\n## Browser Wallet[​](#browser-wallet \"Direct link to Browser Wallet\")\n\n[Browser Wallet](https://meshjs.dev/apis/wallets/browserwallet) is use for connecting, queries and performs wallet functions in accordance to [CIP-30](https://github.com/cardano-foundation/CIPs/tree/master/CIP-0030), which defines the API for dApps to communicate with the user's wallet.\n\nTo use Browser Wallet is simple, just import `BrowserWallet` execute the APIs, for example:\n\n`BrowserWallet`\n`// import BrowserWallet  \nimport { BrowserWallet } from '@meshsdk/core';  \n  \n// connect to a wallet  \nconst wallet = await BrowserWallet.enable('eternl');  \n  \n// get assets in wallet  \nconst assets = await wallet.getAssets();`\n\n| APIs |  |\n| --- | --- |\n| [Get installed wallets](https://meshjs.dev/apis/wallets/browserwallet#getInstallWallets) | `BrowserWallet.getInstalledWallets();` |\n| [Connect wallet](https://meshjs.dev/apis/wallets/browserwallet#connectWallet) | `const wallet = await BrowserWallet.enable('eternl');` |\n| [Get balance](https://meshjs.dev/apis/wallets/browserwallet#getBalance) | `const balance = await wallet.getBalance();` |\n| [Get change address](https://meshjs.dev/apis/wallets/browserwallet#getChangeAddress) | `const changeAddress = await wallet.getChangeAddress();` |\n| [Get network ID](https://meshjs.dev/apis/wallets/browserwallet#getNetworkId) | `const networkId = await wallet.getNetworkId();` |\n| [Get reward addresses](https://meshjs.dev/apis/wallets/browserwallet#getRewardAddresses) | `const rewardAddresses = await wallet.getRewardAddresses();` |\n| [Get used addresses](https://meshjs.dev/apis/wallets/browserwallet#getUsedAddresses) | `const usedAddresses = await wallet.getUsedAddresses();` |\n| [Get unused addresses](https://meshjs.dev/apis/wallets/browserwallet#getUnusedAddresses) | `const unusedAddresses = await wallet.getUnusedAddresses();` |\n| [Get UTXOs](https://meshjs.dev/apis/wallets/browserwallet#getUtxos) | `const utxos = await wallet.getUtxos();` |\n| [Sign data](https://meshjs.dev/apis/wallets/browserwallet#signData) | `const addresses = await wallet.getUsedAddresses(); const signature = await wallet.signData(addresses[0], 'mesh');` |\n| [Sign transaction](https://meshjs.dev/apis/wallets/browserwallet#signTx) | `const signedTx = await wallet.signTx(tx, partialSign?);` |\n| [Submit transaction](https://meshjs.dev/apis/wallets/browserwallet#submitTx) | `const txHash = await wallet.submitTx(signedTx);` |\n| [Get lovelace](https://meshjs.dev/apis/wallets/browserwallet#getLovelace) | `const lovelace = await wallet.getLovelace();` |\n| [Get assets](https://meshjs.dev/apis/wallets/browserwallet#getAssets) | `const assets = await wallet.getAssets();` |\n| [Get policy IDs](https://meshjs.dev/apis/wallets/browserwallet#getPolicyIds) | `const policyIds = await wallet.getPolicyIds();` |\n| [Get collection of assets](https://meshjs.dev/apis/wallets/browserwallet#getPolicyIdAssets) | `const assets = await wallet.getPolicyIdAssets('64af2...42');` |\n| [Get Supported Extensions](https://meshjs.dev/apis/wallets/browserwallet#getSupportedExtensions) | `await wallet.getSupportedExtensions('eternl');` |\n| [Get Extensions](https://meshjs.dev/apis/wallets/browserwallet#getExtensions) | `await wallet.getExtensions();` |\n| [Get DRep ID Key](https://meshjs.dev/apis/wallets/browserwallet#getSupportedExtensions) | `await wallet.getPubDRepKey();` |\n| [Get Registered Pub Stake Keys](https://meshjs.dev/apis/wallets/browserwallet#getRegisteredpubstakekeys) | `await wallet.getRegisteredPubStakeKeys();` |\n\n`BrowserWallet.getInstalledWallets();`\n`const wallet = await BrowserWallet.enable('eternl');`\n`const balance = await wallet.getBalance();`\n`const changeAddress = await wallet.getChangeAddress();`\n`const networkId = await wallet.getNetworkId();`\n`const rewardAddresses = await wallet.getRewardAddresses();`\n`const usedAddresses = await wallet.getUsedAddresses();`\n`const unusedAddresses = await wallet.getUnusedAddresses();`\n`const utxos = await wallet.getUtxos();`\n`const addresses = await wallet.getUsedAddresses(); const signature = await wallet.signData(addresses[0], 'mesh');`\n`const signedTx = await wallet.signTx(tx, partialSign?);`\n`const txHash = await wallet.submitTx(signedTx);`\n`const lovelace = await wallet.getLovelace();`\n`const assets = await wallet.getAssets();`\n`const policyIds = await wallet.getPolicyIds();`\n`const assets = await wallet.getPolicyIdAssets('64af2...42');`\n`await wallet.getSupportedExtensions('eternl');`\n`await wallet.getExtensions();`\n`await wallet.getPubDRepKey();`\n`await wallet.getRegisteredPubStakeKeys();`\n\nDefinitely do check out the [Mesh Playground](https://meshjs.dev/apis/wallets/browserwallet) for live demo and full explanation.\n\n## Mesh Wallet[​](#mesh-wallet \"Direct link to Mesh Wallet\")\n\n[App Wallet](https://meshjs.dev/apis/wallets/meshwallet) is use for building transactions in your applications. You can import App Wallet with:\n\n`import { MeshWallet } from '@meshsdk/core';`\n\n### Generate a new wallet[​](#generate-a-new-wallet \"Direct link to Generate a new wallet\")\n\n`import { MeshWallet } from '@meshsdk/core';  \n  \nconst mnemonic = MeshWallet.brew();`\n\n### Load with Cardano CLI generated keys[​](#load-with-cardano-cli-generated-keys \"Direct link to Load with Cardano CLI generated keys\")\n\n`import { MeshWallet } from '@meshsdk/core';  \n  \nconst wallet = new MeshWallet({  \n networkId: 0,  \n fetcher: blockchainProvider,  \n submitter: blockchainProvider,  \n key: {  \n type: 'cli',  \n payment: '5820aaca553a7b95b38b5d9b82a5daa7a27ac8e34f3cf27152a978f4576520dd6503',  \n stake: '582097c458f19a3111c3b965220b1bef7d548fd75bc140a7f0a4f080e03cce604f0e',  \n },  \n});`\n\n### Load with mnemonic phrases[​](#load-with-mnemonic-phrases \"Direct link to Load with mnemonic phrases\")\n\n`import { MeshWallet } from '@meshsdk/core';  \n  \nconst wallet = new MeshWallet({  \n networkId: 0,  \n fetcher: blockchainProvider,  \n submitter: blockchainProvider,  \n key: {  \n type: 'mnemonic',  \n words: [\"solution\",\"solution\",\"solution\",\"solution\",\"solution\",\"solution\",\"solution\",\"solution\",\"solution\",\"solution\",\"solution\",\"solution\",\"solution\",\"solution\",\"solution\",\"solution\",\"solution\",\"solution\",\"solution\",\"solution\",\"solution\",\"solution\",\"solution\",\"solution\"],  \n },  \n});`\n\n### Load with private keys[​](#load-with-private-keys \"Direct link to Load with private keys\")\n\n`import { MeshWallet } from '@meshsdk/core';  \n  \nconst wallet = new MeshWallet({  \n networkId: 0,  \n fetcher: blockchainProvider,  \n submitter: blockchainProvider,  \n key: {  \n type: 'root',  \n bech32: 'xprv1cqa46gk29plgkg98upclnjv5t425fcpl4rgf9mq2txdxuga7jfq5shk7np6l55nj00sl3m4syzna3uwgrwppdm0azgy9d8zahyf32s62klfyhe0ayyxkc7x92nv4s77fa0v25tufk9tnv7x6dgexe9kdz5gpeqgu',  \n },  \n});`\n\n### Read only wallet[​](#read-only-wallet \"Direct link to Read only wallet\")\n\n`import { MeshWallet } from '@meshsdk/core';  \n  \nconst wallet = new MeshWallet({  \n networkId: 0,  \n fetcher: blockchainProvider,  \n submitter: blockchainProvider,  \n key: {  \n type: 'address',  \n address: 'addr_test1qpvx0sacufuypa2k4sngk7q40zc5c4npl337uusdh64kv0uafhxhu32dys6pvn6wlw8dav6cmp4pmtv7cc3yel9uu0nq93swx9',  \n },  \n});`\n\nCheck out the [Mesh Playground](https://meshjs.dev/apis/wallets/meshwallet) for live demo and full explanation.",
  "images": [],
  "extraction_metadata": {
    "batch_number": 6,
    "extraction_timestamp": "2025-09-19T14:04:44.452431",
    "extraction_time": 1.4428989887237549,
    "source": "tavily_api_raw"
  }
}