{
  "url": "https://developers.cardano.org/docs/get-started/mesh/transactions-basic",
  "content": "![Cardano Logo](/img/cardano-black.svg)\n![Cardano Logo](/img/cardano-white.svg)\n\n# Basic Transactions\n\nAs of writing, there are 4 main types of transactions:\n\nIn this section, we will explore the following:\n\n## Send ADA to Addresses[​](#send-ada-to-addresses \"Direct link to Send ADA to Addresses\")\n\nYou can chain `tx.sendLovelace()` to send to multiple recipients. For example:\n\n`tx.sendLovelace()`\n`import { Transaction } from \"@meshsdk/core\";  \n  \nconst tx = new Transaction({ initiator: wallet })  \n .sendLovelace(  \n \"addr_test1vpvx0sacufuypa2k4sngk7q40zc5c4npl337uusdh64kv0c7e4cxr\",  \n \"1000000\"  \n )  \n .sendLovelace(\"ANOTHER ADDRESS HERE\", \"1500000\");  \n  \nconst unsignedTx = await tx.build();  \nconst signedTx = await wallet.signTx(unsignedTx);  \nconst txHash = await wallet.submitTx(signedTx);`\n\n[Try demo](https://meshjs.dev/apis/transaction/basics#sendLovelace)\n\n## Send Multiple Assets to Addresses[​](#send-multiple-assets-to-addresses \"Direct link to Send Multiple Assets to Addresses\")\n\nWe can chain a series of `tx.sendAssets()` and `tx.sendLovelace()` to send multiple assets to multiple recipients. For example:\n\n`tx.sendAssets()`\n`tx.sendLovelace()`\n`import { Transaction, Asset } from \"@meshsdk/core\";  \n  \nconst tx = new Transaction({ initiator: wallet })  \n .sendLovelace(  \n \"addr_test1vpvx0sacufuypa2k4sngk7q40zc5c4npl337uusdh64kv0c7e4cxr\",  \n \"1000000\"  \n )  \n .sendAssets(  \n \"addr_test1vpvx0sacufuypa2k4sngk7q40zc5c4npl337uusdh64kv0c7e4cxr\",  \n [  \n {  \n unit: \"64af286e2ad0df4de2e7de15f8ff5b3d27faecf4ab2757056d860a424d657368546f6b656e\",  \n quantity: \"1\",  \n },  \n ]  \n )  \n .sendLovelace(\"ANOTHER ADDRESS HERE\", \"1500000\");  \n  \nconst unsignedTx = await tx.build();  \nconst signedTx = await wallet.signTx(unsignedTx);  \nconst txHash = await wallet.submitTx(signedTx);`\n\n[Try demo](https://meshjs.dev/apis/transaction/basics#sendAssets)\n\n## Send Assets to Handler[​](#send-assets-to-handler \"Direct link to Send Assets to Handler\")\n\nWe can get the ADA Handle's address with any blockchain providers and calling the `fetchHandleAddress()` function.\n\n`fetchHandleAddress()`\n\nFor instance, lets send some lovelace to `$jingles`:\n\n`$jingles`\n`import { KoiosProvider, Transaction } from \"@meshsdk/core\";  \n  \nconst koios = new KoiosProvider(\"api\");  \n  \nconst tx = new Transaction({ initiator: wallet })  \n .sendLovelace(  \n await koios.fetchHandleAddress(\"jingles\"),  \n \"1000000\"  \n );  \n  \nconst unsignedTx = await tx.build();  \nconst signedTx = await wallet.signTx(unsignedTx);  \nconst txHash = await wallet.submitTx(signedTx);`\n\n## Send tokens and stable coins to addresses[​](#send-tokens-and-stable-coins-to-addresses \"Direct link to Send tokens and stable coins to addresses\")\n\nLike `sendLovelace()`, we can chain `sendToken()` along side `tx.sendLovelace()` to send multiple assets to multiple recipients.\n\n`sendLovelace()`\n`sendToken()`\n`tx.sendLovelace()`\n\nFor instance, lets send some DJED to ADA to `jingles`:\n\n`jingles`\n`import { Transaction } from '@meshsdk/core';  \n  \nconst koios = new KoiosProvider(\"api\");  \nconst address = await koios.fetchHandleAddress(\"jingles\");  \n  \nconst tx = new Transaction({ initiator: wallet })  \n .sendToken(  \n address,  \n 'DJED',   \n '1000000'  \n )  \n .sendLovelace(  \n address,  \n \"1000000\"  \n );  \n  \nconst unsignedTx = await tx.build();  \nconst signedTx = await wallet.signTx(unsignedTx);  \nconst txHash = await wallet.submitTx(signedTx);`\n\nCheck out the [Mesh Playground](https://meshjs.dev/apis/transaction/basics) for live demo and full explanation.",
  "images": [],
  "extraction_metadata": {
    "batch_number": 6,
    "extraction_timestamp": "2025-09-19T14:04:44.452431",
    "extraction_time": 1.4428989887237549,
    "source": "tavily_api_raw"
  }
}