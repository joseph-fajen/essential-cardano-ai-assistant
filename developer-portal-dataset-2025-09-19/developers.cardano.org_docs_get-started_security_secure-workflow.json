{
  "url": "https://developers.cardano.org/docs/get-started/security/secure-workflow",
  "content": "![Cardano Logo](/img/cardano-black.svg)\n![Cardano Logo](/img/cardano-white.svg)\n\n# Secure Transaction Workflow\n\nThis general guide is written to help Cardano stake pool operators and developers keep to one simple rule:\n\nPayment keys can never be stored, even for a moment, on an Internet connected machine.\n\nTherefore we present a secure, standard workflow for `cardano-cli` commands like the ones presented without consideration of security here:\n\n`cardano-cli`\n\nOnce you feel comfortable doing a simple transaction securely, you'll also be able to use it to securely execute these more complex transactions as well:\n\n### A model for a secure transaction[​](#a-model-for-a-secure-transaction \"Direct link to A model for a secure transaction\")\n\nAll transactions will be done in these 3 steps:\n\n`Tx`\n\nTherefore, the payment signing key (the private component of the [Cardano wallet address key pair](/docs/operate-a-stake-pool/cardano-key-pairs#wallet-address-key-pairs)) **never leaves the air gap environment**. This is vital because:\n\n`payment.skey`\n`payment.addr`\n\n## Prerequisites[​](#prerequisites \"Direct link to Prerequisites\")\n\n### Your [air gap environment](/docs/get-started/security/air-gap)[​](#your-air-gap-environment \"Direct link to your-air-gap-environment\")\n\nFollow [these instructions](/docs/get-started/security/air-gap) to procure the environment (usually a dedicated \"air gap machine\") if you haven't already.\n\n### Move any existing keys inside the air gap[​](#move-any-existing-keys-inside-the-air-gap \"Direct link to Move any existing keys inside the air gap\")\n\nSecond, if you've been running your applications, token/NFT generation, or stake pool with keys stored on any Internet connected machine (whether desktop or server):\n\nTo simplify the commands below, this guide assumes you will store all your keys and addresses *in the same single directory* where you will be building your transactions.\n\n### Dedicate a memory stick to moving your Tx files[​](#dedicate-a-memory-stick-to-moving-your-tx-files \"Direct link to Dedicate a memory stick to moving your Tx files\")\n\nFormat a memory stick on a machine you believe to be secure, and then (to be on the safe side) format it again on the air gap machine. Some ideas:\n\n## Steps of a secure transaction[​](#steps-of-a-secure-transaction \"Direct link to Steps of a secure transaction\")\n\nNote that in general your \"Internet connected machine\" and your \"Cardano node\" will be two separate systems, and you will have to transfer files from one to the other with programs like [`rsync`](https://linux.die.net/man/1/rsync).\n\n`rsync`\n\n### 1. *Assemble* all transaction details.[​](#1-assemble-all-transaction-details \"Direct link to 1-assemble-all-transaction-details\")\n\nOn your Internet-connected computer (usually your Cardano node, though you might use query services instead):\n\n#### Get protocol parameters[​](#get-protocol-parameters \"Direct link to Get protocol parameters\")\n\nGet the protocol parameters and save them to `protocol.json` with:\n\n`protocol.json`\n`cardano-cli query protocol-parameters \\  \n --mainnet \\  \n --out-file protocol.json`\n\n#### Get the transaction hash and index of the **UTXO** to spend:[​](#get-the-transaction-hash-and-index-of-the-utxo-to-spend \"Direct link to get-the-transaction-hash-and-index-of-the-utxo-to-spend\")\n\nHere `payment.addr` is the Cardano address you will be paying from, which may be stored on your insecure machine:\n\n`payment.addr`\n`cardano-cli query utxo \\  \n --address $(cat payment.addr) \\  \n --mainnet`\n\nCopy or redirect the output of this last command to a *scratch file* of your choice.\n\nThen copy both this file and `protocol.json` to the transfer memory stick.\n\n`protocol.json`\n\n### 2. *Build* Tx details into a signed transaction.[​](#2-build-tx-details-into-a-signed-transaction \"Direct link to 2-build-tx-details-into-a-signed-transaction\")\n\nAttach your transfer memory stick to the air gap host and copy the files to your working directory:\n\n`protocol.json`\n\n#### Draft the transaction[​](#draft-the-transaction \"Direct link to Draft the transaction\")\n\nCreate a draft for the transaction and save it in `tx.draft`. Notes:\n\n`tx.draft`\n`payment2.addr`\n`payment.addr`\n`--tx-in`\n`TxHash#TxIx`\n`TxHash`\n`TxIx`\n`--tx-out`\n`TxOut+Lovelace`\n`TxOut`\n`Lovelace`\n`--tx-out`\n`--fee`\n`--tx-in`\n`cardano-cli query utxo`\n`cardano-cli conway transaction build-raw \\  \n --tx-in 4e3a6e7fdcb0d0efa17bf79c13aed2b4cb9baf37fb1aa2e39553d5bd720c5c99#4 \\  \n --tx-out $(cat payment2.addr)+0 \\  \n --tx-out $(cat payment.addr)+0 \\  \n --invalid-hereafter 0 \\  \n --fee 0 \\  \n --out-file tx.draft`\n\n#### Calculate the fee[​](#calculate-the-fee \"Direct link to Calculate the fee\")\n\nThe generally simplest transaction needs one input (a valid UTXO from `payment.addr`) and two outputs:\n\n`payment.addr`\n\nNote that to calculate the fee you need to include the draft transaction:\n\n`cardano-cli conway transaction calculate-min-fee \\  \n --tx-body-file tx.draft \\  \n --tx-in-count 1 \\  \n --tx-out-count 2 \\  \n --witness-count 1 \\  \n --byron-witness-count 0 \\  \n --mainnet \\  \n --protocol-params-file protocol.json`\n\n#### Calculate the change to send back to `payment.addr`[​](#calculate-the-change-to-send-back-to-paymentaddr \"Direct link to calculate-the-change-to-send-back-to-paymentaddr\")\n\n`payment.addr`\n\nAll amounts must be in Lovelace:\n\nexpr `UTXO BALANCE` - `AMOUNT TO SEND` - `TRANSACTION FEE`\n\n`UTXO BALANCE`\n`AMOUNT TO SEND`\n`TRANSACTION FEE`\n\nFor example, if we send 10 ada from a UTxO containing 20 ada, the change to send back to `payment.addr` after paying the fee is: 9.832035 ada:\n\n`payment.addr`\n`expr 20000000 - 10000000 - 167965  \n9832035`\n\n#### Build the transaction[​](#build-the-transaction \"Direct link to Build the transaction\")\n\nWe write the transaction in a file; we will name it `tx.raw`:\n\n`tx.raw`\n`cardano-cli conway transaction build-raw \\  \n --tx-in 4e3a6e7fdcb0d0efa17bf79c13aed2b4cb9baf37fb1aa2e39553d5bd720c5c99#4 \\  \n --tx-out $(cat payment2.addr)+10000000 \\  \n --tx-out $(cat payment.addr)+9832035 \\  \n --fee 167965 \\  \n --out-file tx.raw`\n\n#### Sign the transaction[​](#sign-the-transaction \"Direct link to Sign the transaction\")\n\nSign the transaction with the signing key `payment.skey` and save the signed transaction in `tx.signed`:\n\n`payment.skey`\n`tx.signed`\n`cardano-cli conway transaction sign \\  \n --tx-body-file tx.raw \\  \n --signing-key-file payment.skey \\  \n --mainnet \\  \n --out-file tx.signed`\n\nSave the `tx.signed` file back on the transfer memory stick, then [safely remove](https://help.ubuntu.com/stable/ubuntu-help/files-removedrive.html.en) the memory stick from the air gap machine.\n\n`tx.signed`\n\n### 3. **Upload** and submit the Tx file.[​](#3-upload-and-submit-the-tx-file \"Direct link to 3-upload-and-submit-the-tx-file\")\n\nReattach your transfer memory stick back to the Internet connected computer, then upload the `tx.signed` file to your Cardano node.\n\n`tx.signed`\n\n#### Submit the transaction[​](#submit-the-transaction \"Direct link to Submit the transaction\")\n\nLog into your Cardano node (or prepare Daedalus if using its node) and execute:\n\n`cardano-cli conway transaction submit \\  \n --tx-file tx.signed \\  \n --mainnet`\n\nThen check for a successful transaction by whatever means you prefer, e.g. a [Cardano Explorer](https://explorer.cardano.org/).\n\n## FAQ[​](#faq \"Direct link to FAQ\")\n\n### Why can't I use `cardano-cli conway transaction build`?[​](#why-cant-i-use-cardano-cli-conway-transaction-build \"Direct link to why-cant-i-use-cardano-cli-conway-transaction-build\")\n\n`cardano-cli conway transaction build`\n\nThis is a convenient command to avoid the [\"change\" (return UTxO) calculation](#calculate-the-change-to-send-back-to-paymentaddr) which requires you to prepare a test transaction, estimate fees, and calculate a final value of the funds to be moved. Instead, `transaction build` sends back \"change\" to a designated address.\n\n`transaction build`\n\nSome consider this so much easier to use that ***all*** transactions should be performed with this command, as discussed here:\n\n`cardano-cli conway transaction build`\n`cardano-cli conway transaction build-raw`\n\nHowever, this discussion revealed the undocumented condition that `transaction build` can only be done on a **live** Cardano node. The community in general doesn't know the reasons for this (with some speculation in the thread above), so in the meantime:\n\n`transaction build`\n`transaction build`\n`build`\n\nTherefore this guide suggests *only* assembling transaction *details* outside the air gap, to be applied to `cardano-cli conway transaction build-raw` inside the air gap, because there is not much more convenience overall in using `transaction build` while perhaps introducing some security risk.\n\n`cardano-cli conway transaction build-raw`\n`transaction build`\n\n## Other pending topics in secure workflow[​](#other-pending-topics-in-secure-workflow \"Direct link to Other pending topics in secure workflow\")\n\nThese are not directly related to transactions, and will all eventually be addressed in their own pages on the Developer Portal:\n\nFor ideas on secure backup & record-keeping, see [Get Started with the Frankenwallet > Making & verifying backups of assets & keys](/docs/operate-a-stake-pool/frankenwallet#making--verifying-backups-of-assets--keys).\n\n`cardano-cli conway transaction build`",
  "images": [],
  "extraction_metadata": {
    "batch_number": 6,
    "extraction_timestamp": "2025-09-19T14:04:44.452431",
    "extraction_time": 1.4428989887237549,
    "source": "tavily_api_raw"
  }
}