{
  "url": "https://developers.cardano.org/docs/operate-a-stake-pool/node-operations/running-cardano",
  "content": "![Cardano Logo](/img/cardano-black.svg)\n![Cardano Logo](/img/cardano-white.svg)\n\n# How to run cardano-node\n\n### Overview[​](#overview \"Direct link to Overview\")\n\nThis guide will show you how to run `cardano-node` and `cardano-cli` on your system and some simple examples of how you can interact with the **Cardano** blockchain.\n\n`cardano-node`\n`cardano-cli`\n\nThis guide assumes you installed `cardano-node` and `cardano-cli` into your system. If not, you can refer to [Installing cardano-node](/docs/operate-a-stake-pool/node-operations/installing-cardano-node) guide for instructions on how to do that.\n\n`cardano-node`\n`cardano-cli`\n\nThis guide does not cover the topic of running a block-producing `cardano-node` or running a **Cardano Stake Pool**. For more information regarding that topic, please visit the [Stake Pool Operation](/docs/operate-a-stake-pool/) section.\n\n`cardano-node`\n\n## Cardano blockchain nets:[​](#cardano-blockchain--nets \"Direct link to Cardano blockchain nets:\")\n\n### Testnet[​](#testnet \"Direct link to Testnet\")\n\nThere are two types of testnet: `preview` and `pre-prod`.\n\n`preview`\n`pre-prod`\n\n**Preview Testnet**: Testing release candidates and Mainnet releases. Leads Mainnet hard forks by at least 4 weeks. This net is for those who just want to see how it runs, get familiarised and play with cardano-node.\n\n**Pre-Production Testnet**: Testing release candidates and Mainnet releases. Forks at approximately same time as Mainnet (within an epoch of each other). This net is ideal for those who are ready to run the Mainnet but want to test it before running it.\n\n### Production (Mainnet)[​](#production-mainnet \"Direct link to Production (Mainnet)\")\n\nThis is the live Production. Only gets official Mainnet releases. Please use this net once you are ready to use the cardano-node.\n\n### Configuration Files[​](#configuration-files \"Direct link to Configuration Files\")\n\nThe `cardano-node` application requires at least four configuration files to run as of writing this article.\n\n`cardano-node`\n`cardano-node`\n`cardano-node`\n`cardano-node`\n`cardano-node`\n`IP Address`\n`Port`\n\nCurrently, the `cardano-node` topology is manually set by the community of network operators in the **Cardano** blockchain. But an automated p2p (peer-to-peer) system is in the works. For more information visit, [Boosting network decentralization with P2P](https://iohk.io/en/blog/posts/2021/04/06/boosting-network-decentralization-with-p2p/).\n\n`cardano-node`\n\nFor more information about **Cardano** blockchain eras and upgrades, please visit the [Cardano Roadmap](https://roadmap.cardano.org/en).\n\nYou can download the current **Cardano** blockchain network configuration files here: [The Cardano Operations Book > Environments](https://book.play.dev.cardano.org/environments.html)\n\n…or by running:\n\n#### Testnet / Preview[​](#testnet--preview \"Direct link to Testnet / Preview\")\n\n**NetworkMagic**: `2`\n\n`2`\n`curl -O -J \"https://book.play.dev.cardano.org/environments/preview/{config,db-sync-config,submit-api-config,topology,byron-genesis,shelley-genesis,alonzo-genesis,conway-genesis}.json\"`\n\n#### Testnet / Preprod[​](#testnet--preprod \"Direct link to Testnet / Preprod\")\n\n**NetworkMagic**: `1`\n\n`1`\n`curl -O -J \"https://book.play.dev.cardano.org/environments/preprod/{config,db-sync-config,submit-api-config,topology,byron-genesis,shelley-genesis,alonzo-genesis,conway-genesis}.json\"`\n\n#### Mainnet / Production[​](#mainnet--production \"Direct link to Mainnet / Production\")\n\n**NetworkMagic**: `764824073`\n\n`764824073`\n`curl -O -J \"https://book.play.dev.cardano.org/environments/mainnet/{config,db-sync-config,submit-api-config,topology,byron-genesis,shelley-genesis,alonzo-genesis,conway-genesis,checkpoints}.json\"`\n\nThe latest supported networks can be found at <https://book.play.dev.cardano.org/environments.html>\n\nEach network has a `config` file, `genesis` file(s), `topology` file, and unique identifier called the **Network Magic**.\n\n`config`\n`genesis`\n`topology`\n\nThis section will be updated when new **Cardano** networks come online with their respective configuration files and **Network Magic**.\n\nYou might be asking what the difference is between `mainnet` and `testnet` and why there are two official network types? To put it simply, **Cardano** is an open-source blockchain, and anyone is free to spin up a network based on **Cardano's** software components. The `mainnet` network was the first one established during the start of the **Byron** era in 2017. And everyone participating in the network agreed that is where all the real value of **Cardano** lives.\n\n`mainnet`\n`testnet`\n`mainnet`\n\nTesting the network's features and capabilities can be expensive and will consume real value. So [Input-Output Global](https://iohk.io) has spun up sandboxes or testnet versions of the network. Instead of using real `ada` tokens for transactions, you use the `tAda` or **Test ADA**. Alternatively, you can spin up your own custom **Cardano** network, but that is outside the scope of this guide.\n\n`ada`\n`tAda`\n\n## Running the node[​](#running-the-node \"Direct link to Running the node\")\n\nTo run `cardano-node` you enter something like this into the terminal:\n\n`cardano-node`\n `cardano-node run \\  \n --topology path/to/mainnet-topology.json \\  \n --database-path path/to/db \\  \n --socket-path path/to/db/node.socket \\  \n --host-addr x.x.x.x \\  \n --port 3001 \\  \n --config path/to/mainnet-config.json`\n\nTo get the complete list of available options, use `cardano-node run --help`\n\n`cardano-node run --help`\n`Usage: cardano-node run [--topology FILEPATH]  \n [ --database-path FILEPATH  \n | --immutable-database-path FILEPATH --volatile-database-path FILEPATH  \n ]  \n [--validate-db]  \n [--socket-path FILEPATH]  \n [--tracer-socket-path-accept FILEPATH | --tracer-socket-path-connect FILEPATH]  \n [--config NODE-CONFIGURATION]  \n [--byron-delegation-certificate FILEPATH]  \n [--byron-signing-key FILEPATH]  \n [--shelley-kes-key FILEPATH]  \n [--shelley-vrf-key FILEPATH]  \n [--shelley-operational-certificate FILEPATH]  \n [--bulk-credentials-file FILEPATH]  \n [--non-producing-node]  \n [--host-addr IPV4]  \n [--host-ipv6-addr IPV6]  \n [--port PORT]  \nw  \n Run the node.  \n  \nAvailable options:  \n --topology FILEPATH The path to a file describing the topology.  \n --database-path FILEPATH Directory where the state is stored.  \n --immutable-database-path FILEPATH  \n Directory where the state is stored.  \n --volatile-database-path FILEPATH  \n Directory where the state is stored.  \n --validate-db Validate all on-disk database files  \n --socket-path FILEPATH Path to a cardano-node socket  \n --tracer-socket-path-accept FILEPATH  \n Accept incoming cardano-tracer connection at local  \n socket  \n --tracer-socket-path-connect FILEPATH  \n Connect to cardano-tracer listening on a local socket  \n --config NODE-CONFIGURATION  \n Configuration file for the cardano-node  \n --byron-delegation-certificate FILEPATH  \n Path to the delegation certificate.  \n --byron-signing-key FILEPATH  \n Path to the Byron signing key.  \n --shelley-kes-key FILEPATH  \n Path to the KES signing key.  \n --shelley-vrf-key FILEPATH  \n Path to the VRF signing key.  \n --shelley-operational-certificate FILEPATH  \n Path to the delegation certificate.  \n --bulk-credentials-file FILEPATH  \n Path to the bulk pool credentials file.  \n --non-producing-node Start the node as a non block producing node even if  \n credentials are specified.  \n --host-addr IPV4 An optional IPv4 address  \n --host-ipv6-addr IPV6 An optional IPv6 address  \n --port PORT The port number  \n --shutdown-ipc FD Shut down the process when this inherited FD reaches  \n EOF  \n --shutdown-on-slot-synced SLOT  \n Shut down the process after ChainDB is synced up to  \n the specified slot  \n --shutdown-on-block-synced BLOCK  \n Shut down the process after ChainDB is synced up to  \n the specified block  \n -h,--help Show this help text`\n\n### cardano-node parameters[​](#cardano-node-parameters \"Direct link to cardano-node parameters\")\n\nIn this section, we will use the path `$HOME/cardano/testnet` to store all the testnet `cardano-node` related files as an example, and please replace it with the directory you have chosen to store the files.\n\n`$HOME/cardano/testnet`\n`cardano-node`\n\nWe will focus on six key command-line parameters for running a node:\n\n**`--topology`**: This requires the path of the `topology.json` file that you have downloaded as instructed [above](/docs/operate-a-stake-pool/node-operations/running-cardano#configuration-files).\n\n`--topology`\n`topology.json`\n\nFor example, If you have downloaded the `topology.json` file to the path `$HOME/cardano/testnet/topology.json`, then the argument would be something like this:\n\n`topology.json`\n`$HOME/cardano/testnet/topology.json`\n`--topology $HOME/cardano/testnet/topology.json`\n\n**`--database-path`**: This expects the path to a directory where we will store the actual blockchain data like **blocks**, **transactions**, **metadata**, and other data type that people stored in the **Cardano** blockchain. We explore how we can query those kinds of data in the cardano-db-sync section. ***@TODO: link to the cardano-db-sync section.***\n\n`--database-path`\n\nFor example, if we decide that all files required by `cardano-node` will be in the path `$HOME/cardano/testnet`. Then we could create a database directory like this, `mkdir -p $HOME/cardano/testnet/db`.\nThe directory structure would then be something like this:\n\n`cardano-node`\n`$HOME/cardano/testnet`\n`mkdir -p $HOME/cardano/testnet/db`\n`$HOME/cardano/testnet/  \n├── db  \n├── alonzo-genesis.json  \n├── byron-genesis.json  \n├── config.json  \n├── shelley-genesis.json  \n└── topology.json  \n1 directory, 5 files`\n\nAs you may have noticed, we are planning to run a testnet node in this example and have downloaded the configuration files into the `$HOME/cardano/testnet/` directory. We also see that we have created the `db` directory inside `$HOME/cardano/testnet/` successfully. The argument would look something like this:\n\n`$HOME/cardano/testnet/`\n`db`\n`$HOME/cardano/testnet/`\n`--database-path $HOME/cardano/testnet/db`\n\nPlease download and move the configuration files to your Cardano directory as shown above to continue following this guide.\n\n**`--socket-path`**: This expects the path to the `unix socket` or `named pipe` path that the `cardano-node` will use for [IPC (Inter-Process-Communication)](https://en.wikipedia.org/wiki/Inter-process_communication).\n\n`--socket-path`\n`unix socket`\n`named pipe`\n`cardano-node`\n\nThe `cardano-node` uses **IPC (Inter-Process-Communication)** for communicating with other **Cardano** components like `cardano-cli`, `cardano-wallet`, and `cardano-db-sync`. In **Linux** and **MacOS** it uses something called [unix sockets](https://en.wikipedia.org/wiki/Unix_domain_socket) and [Named Pipes](https://docs.microsoft.com/en-us/windows/win32/ipc/named-pipes) in **Windows**.\n\n`cardano-node`\n`cardano-cli`\n`cardano-wallet`\n`cardano-db-sync`\n\nHere is an example `--socket-path` argument for **Linux**:\n\n`--socket-path`\n`--socket-path $HOME/cardano/testnet/db/node.socket`\n\nAs you can see, the argument points to a file since **unix sockets** are represented as files (like everything else in **Linux**). In this case, we put the socket file in the `db` directory that we have just created before.\n\n`db`\n\nIn **Windows**, the `--socket-path` argument would look something like this:\n\n`--socket-path`\n`--socket-path \"\\\\\\\\.\\\\pipe\\\\cardano-node-testnet\"`\n\nAs you may notice, it's like a network `URI` or a network `Path` than a file. It is a crucial difference that you will have to be aware of depending on your operating system. You can replace the string `cardano-node-testnet` in the argument with whatever you like. This example path is used in the [Daedalus Testnet Wallet](https://daedaluswallet.io) for **Windows**.\n\n`URI`\n`Path`\n`cardano-node-testnet`\n\n**`--host-addr`**: This expects the `IP Address` of the machine that `cardano-node` will be running. Other nodes will use this address in their `topology.json` file to connect to your node if you are planning to run it as a `relay` node.\n\n`--host-addr`\n`IP Address`\n`cardano-node`\n`topology.json`\n`relay`\n\nHere is an example `--host-addr` argument:\n\n`--host-addr`\n`--host-addr 192.168.0.1`\n\nIn this case, we expect nodes in your [LAN (Local Area Network)](https://en.wikipedia.org/wiki/Local_area_network) to connect via `192.168.0.1`, assuming that the `IP Address` of the machine `cardano-node` is running on; replace it with your real `IP Address`. If you don't expect or need external nodes to connect to your node, you can use the loopback address `127.0.0.1`. If you have multiple network interfaces and unsure what to use, you can simply use `0.0.0.0` to accept connections from any network interface.\n\n`192.168.0.1`\n`IP Address`\n`cardano-node`\n`IP Address`\n`127.0.0.1`\n`0.0.0.0`\n\n**`--port`**: In conjunction with the `IP Address`, we will also set the `port` that your `cardano-node` will use for listening to any incoming connection.\n\n`--port`\n`IP Address`\n`port`\n`cardano-node`\n\nHere is an example `--port` argument:\n\n`--port`\n`--port 1337`\n\nYou can choose whatever `port` number you like, but it is recommended to use `port` numbers `1024` and above. See [Registered Port](https://www.sciencedirect.com/topics/computer-science/registered-port) for more information.\n\n`port`\n`port`\n`1024`\n\n**`--config`**: This expects the path to the main configuration file that we have downloaded previously.\n\n`--config`\n\nHere is an example `--config` argument:\n\n`--config`\n`--config $HOME/cardano/testnet/config.json`\n\nPlease make sure that the `alonzo-genesis.json`, `byron-genesis.json` and `shelley-genesis.json` are in the same directory as the `config.json`.\n\n`alonzo-genesis.json`\n`byron-genesis.json`\n`shelley-genesis.json`\n`config.json`\n\nHere is a realistic example for running `cardano-node`:\n\n`cardano-node`\n`cardano-node run \\  \n--config $HOME/cardano/testnet/config.json \\  \n--database-path $HOME/cardano/testnet/db/ \\  \n--socket-path $HOME/cardano/testnet/db/node.socket \\  \n--host-addr 127.0.0.1 \\  \n--port 1337 \\  \n--topology $HOME/cardano/testnet/topology.json`\n\nIf you have everything set correctly, you should see something like this:\n\n`Listening on http://127.0.0.1:12798  \n[cardano.node.networkMagic:Notice:5] [2021-05-20 12:17:10.02 UTC] NetworkMagic 1097911063  \n[cardano.node.basicInfo.protocol:Notice:5] [2021-05-20 12:17:10.02 UTC] Byron; Shelley  \n[cardano.node.basicInfo.version:Notice:5] [2021-05-20 12:17:10.02 UTC] 1.XX.X  \n[cardano.node.basicInfo.commit:Notice:5] [2021-05-20 12:17:10.02 UTC] 9a7331cce5e8bc0ea9c6bfa1c28773f4c5a7000f  \n[cardano.node.basicInfo.nodeStartTime:Notice:5] [2021-05-20 12:17:10.02 UTC] 2021-05-20 12:17:10.024924 UTC  \n[cardano.node.basicInfo.systemStartTime:Notice:5] [2021-05-20 12:17:10.02 UTC] 2019-07-24 20:20:16 UTC  \n[cardano.node.basicInfo.slotLengthByron:Notice:5] [2021-05-20 12:17:10.02 UTC] 20s  \n[cardano.node.basicInfo.epochLengthByron:Notice:5] [2021-05-20 12:17:10.02 UTC] 21600  \n[cardano.node.basicInfo.slotLengthShelley:Notice:5] [2021-05-20 12:17:10.02 UTC] 1s  \n[cardano.node.basicInfo.epochLengthShelley:Notice:5] [2021-05-20 12:17:10.02 UTC] 432000  \n[cardano.node.basicInfo.slotsPerKESPeriodShelley:Notice:5] [2021-05-20 12:17:10.02 UTC] 129600  \n[cardano.node.basicInfo.slotLengthAllegra:Notice:5] [2021-05-20 12:17:10.02 UTC] 1s  \n[cardano.node.basicInfo.epochLengthAllegra:Notice:5] [2021-05-20 12:17:10.02 UTC] 432000  \n[cardano.node.basicInfo.slotsPerKESPeriodAllegra:Notice:5] [2021-05-20 12:17:10.02 UTC] 129600  \n[cardano.node.basicInfo.slotLengthMary:Notice:5] [2021-05-20 12:17:10.02 UTC] 1s  \n[cardano.node.basicInfo.epochLengthMary:Notice:5] [2021-05-20 12:17:10.02 UTC] 432000  \n[cardano.node.basicInfo.slotsPerKESPeriodMary:Notice:5] [2021-05-20 12:17:10.02 UTC] 129600  \n[cardano.node.addresses:Notice:5] [2021-05-20 12:17:10.05 UTC] [SocketInfo 0.0.0.0:9999,SocketInfo [::]:9999]  \n[cardano.node.diffusion-mode:Notice:5] [2021-05-20 12:17:10.05 UTC] InitiatorAndResponderDiffusionMode  \n[cardano.node.dns-producers:Notice:5] [2021-05-20 12:17:10.05 UTC] [DnsSubscriptionTarget {dstDomain = \"relays-new.cardano-testnet.iohkdev.io\", dstPort = 3001, dstValency = 2}]  \n[cardano.node.ip-producers:Notice:5] [2021-05-20 12:17:10.05 UTC] IPSubscriptionTarget {ispIps = [], ispValency = 0}  \n[cardano.node.ChainDB:Info:5] [2021-05-20 12:17:10.06 UTC] Opened imm db with immutable tip at genesis (origin) and chunk 0  \n[cardano.node.ChainDB:Info:5] [2021-05-20 12:17:10.06 UTC] Opened vol db  \n[cardano.node.ChainDB:Info:5] [2021-05-20 12:17:10.06 UTC] Replaying ledger from genesis  \n[cardano.node.ChainDB:Info:5] [2021-05-20 12:17:10.07 UTC] Opened lgr db  \n[cardano.node.ChainDB:Info:5] [2021-05-20 12:17:10.07 UTC] Opened db with immutable tip at genesis (origin) and tip genesis (origin)  \n[cardano.node.ChainDB:Notice:33] [2021-05-20 12:17:10.08 UTC] Chain extended, new tip: 1e64e74bd7ac76d6806480a28017deb0aedd356fb61844ec95c429ae2f30c7c3 at slot 0`\n\nSyncing the blockchain from zero can take a while. Please be patient. If you want to stop syncing, you can do so by pressing `CTRL` + `C` while in the terminal. Rerunning the `cardano-node run` command with the correct parameters will resume syncing the blockchain.\n\n`CTRL`\n`C`\n`cardano-node run`\n\n## Querying the Cardano Blockchain[​](#querying-the-cardano-blockchain \"Direct link to Querying the Cardano Blockchain\")\n\nNow that we have `cardano-node` running and syncing, we can test it out by querying the blockchain tip data; which is the current point your local node is synced. To do this, we use the `cardano-cli` command-line application.\n\n`cardano-node`\n`cardano-cli`\n\nBut before we can do that, `cardano-cli` and other **Cardano** software components need to know where the node socket file is located. We saved it to the path `$HOME/cardano/db/node.socket` in the previous example. The components read the shell environment variable `CARDANO_NODE_SOCKET_PATH` to find this.\n\n`cardano-cli`\n`$HOME/cardano/db/node.socket`\n`CARDANO_NODE_SOCKET_PATH`\n\nSo we will set that in `$HOME/.bashrc` or `$HOME/.zshrc`, depending on which shell application that you use. In Windows, you can follow this guide: [How to Set Environment Variable in Windows](https://phoenixnap.com/kb/windows-set-environment-variable).\n\n`$HOME/.bashrc`\n`$HOME/.zshrc`\n\nAdd this line to the bottom of your shell profile (**MacOS** and **Linux**):\n\n`export CARDANO_NODE_SOCKET_PATH=\"$HOME/cardano/testnet/db/node.socket\"`\n\nOnce saved, reload your shell/terminal for changes to take effect.\n\nFinally, we can now test querying the blockchain tip of our `cardano-node`:\n\n`cardano-node`\n`cardano-node`\n`cardano-cli query tip --testnet-magic 1`\n\nYou should see something like this:\n\n`{  \n \"block\": 2598870,  \n \"epoch\": 133,  \n \"era\": \"Shelley\",  \n \"hash\": \"7b5633590bf8924d8fce5b6515f34fga0c712f64e9b7d273f915656f88fba872\",  \n \"slot\": 27149964,  \n \"syncProgress\": \"57.09\"  \n \"block\": 2598870,  \n \"epoch\": 133,  \n \"era\": \"Shelley\",  \n \"hash\": \"7b5633590bf8924d8fce5b6515f34fga0c712f64e9b7d273f915656f88fba872\",  \n \"slot\": 27149964,  \n \"syncProgress\": \"57.09\"  \n}`\n\nWe include `--testnet-magic <NetworkMagic>` in the parameter for `cardano-cli query tip` because we are using a testnet node. If you intend to query `mainnet` instead, please use the `--mainnet` parameter and make sure your node is connected to the `mainnet` network.\n\n`--testnet-magic <NetworkMagic>`\n`cardano-cli query tip`\n`mainnet`\n`--mainnet`\n`mainnet`\n\nWhat you see here is the local tip data of your node. This case, means that you are synced up to `block: 2598870` and `slot: 27149964`.\n\n`block: 2598870`\n`slot: 27149964`\n\n`syncProgress` is the percentage your node that has been synced. `100` meaning it is fully synced.\n\n`syncProgress`\n`100`\n\nTo know whether you are fully synced or not, you can check the **Cardano Blockchain Explorer** of the relevant network:\n\n#### Mainnet Explorer[​](#mainnet-explorer \"Direct link to Mainnet Explorer\")\n\n<https://explorer.cardano.org>\n\n#### Testnet Explorer[​](#testnet-explorer \"Direct link to Testnet Explorer\")\n\n<https://preprod.cardanoscan.io/>\n<https://preview.cardanoscan.io/>\n\nScroll down to the **Latest Blocks** section, and you can find the latest network tip.\n\n![img](/assets/images/latest-block-eb6d30aa2616b95b4038d3e027297adf.png)\n\n![img](/assets/images/latest-block-eb6d30aa2616b95b4038d3e027297adf.png)\n\nBefore making any transactions, make sure you are fully synced to the blockchain network.\n\nCongratulations, you are now ready to explore the world of **Cardano**! 🎉🎉🎉",
  "images": [],
  "extraction_metadata": {
    "batch_number": 9,
    "extraction_timestamp": "2025-09-19T14:05:00.496633",
    "extraction_time": 2.430634021759033,
    "source": "tavily_api_raw"
  }
}