{
  "url": "https://developers.cardano.org/docs/operate-a-stake-pool/register-stake-address",
  "content": "![Cardano Logo](/img/cardano-black.svg)\n![Cardano Logo](/img/cardano-white.svg)\n\n# Registering a Stake Address\n\nRegistering a new stake pool involves two steps - Registering a stake address and registering the the pool metadata. The stake address needs to be registered on the blockchain to be useful and it requires:\n\nTo build the transaction the following information will be collected first:\n\n`tx-in`\n`tx-out`\n`invalid-hereafter`\n`certificate-file`\n`fee`\n\nThis guide assumes you have installed `cardano-cli` into your system. If not you can refer to [Cardano CLI - Get Started](/docs/get-started/cli-operations/basic-operations/get-started) guide for instructions on how to do that.\n\n`cardano-cli`\n\n## `tx-in`[​](#tx-in \"Direct link to tx-in\")\n\n`tx-in`\n\nQuery the UTXO of the address that pays for the transaction and deposit:\n\n`cd $HOME/cardano-testnet/keys  \n  \ncardano-cli query utxo \\  \n --address $(cat payment.addr) \\  \n --testnet-magic 1 > fullUtxo.out`\n\nThe result should look like the following:\n\n`cat fullUtxo.out  \n> TxHash TxIx Amount  \n> ----------------------------------------------------------------------------------------  \n> b64ae44e1195b04663ab863b62337e626c65b0c9855a9fbb9ef4458f81a6f5ee 1 1000000000 lovelace`\n\nso in this case the required UTXO would be `b64ae44e1195b04663ab863b62337e626c65b0c9855a9fbb9ef4458f81a6f5ee#1`.\n\n`b64ae44e1195b04663ab863b62337e626c65b0c9855a9fbb9ef4458f81a6f5ee#1`\n\n## `tx-out`[​](#tx-out \"Direct link to tx-out\")\n\n`tx-out`\n\nThis would be `payment.addr` and the amount that has to be paid. Since we don't know how much the transaction will cost we put it as 1 ADA for the moment - `$(cat payment.addr)+1000000`\n\n`payment.addr`\n`$(cat payment.addr)+1000000`\n\n## `invalid-hereafter`[​](#invalid-hereafter \"Direct link to invalid-hereafter\")\n\n`invalid-hereafter`\n\nFind out the current slot:\n\n`currentSlot=$(cardano-cli query tip --testnet-magic 1 | jq -r '.slot')  \necho Current Slot: $currentSlot`\n\nThe `invalid-hereafter` value must be greater than the current tip. In this example, we use current slot + 1000 - `$currentSlot+1000`.\n\n`invalid-hereafter`\n`$currentSlot+1000`\n\n## `certificate`[​](#certificate \"Direct link to certificate\")\n\n`certificate`\n\nCreate a stake address registration certificate:\n\n`cardano-cli stake-address registration-certificate \\  \n --stake-verification-key-file stake.vkey \\  \n --out-file stake.cert`\n\n## `witness-override`[​](#witness-override \"Direct link to witness-override\")\n\n`witness-override`\n\nWhen calculating the fee for a transaction, the `--witness-count` option indicates the number of keys signing the transaction. You must sign a transaction submitting a stake address registration certificate to the blockchain using the secret key for the payment address spending the input, as well as the secret key for the stake address to register.\n\n`--witness-count`\n\n## `fee`[\u0000\u0000​](#fee \"Direct link to fee\")\n\n`fee`\n\nNow, we build the transaction which will return the `tx.raw` transaction file and also the transaction fees:\n\n`tx.raw`\n`cardano-cli conway transaction build \\  \n --tx-in b64ae44e1195b04663ab863b62337e626c65b0c9855a9fbb9ef4458f81a6f5ee#1 \\  \n --tx-out $(cat payment.addr)+1000000 \\  \n --change-address $(cat payment.addr) \\  \n --testnet-magic 1 \\  \n --certificate-file stake.cert \\  \n --invalid-hereafter $(( ${currentSlot} + 1000)) \\  \n --witness-override 2 \\  \n --out-file tx.raw`\n\nThe output is the transaction fee in lovelace:\n\n`Estimated transaction fee: Lovelace 172013`\n\nRegistering the stake address, not only pays transaction fees, but also includes a deposit (which you get back when deregister the key) as indicated in the protocol parameters.\n\nThe deposit amount can be found in `protocol.json` under `stakeAddressDeposit`:\n\n`protocol.json`\n`stakeAddressDeposit`\n`cardano-cli query protocol-parameters \\  \n --testnet-magic 1 \\  \n --out-file protocol.json  \n  \nstakeAddressDeposit=$(cat protocol.json | jq -r '.stakeAddressDeposit')  \necho $stakeAddressDeposit`\n\n## Build the transaction[​](#build-the-transaction \"Direct link to Build the transaction\")\n\nNext, the complete transaction output is calculated by subtracting the deposit and transaction fees from the amount we have in our payment address:\n\n`txOut=$((1000000000-${stakeAddressDeposit}-172013))  \necho ${txOut}`\n\nNow we have all the information in place to build the final transaction file:\n\n`cardano-cli conway transaction build-raw \\  \n --tx-in b64ae44e1195b04663ab863b62337e626c65b0c9855a9fbb9ef4458f81a6f5ee#1 \\  \n --tx-out $(cat payment.addr)+${txOut} \\  \n --invalid-hereafter $((${currentSlot} + 1000)) \\  \n --fee 172013 \\  \n --certificate-file stake.cert \\  \n --out-file tx.raw`\n\n## Sign and Submit the transaction[​](#sign-and-submit-the-transaction \"Direct link to Sign and Submit the transaction\")\n\nSign the transaction with both the payment and stake secret keys:\n\n`cardano-cli conway transaction sign \\  \n --tx-body-file tx.raw \\  \n --signing-key-file payment.skey \\  \n --signing-key-file stake.skey \\  \n --testnet-magic 1 \\  \n --out-file tx.signed`\n\nAnd submit it:\n\n`cardano-cli conway transaction submit \\  \n --tx-file tx.signed \\  \n --testnet-magic 1`\n\nIn the next section we will register the pool metadata.\n\n## References[​](#references \"Direct link to References\")\n\n`tx-in`\n`tx-out`\n`invalid-hereafter`\n`certificate`\n`witness-override`\n`fee`",
  "images": [],
  "extraction_metadata": {
    "batch_number": 9,
    "extraction_timestamp": "2025-09-19T14:05:00.496633",
    "extraction_time": 2.430634021759033,
    "source": "tavily_api_raw"
  }
}