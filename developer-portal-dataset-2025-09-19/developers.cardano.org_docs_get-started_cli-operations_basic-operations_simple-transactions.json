{
  "url": "https://developers.cardano.org/docs/get-started/cli-operations/basic-operations/simple-transactions",
  "content": "![Cardano Logo](/img/cardano-black.svg)\n![Cardano Logo](/img/cardano-white.svg)\n\n# Simple transactions\n\n## Simple transactions[​](#simple-transactions \"Direct link to Simple transactions\")\n\nCardano transactions involve consuming one or more Unspent Transaction Outputs (UTXOs) and generating one or more new UTXOs. The most basic transaction type involves transferring ada from one address to another. It is essential to ensure that all transactions are 'well-balanced', meaning that the sum of outputs and transaction fees equals the sum of inputs. This balance ensures the integrity and validity of the transaction. Unbalanced transactions are rejected by the local node.\n\nCreating a transaction using the CLI follows a three-step process:\n\nYou'll find commands for these tasks under `cardano-cli conway transaction`\n\n`cardano-cli conway transaction`\n`cardano-cli conway transaction  \nUsage: cardano-cli conway transaction   \n ( build-raw  \n | build  \n | build-estimate  \n | sign  \n | witness  \n | assemble  \n | submit  \n | policyid  \n | calculate-min-fee  \n | calculate-min-required-utxo  \n | hash-script-data  \n | txid  \n )  \n  \n Transaction commands.`\n\n`cardano-cli` provides several options for constructing transactions: `transaction build-raw`, `transaction build`, and `build-estimate`. The key difference between these methods lies in their offline and online capabilities, as well as the degree of manual or automatic processing involved.\n\n`cardano-cli`\n`transaction build-raw`\n`transaction build`\n`build-estimate`\n`build-raw`\n`build`\n`build-estimate`\n\nWhen building a transaction, it's essential to specify the following elements:\n\n## Building transactions with the `build-raw` command[​](#building-transactions-with-the-build-raw-command \"Direct link to building-transactions-with-the-build-raw-command\")\n\n`build-raw`\n\nTo create a transaction using `build-raw`, you will need the protocol parameters. These parameters are necessary for calculating the transaction fee at a later stage. Querying the protocol parameters requires a running node:\n\n`build-raw`\n`cardano-cli conway query protocol-parameters --out-file pparams.json`\n\nYou also need to know the inputs (UTXOs) you will use. A UTXO is identified by its **transaction hash** (`TxHash`) and **transaction index** (`TxIx`) with the syntax `TxHash#TxIx`. You can only use UTXOs controlled by your `payment.skey`.\n\n`TxHash`\n`TxIx`\n`TxHash#TxIx`\n`payment.skey`\n\nTo query the UTXOs associated to your `payment.addr`, run:\n\n`payment.addr`\n`cardano-cli conway query utxo --address $(< payment.addr)  \n  \n TxHash TxIx Amount  \n--------------------------------------------------------------------------------------  \ne29e96a012c2443d59f2e53c156503a857c2f27c069ae003dab8125594038891 0 9994790937 lovelace + TxOutDatumNone`\n\nIn this example, the address has one UTXO associated with it. It holds 9,994,790,937 lovelace (9,994.790937 ada).\n\nAssume you want to send 1,000,000 lovelace (1,000 ada) from `payment.addr` to a `payment2.addr`. This transaction will have one input and two outputs:\n\n`payment.addr`\n`payment2.addr`\n`e29e96a012c2443d59f2e53c156503a857c2f27c069ae003dab8125594038891#0`\n`payment2.addr`\n`payment.addr`\n\nAt this stage, you do not need to worry about the transaction fees. Save the transaction body in the `tx.draft` file:\n\n`tx.draft`\n`cardano-cli conway transaction build-raw \\  \n --tx-in e29e96a012c2443d59f2e53c156503a857c2f27c069ae003dab8125594038891#0 \\  \n --tx-out addr_test1vzuztsedkqanfm7elu9nshfr4gh2gl0aj4djmayav2t7x8ch3pg30+1000000000 \\  \n --tx-out addr_test1qp39w0fa0ccdc4gmg87puydf2kxt5mgt0vteq4a22ktrcssg7ysmx64l90xa0k4z25wpuejngya833qeu9cdxvveynfscsskf5+8994790937 \\  \n --fee 0 \\  \n --protocol-params-file pparams.json \\  \n --out-file tx.draft`\n\n`cardano-cli` can handle the nesting of commands. For example, you can use `cat` within `cardano-cli` to read the addresses directly from the file.\n\n`cardano-cli`\n`cat`\n`cardano-cli`\n`cardano-cli conway transaction build-raw \\  \n --tx-in e29e96a012c2443d59f2e53c156503a857c2f27c069ae003dab8125594038891#0 \\  \n --tx-out \"$(< payment2.addr)+1000000000\" \\  \n --tx-out \"$(< payment.addr)+8994790937\" \\  \n --fee 0 \\  \n --protocol-params-file pparams.json \\  \n --out-file tx.draft`\n\nLet's explore the created `tx.draft` file. It is a text envelope. The 'type' field says that it is an **Unwitnessed Babbage era transaction**. 'Unwitnessed' means that it has not been signed yet. The \"cborHex\" field encodes all transaction details:\n\n`tx.draft`\n`cat tx.draft  \n{  \n \"type\": \"Unwitnessed Tx BabbageEra\",  \n \"description\": \"Ledger Cddl Format\",  \n \"cborHex\": \"84a30081825820e29e96a012c2443d59f2e53c156503a857c2f27c069ae003dab812559403889100018282581d60b825c32db03b34efd9ff0b385d23aa2ea47dfd955b2df49d6297e31f1a3b9aca008258390062573d3d7e30dc551b41fc1e11a9558cba6d0b7b179057aa55963c4208f121b36abf2bcdd7daa2551c1e6653413a78c419e170d3319924d31b0000000218219e190200a0f5f6\"  \n}`\n\nUse the `transaction view` command to show the transaction body in a human-readable format:\n\n`transaction view`\n`cardano-cli debug transaction view --tx-body-file tx.draft`\n`{  \n \"auxiliary scripts\": null,  \n \"certificates\": null,  \n \"collateral inputs\": [],  \n \"era\": \"Babbage\",  \n \"fee\": \"0 Lovelace\",  \n \"inputs\": [  \n \"e29e96a012c2443d59f2e53c156503a857c2f27c069ae003dab8125594038891#0\"  \n ],  \n \"metadata\": null,  \n \"mint\": null,  \n \"outputs\": [  \n {  \n \"address\": \"addr_test1vzuztsedkqanfm7elu9nshfr4gh2gl0aj4djmayav2t7x8ch3pg30\",  \n \"address era\": \"Shelley\",  \n \"amount\": {  \n \"lovelace\": 1000000000  \n },  \n \"network\": \"Testnet\",  \n \"payment credential key hash\": \"b825c32db03b34efd9ff0b385d23aa2ea47dfd955b2df49d6297e31f\",  \n \"reference script\": null,  \n \"stake reference\": null  \n },  \n {  \n \"address\": \"addr_test1qp39w0fa0ccdc4gmg87puydf2kxt5mgt0vteq4a22ktrcssg7ysmx64l90xa0k4z25wpuejngya833qeu9cdxvveynfscsskf5\",  \n \"address era\": \"Shelley\",  \n \"amount\": {  \n \"lovelace\": 8994790937  \n },  \n \"network\": \"Testnet\",  \n \"payment credential key hash\": \"62573d3d7e30dc551b41fc1e11a9558cba6d0b7b179057aa55963c42\",  \n \"reference script\": null,  \n \"stake reference\": {  \n \"stake credential key hash\": \"08f121b36abf2bcdd7daa2551c1e6653413a78c419e170d3319924d3\"  \n }  \n }  \n ],  \n \"reference inputs\": [],  \n \"required signers (payment key hashes needed for scripts)\": null,  \n \"return collateral\": null,  \n \"total collateral\": null,  \n \"update proposal\": null,  \n \"validity range\": {  \n \"lower bound\": null,  \n \"upper bound\": null  \n },  \n \"withdrawals\": null,  \n \"witnesses\": []  \n}`\n\n### Calculating transaction fees and balancing a transaction[​](#calculating-transaction-fees-and-balancing-a-transaction \"Direct link to Calculating transaction fees and balancing a transaction\")\n\nIn Cardano, transaction fees are [deterministic](https://iohk.io/en/blog/posts/2021/09/06/no-surprises-transaction-validation-on-cardano/), meaning that you can know in advance how much a transaction will cost.\n\nTo process a transaction on the network, it must include fees specified within the transaction body. To calculate the exact cost, use the `transaction calculate-min-fee` command, which takes `tx.draft` and `pparams.json` files as inputs. Within this command, specify details like the total number of inputs, outputs, and the required number of signatures. In this case, only one witness, the `payment.skey` signature, is needed:\n\n`transaction calculate-min-fee`\n`tx.draft`\n`pparams.json`\n`payment.skey`\n`cardano-cli conway transaction calculate-min-fee \\  \n --tx-body-file tx.draft \\  \n --protocol-params-file pparams.json \\  \n --witness-count 1`\n\nRunning the command returns the fee that needs to be paid:\n\n`173993 Lovelace`\n\nWith this, recalculate the change that needs to go to `payment.addr` with a simple operation: `Change = originalBalance - amountSent - Fee`:\n\n`payment.addr`\n`Change = originalBalance - amountSent - Fee`\n`echo $((9994790937 - 1000000000 - 173993))  \n8994616944`\n\nRe-run `transaction build-raw`, include the fee, and adjust the change (the second tx-out). This completes the transaction body, and conventionally, it is saved into the `tx.raw` file.\n\n`transaction build-raw`\n`tx.raw`\n`cardano-cli conway transaction build-raw \\  \n --tx-in e29e96a012c2443d59f2e53c156503a857c2f27c069ae003dab8125594038891#0 \\  \n --tx-out $(< payment2.addr)+1000000000 \\  \n --tx-out $(< payment.addr)+8994616944 \\   \n --fee 173993 \\  \n --protocol-params-file pparams.json \\  \n --out-file tx.raw`\n\n### Signing the transaction[​](#signing-the-transaction \"Direct link to Signing the transaction\")\n\nSign the transaction with the `transaction sign` command. You must sign with the `payment.skey` that controls the UTXO you are trying to spend. This time, we produce the `tx.signed` file:\n\n`transaction sign`\n`payment.skey`\n`tx.signed`\n`cardano-cli conway transaction sign \\  \n--tx-body-file tx.raw \\  \n--signing-key-file payment.skey \\  \n--testnet-magic 2 \\  \n--out-file tx.signed`\n\nInspecting `tx.signed` with `transaction view` reveals that the `\"witnesses\"` field is no longer empty; it now contains the signature.\n\n`tx.signed`\n`transaction view`\n`\"witnesses\"`\n`cardano-cli debug transaction view --tx-file tx.signed`\n`{  \n \"auxiliary scripts\": null,  \n \"certificates\": null,  \n \"collateral inputs\": [],  \n \"era\": \"Babbage\",  \n \"fee\": \"173993 Lovelace\",  \n \"inputs\": [  \n \"e29e96a012c2443d59f2e53c156503a857c2f27c069ae003dab8125594038891#0\"  \n ],  \n \"metadata\": null,  \n \"mint\": null,  \n \"outputs\": [  \n {  \n \"address\": \"addr_test1vzuztsedkqanfm7elu9nshfr4gh2gl0aj4djmayav2t7x8ch3pg30\",  \n \"address era\": \"Shelley\",  \n \"amount\": {  \n \"lovelace\": 1000000000  \n },  \n \"network\": \"Testnet\",  \n \"payment credential key hash\": \"b825c32db03b34efd9ff0b385d23aa2ea47dfd955b2df49d6297e31f\",  \n \"reference script\": null,  \n \"stake reference\": null  \n },  \n {  \n \"address\": \"addr_test1qp39w0fa0ccdc4gmg87puydf2kxt5mgt0vteq4a22ktrcssg7ysmx64l90xa0k4z25wpuejngya833qeu9cdxvveynfscsskf5\",  \n \"address era\": \"Shelley\",  \n \"amount\": {  \n \"lovelace\": 8994616944  \n },  \n \"network\": \"Testnet\",  \n \"payment credential key hash\": \"62573d3d7e30dc551b41fc1e11a9558cba6d0b7b179057aa55963c42\",  \n \"reference script\": null,  \n \"stake reference\": {  \n \"stake credential key hash\": \"08f121b36abf2bcdd7daa2551c1e6653413a78c419e170d3319924d3\"  \n }  \n }  \n ],  \n \"reference inputs\": [],  \n \"required signers (payment key hashes needed for scripts)\": null,  \n \"return collateral\": null,  \n \"total collateral\": null,  \n \"update proposal\": null,  \n \"validity range\": {  \n \"lower bound\": null,  \n \"upper bound\": null  \n },  \n \"withdrawals\": null,  \n \"witnesses\": [  \n {  \n \"key\": \"VKey (VerKeyEd25519DSIGN \\\"8e090717d4c91437d3b8c467acc850197485913efdbfb48114a4d6cf0ca2dc02\\\")\",  \n \"signature\": \"SignedDSIGN (SigEd25519DSIGN \\\"897d4774e3da7a9ff92cbfb36ba03443bad0473a449cd65a4855e4e167e6800267d6b38ba836cab05420c3c5a781855ea92e0266be511e96217dd91050abcb06\\\")\"  \n }  \n ]  \n}`\n\n### Submitting the transaction[​](#submitting-the-transaction \"Direct link to Submitting the transaction\")\n\nSubmitting the transaction means sending it to the blockchain for processing by the stake pools and eventual inclusion in a block. While building and signing a transaction can be done without a running node, submitting the transaction requires an active connection to a running node. Use the `tx.signed` file:\n\n`tx.signed`\n`cardano-cli conway transaction submit \\  \n --tx-file tx.signed   \nTransaction successfully submitted.`\n\n## Building transactions with the `build` command[​](#building-transactions-with-the-build-command \"Direct link to building-transactions-with-the-build-command\")\n\n`build`\n\nUsing the `build` command for transaction construction simplifies the process significantly. However, it requires an active connection to the node to obtain the protocol parameters in real time. These parameters are then used to automatically calculate the fee to be paid. Additionally, the `build` command offers the `--change-address` flag, which automatically balances the transaction by sending the change to the specified address.\n\n`build`\n`build`\n`--change-address`\n\nFor example, let's send 500 ada (500000000 lovelace) to the `payment2.addr`.\n\n`payment2.addr`\n\nFirst, query the UTXOs of the input address:\n\n`cardano-cli query utxo --address $(< payment.addr)  \n TxHash TxIx Amount  \n--------------------------------------------------------------------------------------  \nc57f25ebf9cf1487b13deeb8449215c499f3d61c2836d84ab92a73b0bbaadd38 1 8994616944 lovelace + TxOutDatumNone`\n\nBuild the transaction:\n\n`cardano-cli conway transaction build \\  \n --tx-in c57f25ebf9cf1487b13deeb8449215c499f3d61c2836d84ab92a73b0bbaadd38#1 \\  \n --tx-out $(< payment2.addr)+500000000 \\  \n --change-address $(< payment.addr) \\  \n --out-file tx.raw`\n\nRunning this command returns the cost of the transaction fee:\n\n`Estimated transaction fee: Lovelace 167041`\n\nInspecting `tx.raw` with `transaction view` reveals that the transaction body already includes the fee, and the transaction is already balanced.\n\n`tx.raw`\n`transaction view`\n`cardano-cli debug transaction view --tx-file tx.raw`\n`{  \n \"auxiliary scripts\": null,  \n \"certificates\": null,  \n \"collateral inputs\": [],  \n \"era\": \"Babbage\",  \n \"fee\": \"167041 Lovelace\",  \n \"inputs\": [  \n \"c57f25ebf9cf1487b13deeb8449215c499f3d61c2836d84ab92a73b0bbaadd38#1\"  \n ],  \n \"metadata\": null,  \n \"mint\": null,  \n \"outputs\": [  \n {  \n \"address\": \"addr_test1vzuztsedkqanfm7elu9nshfr4gh2gl0aj4djmayav2t7x8ch3pg30\",  \n \"address era\": \"Shelley\",  \n \"amount\": {  \n \"lovelace\": 500000000  \n },  \n \"network\": \"Testnet\",  \n \"payment credential key hash\": \"b825c32db03b34efd9ff0b385d23aa2ea47dfd955b2df49d6297e31f\",  \n \"reference script\": null,  \n \"stake reference\": null  \n },  \n {  \n \"address\": \"addr_test1qp39w0fa0ccdc4gmg87puydf2kxt5mgt0vteq4a22ktrcssg7ysmx64l90xa0k4z25wpuejngya833qeu9cdxvveynfscsskf5\",  \n \"address era\": \"Shelley\",  \n \"amount\": {  \n \"lovelace\": 8494449903  \n },  \n \"network\": \"Testnet\",  \n \"payment credential key hash\": \"62573d3d7e30dc551b41fc1e11a9558cba6d0b7b179057aa55963c42\",  \n \"reference script\": null,  \n \"stake reference\": {  \n \"stake credential key hash\": \"08f121b36abf2bcdd7daa2551c1e6653413a78c419e170d3319924d3\"  \n }  \n }  \n ],  \n \"reference inputs\": [],  \n \"required signers (payment key hashes needed for scripts)\": null,  \n \"return collateral\": null,  \n \"total collateral\": null,  \n \"update proposal\": null,  \n \"validity range\": {  \n \"lower bound\": null,  \n \"upper bound\": null  \n },  \n \"withdrawals\": null,  \n \"witnesses\": []  \n}`\n\n### Signing the transaction[​](#signing-the-transaction-1 \"Direct link to Signing the transaction\")\n\nAs previously, sign the transaction with the `payment.skey`:\n\n`payment.skey`\n`cardano-cli conway transaction sign \\  \n --tx-body-file tx.raw \\  \n --signing-key-file payment.skey \\  \n --out-file tx.signed`\n\n### Submitting the transaction[​](#submitting-the-transaction-1 \"Direct link to Submitting the transaction\")\n\n`cardano-cli conway transaction submit \\  \n --tx-file tx.signed   \nTransaction successfully submitted.`\n\nYou can parse `cardano-cli` JSON outputs with `jq` to create programmatic workflows. For example, you can parse the output of `query utxo` to obtain the first UTXO associated with the payment address and use it as input (`--tx-in`) in `transaction build`:\n\n`cardano-cli`\n`jq`\n`query utxo`\n`--tx-in`\n`transaction build`\n`cardano-cli conway transaction build \\  \n--tx-in $(cardano-cli query utxo --address $(< payment.addr) --output-json | jq -r 'keys[0]') \\  \n--tx-out $(< payment.addr)+500000000 \\  \n--change-address $(< payment.addr) \\  \n--out-file tx.raw`\n`build-raw`\n`build`",
  "images": [],
  "extraction_metadata": {
    "batch_number": 4,
    "extraction_timestamp": "2025-09-19T14:04:34.999822",
    "extraction_time": 3.8223392963409424,
    "source": "tavily_api_raw"
  }
}