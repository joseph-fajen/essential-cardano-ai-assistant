{
  "url": "https://developers.cardano.org/docs/smart-contracts/smart-contract-languages/scalus",
  "content": "![Cardano Logo](/img/cardano-black.svg)\n![Cardano Logo](/img/cardano-white.svg)\n\n# Scalus\n\n[Scalus](https://scalus.org/) is a development platform for building decentralized applications (DApps) on the Cardano blockchain. It provides a unified environment where developers can write both on-chain smart contracts and off-chain logic using Scala 3 - a modern, expressive, and type-safe functional programming language.\n\n## Meet Scalus[​](#meet-scalus \"Direct link to Meet Scalus\")\n\nSay goodbye to juggling multiple languages, libraries, and tools—meet Scalus, a development platform made for professionals and businesses who want to get things done.\n\n## Getting Started[​](#getting-started \"Direct link to Getting Started\")\n\nThis guide will help you set up your development environment and get your first Scalus Validator.\n\n### Install Scala on your computer[​](#install-scala-on-your-computer \"Direct link to Install Scala on your computer\")\n\nWe recommend using Scala Installer - [Coursier](https://get-coursier.io/docs/cli-overview), that ensures that a JVM and standard Scala tools are installed on your system.\n\nHomebrew based installation:\n\n`brew install coursier && coursier setup`\n\nOn the Apple Silicon (M1, M2, …) architecture:\n\n`curl -fL https://github.com/VirtusLab/coursier-m1/releases/latest/download/cs-aarch64-apple-darwin.gz | gzip -d > cs && chmod +x cs && (xattr -d com.apple.quarantine cs || true) && ./cs setup`\n\nOtherwise, on the x86-64 architecture:\n\n`curl -fL https://github.com/coursier/coursier/releases/latest/download/cs-x86_64-apple-darwin.gz | gzip -d > cs && chmod +x cs && (xattr -d com.apple.quarantine cs || true) && ./cs setup`\n\nOn the x86-64 architecture:\n\n`curl -fL https://github.com/coursier/coursier/releases/latest/download/cs-x86_64-pc-linux.gz | gzip -d > cs && chmod +x cs && ./cs setup`\n\nOtherwise, on the ARM64 architecture:\n\n`curl -fL https://github.com/VirtusLab/coursier-m1/releases/latest/download/cs-aarch64-pc-linux.gz | gzip -d > cs && chmod +x cs && ./cs setup`\n\nCoursier will install Scala compiler, Command line tool: [Scala CLI](https://scala-cli.virtuslab.org/), Build tool: [sbt](https://www.scala-sbt.org/), REPL: [Ammonite](https://ammonite.io/) and Code formatter: [Scalafmt](https://scalameta.org/scalafmt/).\n\n### Get your first Scalus Validator[​](#get-your-first-scalus-validator \"Direct link to Get your first Scalus Validator\")\n\n`sbt new scalus3/hello.g8`\n\nThis ran the template scalus3/hello.g8 using [Giter8](https://www.foundweekends.org/giter8/). Let's take a look at what just got generated:\n\n`validator/  \n├── HelloCardano.scala # Simple validator  \n├── HelloCardano.test.scala # Simple tests  \n├── project.scala # Project configuration  \n└── README.md`\n\n### Test[​](#test \"Direct link to Test\")\n\nRun unit tests (MUnit, ScalaTest and ScalaCheck):\n\n`scala-cli test hello`\n\nAll is good if you see the following output:\n\n`validator.HelloCardanoSpec:  \n + Hello Cardano 0.385s`\n\n## Configure IDE[​](#configure-ide \"Direct link to Configure IDE\")\n\nSetting up a productive development environment will significantly improve your Scala/Scalus development experience.\nScala offers wide range of IDE support, the most popular are IntelliJ and VSCode.\n\nMetals is most commonly used with VS Code, but it's also available for Emacs, Vim, Sublime Text, Helix as [documented](https://scalameta.org/metals/docs/#editor-support).\n\n`import scalus.*  \nimport scalus.builtin.Data  \nimport scalus.ledger.api.v3.{PubKeyHash, TxInfo, TxOutRef}  \nimport scalus.prelude.*  \nimport scalus.prelude.Option.Some  \nimport scalus.prelude.Prelude.*  \n  \n/** This validator demonstrates two key validation checks:  \n* 1. It verifies that the transaction is signed by the owner's public key hash (stored in the datum)  \n* 2. It confirms that the redeemer contains the exact string \"Hello, Cardano!\"  \n*   \n* Both conditions must be met for the validator to approve spending the UTxO.  \n */  \n  \n@Compile  \nobject HelloCardano extends Validator:  \n override def spend(  \n datum: Option[Data],  \n redeemer: Data,  \n tx: TxInfo,  \n sourceTxOutRef: TxOutRef  \n ): Unit =   \n val Some(ownerData) = datum: @unchecked  \n val owner = ownerData.to[PubKeyHash]  \n val signed = tx.signatories.contains(owner)  \n require(signed, \"Must be signed\")  \n val saysHello = redeemer.to[String] == \"Hello, Cardano!\"  \n require(saysHello, \"Invalid redeemer\")`\n\n## Support[​](#support \"Direct link to Support\")",
  "images": [],
  "extraction_metadata": {
    "batch_number": 12,
    "extraction_timestamp": "2025-09-19T14:05:17.156321",
    "extraction_time": 1.6163160800933838,
    "source": "tavily_api_raw"
  }
}