{
  "url": "https://developers.cardano.org/docs/get-started/cli-operations/governance/constitutional%20committee",
  "content": "![Cardano Logo](/img/cardano-black.svg)\n![Cardano Logo](/img/cardano-white.svg)\n\n# Constitutional committee\n\n## Committee member cold credentials[​](#committee-member-cold-credentials \"Direct link to Committee member cold credentials\")\n\nIndividuals or entities nominated as committee members must generate a *cold* credential, which can be either a public key (Ed25519) or a script. This cold credential serves as the primary identifier and is used to authorize a *hot* credential, which is used for voting.\n\nThe term 'cold' emphasizes that this credential is stored in a secure, offline environment, such as safeguarded USB drives, isolated computing machines, or other devices deliberately formatted and disconnected from the internet for enhanced security. Conversely, the term 'hot' indicates that this credential is slightly more exposed, as it is more frequently used for signing votes. New hot credentials can be authorized at any point, where a new authorization certificate overrides the previous one.\n\nThe most basic setup for a Constitutional Committee member is using Ed25519 keys. An Ed25519 key pair includes a private key and its corresponding public key. The private key is utilized to create digital signatures, while the public key is employed to verify those signatures. On this setup. the constitutional committee member would generate two sets of keys: *cold* and *hot* and issue an authorization certificate to link them.\n\n### Generate cold key pair:[​](#generate-cold-key-pair \"Direct link to Generate cold key pair:\")\n\n`cardano-cli conway governance committee key-gen-cold \\  \n --cold-verification-key-file cc-cold.vkey \\  \n --cold-signing-key-file cc-cold.skey`\n\nAs usual, the ed25519 keys are wrapped on a text envelope:\n\n`{  \n \"type\": \"ConstitutionalCommitteeColdVerificationKey_ed25519\",  \n \"description\": \"Constitutional Committee Cold Verification Key\",  \n \"cborHex\": \"58201e2c2038e3466fdc7b8e1b302b15db28427adb5467b9df09e736e713d7371d04\"  \n}`\n`{  \n \"type\": \"ConstitutionalCommitteeColdSigningKey_ed25519\",  \n \"description\": \"Constitutional Committee Cold Signing Key\",  \n \"cborHex\": \"5820ffafa2978add44508e2d9d704faf54bccd41fad5f5c312b268c48d32a99c1099\"  \n}`\n\n### Generate the cold verification key hash:[​](#generate-the-cold-verification-key-hash \"Direct link to Generate the cold verification key hash:\")\n\n`cardano-cli conway governance committee key-hash \\  \n --verification-key-file cc-cold.vkey > cc-key.hash`\n`cat cc-key.hash  \n89181f26b47c3d3b6b127df163b15b74b45bba7c3b7a1d185c05c2de`\n\nThe key hash (or script hash) is what identifies the CC member on-chain and would be typically used in the **update committee** governance\naction that attempts to add or remove CC members.\n\nMembers of the Interim Constitutional Committee are required to share their Cold key hash or Cold script hash to be added to the Conway genesis file.\n\n### Generate Hot key pair:[​](#generate-hot-key-pair \"Direct link to Generate Hot key pair:\")\n\nAfter the Chang hardfork, members of the Interim Constitutional Committee are required to generate a *hot key pair* (or hot script) and\nsubmit an *Authorization Certificate*. This also applies to new Committee members appointed after the interim phase.\n\nTo generate a hot key-pair run the following command:\n\n`cardano-cli conway governance committee key-gen-hot \\  \n --verification-key-file cc-hot.vkey \\  \n --signing-key-file cc-hot.skey`\n\nHot keys are also ed25519 keys wrapped on a text envelope:\n\n`{  \n \"type\": \"ConstitutionalCommitteeHotVerificationKey_ed25519\",  \n \"description\": \"Constitutional Committee Hot Verification Key\",  \n \"cborHex\": \"5820d206b8619a933a099e3190afe0a81cb485af66c3d9297f4b109da507ad5259c0\"  \n}`\n`{  \n \"type\": \"ConstitutionalCommitteeHotSigningKey_ed25519\",  \n \"description\": \"Constitutional Committee Hot Signing Key\",  \n \"cborHex\": \"5820727625958a2b484d6797cb00079cdf71199555ce1db67bd1a868665bac1099c8\"  \n}`\n\n### Generate the Authorization Certificate:[​](#generate-the-authorization-certificate \"Direct link to Generate the Authorization Certificate:\")\n\nThe *Authorization Certificate* allows the hot credential to act on behalf of the cold credential by signing transactions where votes are cast. If the\n*hot* credential is compromised at any point, the committee member must generate a new one and issue a new Authorization Certificate. A new Authorization Certificate registered on-chain overrides the previous one, effectively invalidating any votes signed by the old hot credential. This applies only to actions that have not yet been ratified. Actions that have been already ratified or enacted by the old hot credential are not affected.\n\n`cardano-cli conway governance committee create-hot-key-authorization-certificate \\  \n --cold-verification-key-file cc-cold.vkey \\  \n --hot-verification-key-file cc-hot.vkey \\  \n --out-file cc-authorization.cert`\n`cat cc-authorization.cert   \n  \n{  \n \"type\": \"CertificateConway\",  \n \"description\": \"Constitutional Committee Hot Key Registration Certificate\",  \n \"cborHex\": \"830e8200581cb3745a0b5231017ab5c02ad45b55f4d50940fb127120455bcaedd53a8200581cdeaf2ae047657b1ad4094bb99664d160a7cd8c539b1ed3d44ffb8de9\"  \n}`\n\n### Submit the authorization certificate in a transaction:[​](#submit-the-authorization-certificate-in-a-transaction \"Direct link to Submit the authorization certificate in a transaction:\")\n\n`cardano-cli conway transaction build \\  \n --tx-in \"$(cardano-cli query utxo --address \"$(< payment.addr)\" --output-json | jq -r 'keys[0]')\" \\  \n --change-address payment.addr \\  \n --certificate-file cc-authorization.cert \\  \n --witness-override 2 \\  \n --out-file tx.raw`\n`cardano-cli conway transaction sign \\  \n --tx-body-file tx.raw \\  \n --signing-key-file payment.skey \\  \n --signing-key-file cc-cold.skey \\  \n --out-file tx.signed`\n`cardano-cli conway transaction submit \\  \n --tx-file tx.signed`\n\nConstitutional Committee members comprising multiple individuals can opt for a multisignature setup using simple scripts.\n\nThere are multiple possible setups, in this example we show how [Simple scripts](/docs/get-started/cli-operations/simple-scripts/) can be used for both the *cold* and the *hot* credentials.\n\nAssume Alice, Bob and Carol form an organization \"ABC\" and the community wishes to appoint \"ABC\" as a Constitutional Committee member.\n\n### Generate keys for the cold credential:[​](#generate-keys-for-the-cold-credential \"Direct link to Generate keys for the cold credential:\")\n\nAlice, Bob, and Carol need to generate a key-pair for the multisignature cold credential.\n\nAlice:\n\n`cardano-cli conway governance committee key-gen-cold \\  \n --cold-verification-key-file alice-cold.vkey \\  \n --cold-signing-key-file alice-cold.skey`\n\nBob:\n\n`cardano-cli conway governance committee key-gen-cold \\  \n --cold-verification-key-file bob-cold.vkey \\  \n --cold-signing-key-file bob-cold.skey`\n\nCarol:\n\n`cardano-cli conway governance committee key-gen-cold \\  \n --cold-verification-key-file carol-cold.vkey \\  \n --cold-signing-key-file carol-cold.skey`\n\n### Get verification key hashes:[​](#get-verification-key-hashes \"Direct link to Get verification key hashes:\")\n\nTo generate a multisignature script, Alice, Bob, and Carol need to obtain their verification key hashes:\n\n`cardano-cli conway governance committee key-hash --verification-key-file alice-cold.vkey   \n8d6ae7ddc48e434d28ee36985043a180a98e8566e1d83cfe79a35270  \n  \ncardano-cli conway governance committee key-hash --verification-key-file bob-cold.vkey   \n6689c9c9749266c2470ff49ee115a6e040e0a97042f1982c3de52f25  \n  \ncardano-cli conway governance committee key-hash --verification-key-file carol-cold.vkey   \nda1a4d13a1c951f30a7efb4dac2b4c1f603f4eabbfa0ecc7f361bfc1`\n\n### Create the multisignature cold script:[​](#create-the-multisignature-cold-script \"Direct link to Create the multisignature cold script:\")\n\nCreate the multisignature `cold.script` file using the simple scrypt syntax. In this example we use the `atLeast` type, so that 2 out of the 3 keys are required for the script to evaluate to true. To learn more about simple scripts read [this article](/docs/get-started/cli-operations/simple-scripts/)\n\n`cold.script`\n`atLeast`\n`cat cold.script  \n  \n{  \n \"type\": \"atLeast\",  \n \"required\": 2,  \n \"scripts\":  \n [  \n {  \n \"type\": \"sig\",  \n \"keyHash\": \"dd690145e402d3f275fe8c980b2476af5f89cb5e933eb28e3a473959\"  \n },  \n {  \n \"type\": \"sig\",  \n \"keyHash\": \"a49778c69b5f78e7677dedf962c63509ba3e8405078ac37b6d87fb85\"  \n },  \n {  \n \"type\": \"sig\",  \n \"keyHash\": \"770fed404cd3693d5ccafa65ab4e3fed09f6d9f9f72196e3be9d4ab9\"  \n },  \n ]  \n}`\n\n### Calculate the script hash:[​](#calculate-the-script-hash \"Direct link to Calculate the script hash:\")\n\nThe governance action that proposes \"ABC\" organization as a Committee Member needs to reference their cold script hash. They can obtain it with:\n\n`cardano-cli hash script --script-file cold.script   \nad31d247bb2549db98020c5a6331732ebe559ad85b5768abbda3eb0d`\n\n### Generate keys for the hot credential:[​](#generate-keys-for-the-hot-credential \"Direct link to Generate keys for the hot credential:\")\n\nIf ratified, \"ABC\" will need to generate a *Hot* credential and an Authorization certificate. Alice, Bob and Carol can follow the exact same workflow from above: Generate Ed25519 key pair for each member, and create a multisignature simple script.\n\nAlice:\n\n`cardano-cli conway governance committee key-gen-hot \\  \n --verification-key-file alice-hot.vkey \\  \n --signing-key-file alice-hot.skey`\n\nBob:\n\n`cardano-cli conway governance committee key-gen-hot \\  \n --verification-key-file bob-hot.vkey \\  \n --signing-key-file bob-hot.skey`\n\nCarol:\n\n`cardano-cli conway governance committee key-gen-hot \\  \n --verification-key-file carol-hot.vkey \\  \n --signing-key-file carol-hot.skey`\n\n### Get the hot key hashes:[​](#get-the-hot-key-hashes \"Direct link to Get the hot key hashes:\")\n\n`cardano-cli conway governance committee key-hash --verification-key-file alice-hot.vkey  \nd775c28b6635d6eaecdc149f490f27d651ff4a10e2f37d60dfb23f11  \n  \ncardano-cli conway governance committee key-hash --verification-key-file bob-hot.vkey  \n7be259f2b92d9587c3f0fddfa7ebdd19ad5b8e0f82e0a17166186001  \n  \ncardano-cli conway governance committee key-hash --verification-key-file carol-hot.vkey  \n643f4e3d521675e199e38a6904038057252507fd69b97b9f181912b1`\n\n### Create the multisignature hot script:[​](#create-the-multisignature-hot-script \"Direct link to Create the multisignature hot script:\")\n\n`cat hot.script  \n  \n{  \n \"type\": \"atLeast\",  \n \"required\": 2,  \n \"scripts\":  \n [  \n {  \n \"type\": \"sig\",  \n \"keyHash\": \"d775c28b6635d6eaecdc149f490f27d651ff4a10e2f37d60dfb23f11\"  \n },  \n {  \n \"type\": \"sig\",  \n \"keyHash\": \"7be259f2b92d9587c3f0fddfa7ebdd19ad5b8e0f82e0a17166186001\"  \n },  \n {  \n \"type\": \"sig\",  \n \"keyHash\": \"643f4e3d521675e199e38a6904038057252507fd69b97b9f181912b1\"  \n }  \n ]  \n}`\n\n### Calculate the hot script hash:[​](#calculate-the-hot-script-hash \"Direct link to Calculate the hot script hash:\")\n\n`cardano-cli hash script --script-file hot.script   \nf5d42214cb2625cfc34e5c0cfb1daceee44a4a3c2e6807ab67cd6adb`\n\n### Issue the authorization certificate[​](#issue-the-authorization-certificate \"Direct link to Issue the authorization certificate\")\n\nThe *Authorization Certificate* allows the hot credential to act on behalf of the cold credential by signing transactions where votes are cast. If the\n*hot* credential is compromised at any point, the committee member must generate a new one and issue a new Authorization Certificate. A new Authorization Certificate registered on-chain overrides the previous one, effectively invalidating any votes signed by the old hot credential. This applies only to actions that have not yet been ratified. Actions that have been already ratified or enacted by the old hot credential are not affected.\n\n`cardano-cli conway governance committee create-hot-key-authorization-certificate \\  \n --cold-script-hash ad31d247bb2549db98020c5a6331732ebe559ad85b5768abbda3eb0d \\  \n --hot-script-hash f5d42214cb2625cfc34e5c0cfb1daceee44a4a3c2e6807ab67cd6adb \\  \n --out-file cc-authorization.cert`\n\n### Submit the authorization certificate in a transaction[​](#submit-the-authorization-certificate-in-a-transaction-1 \"Direct link to Submit the authorization certificate in a transaction\")\n\nBuild the transaction:\n\n`cardano-cli conway transaction build \\  \n --tx-in \"$(cardano-cli query utxo --address \"$(< payment.addr)\" --output-json | jq -r 'keys[0]')\" \\  \n --change-address \"$(< payment.addr)\" \\  \n --certificate-file cc-authorization.cert \\  \n --certificate-script-file cold.script \\  \n --witness-override 4 \\  \n --out-file tx.raw  \n  \n>Estimated transaction fee: Coin 190933`\n\nWitness the transaction with the payment key:\n\n`cardano-cli conway transaction witness \\  \n --tx-body-file tx.raw \\  \n --signing-key-file payment.skey \\  \n --out-file payment.witness`\n\nAlice witnesses the transaction:\n\n`cardano-cli conway transaction witness \\  \n --tx-body-file tx.raw \\  \n --signing-key-file alice-cold.skey \\  \n --out-file alice.witness`\n\nBob witnesses the transaction:\n\n`cardano-cli conway transaction witness \\  \n --tx-body-file tx.raw \\  \n --signing-key-file bob-cold.skey \\  \n --out-file bob.witness`\n\nCarol witnesses the transaction:\n\n`cardano-cli conway transaction witness \\  \n --tx-body-file tx.raw \\  \n --signing-key-file carol-cold.skey \\  \n --out-file carol.witness`\n\nAssemble the tranaction with all the witnesses from previous step:\n\n`cardano-cli conway transaction assemble \\  \n --tx-body-file tx.raw \\  \n --witness-file payment.witness \\  \n --witness-file alice.witness \\  \n --witness-file bob.witness \\  \n --witness-file carol.witness \\  \n --out-file tx.signed`\n\nSubmit the transaction\n\n`cardano-cli conway transaction submit \\  \n --tx-file tx.signed`\n\nPlease go to [Credential Manager](https://credential-manager.readthedocs.io/en/latest/index.html)\n\nIt is a suite of Plutus scripts and tools for managing credentials with an X.509 certificate chain, ensuring secure access and operations within the Cardano blockchain for key management and security best practices.",
  "images": [],
  "extraction_metadata": {
    "batch_number": 5,
    "extraction_timestamp": "2025-09-19T14:04:40.000976",
    "extraction_time": 1.9930140972137451,
    "source": "tavily_api_raw"
  }
}