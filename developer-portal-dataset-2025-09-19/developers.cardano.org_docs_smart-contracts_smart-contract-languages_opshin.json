{
  "url": "https://developers.cardano.org/docs/smart-contracts/smart-contract-languages/opshin",
  "content": "![Cardano Logo](/img/cardano-black.svg)\n![Cardano Logo](/img/cardano-white.svg)\n\n# OpShin\n\n## Introduction[​](#introduction \"Direct link to Introduction\")\n\n[OpShin](https://github.com/OpShin/opshin) is a programming language for developing smart contracts on the Cardano blockchain.\nIts syntax is 100% valid Python code and it ensures that contracts evaluate on-chain\nexactly as their Python counterpart.\nThis allows unit tests and verification of the Python code using standard tooling available for Python development.\nExisting IDEs, linters and language servers may be re-used as well.\nNote that the type system of opshin is much stricter than the type system of Python, so that many optimizations can be implemented and an elevated level of security is provided.\n\nThe language interacts closely with the python library [PyCardano](https://pycardano.readthedocs.io/en/latest/index.html).\nThe internal data structures are defined with data types compatible to the library and allow a tight combination of off- and on-chain code, all written in Python.\n\n## Getting started[​](#getting-started \"Direct link to Getting started\")\n\nA complete example on a small written contract and off-chain code to deploy it on-chain can be found in the [opshin-starter-kit](https://github.com/OpShin/opshin-starter-kit) repository.\nIt contains code that will compile the contract and deploy it to the preview testnet, runnable in demeter.run, in your browser.\n\n### Example contract[​](#example-contract \"Direct link to Example contract\")\n\nThis is a basic validator written in opshin:\n\n`from opshin.prelude import *  \n  \n  \n@dataclass()  \nclass WithdrawDatum(PlutusData):  \n pubkeyhash: bytes  \n  \n  \ndef validator(datum: WithdrawDatum, redeemer: None, context: ScriptContext) -> None:  \n sig_present = False  \n for s in context.tx_info.signatories:  \n if datum.pubkeyhash == s:  \n sig_present = True  \n assert sig_present, \"Required signature missing\"`\n\nIt checks the presence of a specific signature in the transaction to approve spending funds.\nWe can compile the contract like this\n\n`python3 -m pip install opshin  \nopshin build contract.py`\n\nThe result is a directory filled with the contract address, policy ID and data that will be used by off-chain libraries to interact with the contract.\n\n## Links[​](#links \"Direct link to Links\")\n\n### Educational[​](#educational \"Direct link to Educational\")\n\nYou can find a youtube playlist to see OpShin in action [here](https://www.youtube.com/playlist?list=PLTh2dOp0i8OKn3H45KH7EqdI4wmkOjeCM).",
  "images": [],
  "extraction_metadata": {
    "batch_number": 12,
    "extraction_timestamp": "2025-09-19T14:05:17.156321",
    "extraction_time": 1.6163160800933838,
    "source": "tavily_api_raw"
  }
}