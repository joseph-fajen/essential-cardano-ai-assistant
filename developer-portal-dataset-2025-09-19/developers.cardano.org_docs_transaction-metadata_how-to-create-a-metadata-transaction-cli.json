{
  "url": "https://developers.cardano.org/docs/transaction-metadata/how-to-create-a-metadata-transaction-cli",
  "content": "![Cardano Logo](/img/cardano-black.svg)\n![Cardano Logo](/img/cardano-white.svg)\n\n# How to create a metadata transaction using cardano-cli\n\nThis guide assumes that you have a basic understanding of `cardano-wallet` and `cardano-cli`, how to use it and that you have installed it into your system. Otherwise, we recommend reading [Installing cardano-node](/docs/operate-a-stake-pool/node-operations/installing-cardano-node), [Running cardano-node](/docs/operate-a-stake-pool/node-operations/running-cardano), and [Exploring Cardano Wallets](/docs/integrate-cardano/creating-wallet-faucet) guides first.\n\n`cardano-wallet`\n`cardano-cli`\n\nThis guide also assumes that you have `cardano-node` and `cardano-wallet` running in the background and connected to one of the `testnet` networks.\n\n`cardano-node`\n`cardano-wallet`\n`testnet`\n\n## Overview[â€‹](#overview \"Direct link to Overview\")\n\nThis article will explore how we can utilize the **Transaction Metadata** feature of the **Cardano** blockchain. More specifically, how we can insert and retrieve metadata that we have stored in the blockchain for a decentralized application using **Transaction Metadata**.\n\n## Use case[â€‹](#use-case \"Direct link to Use case\")\n\nLet's imagine a decentralized **To-Do List Application** that stores and retrieve its metadata not from centralized servers or storage but instead from the **Cardano blockchain**. First, let's check the diagram below to see how something like this could theoretically work:\n\n![img](/assets/images/todo-list-app-45f9667e8173e1fe60c0ce49c5e5f679.png)\n\n![img](/assets/images/todo-list-app-45f9667e8173e1fe60c0ce49c5e5f679.png)\n\nThe diagram is heavily simplified and is not recommended to deploy in production.\n\nHere, we see a **front-end** application the user interacts with and is responsible for inserting and retrieving the metadata to/from the **back-end** server. The **back-end** server is responsible for communicating to the `cardano-node` by creating **transactions** and querying the blockchain for the **metadata** information required by the **front-end**.\n\n`cardano-node`\n\nThe **front-end** application is not necessarily tied to the specific **back-end** API and could switch to another API as long as it ultimately communicates to the **Cardano** network.\n\nHow do you actually create **transaction metadata** in the **Cardano** blockchain, you ask? We'll let's get our hands dirty!\n\n## Setup[â€‹](#setup \"Direct link to Setup\")\n\nTo create a transaction metadata using the `cardano-cli`, you must first create a **payment key-pair** and a **wallet address** if you haven't already.\n\n`cardano-cli`\n\n\\*\\* Create Payment Keys \\*\\*\n\n`cardano-cli address key-gen \\  \n--verification-key-file payment.vkey \\  \n--signing-key-file payment.skey`\n\n\\*\\* Create Wallet Address \\*\\*\n\n`cardano-cli address build \\  \n--payment-verification-key-file payment.vkey \\  \n--out-file payment.addr \\  \n--testnet-magic 1097911063`\n\nNow that you have a **wallet address**, you can now request some `tAda` funds from the [Testnet Faucet](/docs/integrate-cardano/testnet-faucet).\n\n`tAda`\n\nOnce you have some funds, we can now create the sample metadata that we want to store into the blockchain.\n\nWe start by creating a `metadata.json` file with the following content:\n\n`metadata.json`\n`{  \n \"1337\": {  \n \"name\": \"hello world\",  \n \"completed\": 0  \n }  \n}`\n\nBased on our theoretical **To-Do List** application, this `JSON` shape could be a way to insert / update entries into our list. We choose an arbitrary number (`1337`) as the key; we are basically saying that all metadata that will be inserted with that key is related to the **To-Do List** application data. Although we don't have control over what will be inserted with that metadata key since **Cardano** is an open platform.\n\n`JSON`\n`1337`\n\nNow that we have our `JSON` data, we can create a transaction and embed the metadata into the transaction. Ultimately storing it into the **Cardano** blockchain forever.\n\n`JSON`\n\n## Query UTXO[â€‹](#query-utxo \"Direct link to Query UTXO\")\n\nThe next step is to query the available **UTXO** from our **wallet address**:\n\n`cardano-cli query utxo --testnet-magic 1097911063 --address $(cat payment.addr)`\n\nYou should see something like this:\n\n `TxHash TxIx Amount  \n--------------------------------------------------------------------------------------  \ndfb99f8f103e56a856e04e087255dbaf402f3801acb71a6baf423a1054d3ccd5 0 1749651926 lovelace`\n\nHere we can see that our **wallet address** contains some spendable `lovelace` with the `TxHash: dfb99f8f103e56a856e04e087255dbaf402f3801acb71a6baf423a1054d3ccd5` and `TxIndex: 0`. We can then use it to pay for the transaction fee when we store our data on the blockchain.\n\n`lovelace`\n`TxHash: dfb99f8f103e56a856e04e087255dbaf402f3801acb71a6baf423a1054d3ccd5`\n`TxIndex: 0`\n\n## Submit to blockchain[â€‹](#submit-to-blockchain \"Direct link to Submit to blockchain\")\n\nNext, we create a draft transaction with the metadata embedded into it using the `TxHash` and `TxIndex` result from our last query.\n\n`TxHash`\n`TxIndex`\n`cardano-cli conway transaction build-raw \\  \n--tx-in dfb99f8f103e56a856e04e087255dbaf402f3801acb71a6baf423a1054d3ccd5#0 \\  \n--tx-out $(cat payment.addr)+0 \\  \n--metadata-json-file metadata.json \\  \n--fee 0 \\  \n--out-file tx.draft`\n\nThen we calculate the transaction fee like so:\n\n`cardano-cli conway transaction calculate-min-fee \\  \n--tx-body-file tx.draft \\  \n--tx-in-count 1 \\  \n--tx-out-count 1 \\  \n--witness-count 1 \\  \n--byron-witness-count 0 \\  \n--testnet-magic 1097911063 \\  \n--protocol-params-file protocol.json`\n\nYou should see something like this:\n\n`171793 Lovelace`\n\nWith that, We build the final transaction with the total amount of our wallet minus the calculated fee as the total output amount. `1749651926 - 171793 = 1749480133`\n\n`1749651926 - 171793 = 1749480133`\n`cardano-cli conway transaction build-raw \\  \n--tx-in dfb99f8f103e56a856e04e087255dbaf402f3801acb71a6baf423a1054d3ccd5#0 \\  \n--tx-out $(cat payment.addr)+1749480133 \\  \n--metadata-json-file metadata.json \\  \n--fee 171793 \\  \n--out-file tx.draft`\n\nWe then sign the transaction using our **payment signing key**:\n\n`cardano-cli conway transaction sign \\   \n--tx-body-file tx.draft \\  \n--signing-key-file payment.skey \\  \n--testnet-magic 1097911063 \\  \n--out-file tx.signed`\n\nFinally, we submit the signed transaction to the blockchain:\n\n`cardano-cli conway transaction submit \\  \n--tx-file tx.signed \\   \n--testnet-magic 1097911063`\n\nCongratulations, you are now able to submit **Cardano** transactions with metadata embedded into them. ðŸŽ‰ðŸŽ‰ðŸŽ‰\n\nUp next, we discuss how to retrieve metadata that we have stored in the **Cardano** blockchain. **@TODO**",
  "images": [],
  "extraction_metadata": {
    "batch_number": 12,
    "extraction_timestamp": "2025-09-19T14:05:17.156321",
    "extraction_time": 1.6163160800933838,
    "source": "tavily_api_raw"
  }
}