{
  "url": "https://developers.cardano.org/docs/native-tokens/minting",
  "content": "![Cardano Logo](/img/cardano-black.svg)\n![Cardano Logo](/img/cardano-white.svg)\n\n# Minting Native Assets\n\nIn this section, we will be minting native assets - **not NFTs**.\n\nIt is strongly advised to work through this section to understand how transactions and minting works.  \nMinting NFTs will follow the same process, with only a few tweaks. If you want to jump to NFTs, please visit [Minting NFTs](/docs/native-tokens/minting-nfts).\n\n## Prerequisites[​](#prerequisites \"Direct link to Prerequisites\")\n\n`cardano-cli`\n`cardano-cli`\n\n## Overview[​](#overview \"Direct link to Overview\")\n\nThis tutorial will give you a copy & pastable walk through the complete token lifecycle:\n\n![img](https://ucarecdn.com/75b79657-9f94-41b9-9426-7a65245f14ee/multiassetdiagram.png)\n\n![img](https://ucarecdn.com/75b79657-9f94-41b9-9426-7a65245f14ee/multiassetdiagram.png)\n\nThese will be the steps we need to take to complete the whole lifecycle:\n\n### Directory structure[​](#directory-structure \"Direct link to Directory structure\")\n\nWe'll be working in a new directory. Here is an overview of every file we will be generating:\n\n`├── burning.raw # Raw transaction to burn token  \n├── burning.signed # Signed transaction to burn token  \n├── matx.raw # Raw transaction to mint token  \n├── matx.signed # Signed transaction to mint token  \n├── metadata.json # Metadata to specify NFT attributes  \n├── payment.addr # Address to send / receive   \n├── payment.skey # Payment signing key  \n├── payment.vkey # Payment verification key  \n├── policy # Folder which holds everything policy-wise  \n│ ├── policy.script # Script to genereate the policyID  \n│ ├── policy.skey # Policy signing key  \n│ ├── policy.vkey # Policy verification key  \n│ └── policyID # File which holds the policy ID  \n└── protocol.json # Protocol parameters`\n\n### Token architecture[​](#token-architecture \"Direct link to Token architecture\")\n\nBefore minting native assets, you need to ask yourself at least those four questions:\n\nNumber 1, 3, and 4 will be defined in a so-called monetary policy script, whereas the actual amount will only be defined on the minting transaction.\n\nFor this guide, we will use:\n\n`Testtoken`\n`SecondTesttoken`\n`Testtoken`\n`SecondTesttoken`\n\n## Setup[​](#setup \"Direct link to Setup\")\n\n### Cardano node socket path[​](#cardano-node-socket-path \"Direct link to Cardano node socket path\")\n\nTo work with the `cardano-cli` we need to export an environment variable called `CARDANO_NODE_SOCKET_PATH`. Please note that the variable name is all uppercase.\nThe variable needs to hold the absolute path to the socket file of your running Cardano node installation.\n\n`cardano-cli`\n`CARDANO_NODE_SOCKET_PATH`\n\nIf you're unsure or do not know where to find your socket path, please check the command on how you start/run your Cardano node.  \nFor example - if you start your node with this command\n\n`$HOME/.local/bin/cardano-node run \\  \n --topology config/testnet-topology.json \\  \n --database-path db \\  \n --socket-path $HOME/TESTNET_NODE/socket/node.socket \\  \n --port 3001 \\  \n --config config/testnet-config.json`\n\nYou need to set the variable to the corresponding path of the `--socket-path` parameter:\n\n`--socket-path`\n`export CARDANO_NODE_SOCKET_PATH=\"$HOME/TESTNET_NODE/socket/node.socket\"`\n\nYou need to adjust the path on your setup and your socket path accordingly.\n\n### Improve readability[​](#improve-readability \"Direct link to Improve readability\")\n\nSince we've already answered all of the questions above, we will set variables on our terminal/bash to make readability a bit easier. First, we will specify a [testnet](/docs/get-started/testnets-and-devnets), either Pre-production:\n\n`testnet=\"--testnet-magic 1\"`\n\n... or Preview:\n\n`testnet=\"--testnet-magic 2\"`\n\nWhen minting native assets on Mainnet, the only difference will be to use the option `--mainnet` instead of `--testnet-magic <testnetID>`.\n\n`--mainnet`\n`--testnet-magic <testnetID>`\n\n**Since cardano-cli version 1.31.0, token names must be base16 encoded**, so here we use the `xxd` tool to encode the token names:\n\n`xxd`\n`tokenname1=$(echo -n \"Testtoken\" | xxd -ps | tr -d '\\n')  \ntokenname2=$(echo -n \"SecondTesttoken\" | xxd -ps | tr -d '\\n')  \ntokenamount=\"10000000\"  \noutput=\"0\"`\n\n### Check your node status[​](#check-your-node-status \"Direct link to Check your node status\")\n\nWe also want to check if our Node is up to date. To do that, we check the current epoch/block and compare it to the current value displayed in one of the Cardano Testnet Explorers:\n<https://preprod.cardanoscan.io/>\n<https://preview.cardanoscan.io/>\n\n`cardano-cli query tip $testnet`\n\nShould give you an output like this\n\n`{  \n \"epoch\": 282,  \n \"hash\": \"82cfbbadaaec1a6204442b91de1535505b6482ae9858f3f0bd9c4bb9c8a2c12b\",  \n \"slot\": 36723570,  \n \"block\": 6078639,  \n \"era\": \"Mary\"  \n}`\n\nEpoch and slot number should match when being compared to the data shown by Cardano Testnet explorers like\n\n![img](/assets/images/cardano_explorer_testnet-6dd2fd2f53607ba0e81cbe0e0f7c14ca.png)\n\n![img](/assets/images/cardano_explorer_testnet-6dd2fd2f53607ba0e81cbe0e0f7c14ca.png)\n\n### Set up your workspace[​](#set-up-your-workspace \"Direct link to Set up your workspace\")\n\nWe will start with a clean slate. So let's make a new directory and navigate into it.\n\n`mkdir tokens  \ncd tokens/`\n\n### Generate keys and address[​](#generate-keys-and-address \"Direct link to Generate keys and address\")\n\nIf you already have a payment address and keys and you want to use those, you can skip this step.  \nIf not - we need to generate those to submit transactions and to send and receive ada or native assets.\n\nPayment verification and signing keys are the first keys we need to create.\n\n`cardano-cli address key-gen --verification-key-file payment.vkey --signing-key-file payment.skey`\n\nThose two keys can now be used to generate an address.\n\n`cardano-cli address build --payment-verification-key-file payment.vkey --out-file payment.addr $testnet`\n\nWe will save our address hash in a variable called `address`.\n\n`address`\n`address=$(cat payment.addr)`\n\n### Fund the address[​](#fund-the-address \"Direct link to Fund the address\")\n\nSubmitting transactions always require you to pay a fee. Sending native assets also requires sending at least 1 ada.  \nSo make sure the address you are going to use as the input for the minting transaction has sufficient funds.\n\nFor **testnets**, you can request funds through the [Testnet Faucet](/docs/integrate-cardano/testnet-faucet).\n\n### Export protocol parameters[​](#export-protocol-parameters \"Direct link to Export protocol parameters\")\n\nFor our transaction calculations, we need some of the current protocol parameters. The parameters can be saved in a file called *protocol.json* with this command:\n\n`cardano-cli query protocol-parameters $testnet --out-file protocol.json`\n\n## Minting native assets[​](#minting-native-assets \"Direct link to Minting native assets\")\n\n### Generate the policy[​](#generate-the-policy \"Direct link to Generate the policy\")\n\nPolicies are the defining factor under which tokens can be minted. Only those in possession of the policy keys can mint or burn tokens minted under this specific policy.\nWe'll make a separate sub-directory in our work directory to keep everything policy-wise separated and more organized.\nFor further reading, please check [the official docs](https://docs.cardano.org/native-tokens/getting-started/#tokenmintingpolicies) or the [github page about multi-signature scripts](https://github.com/IntersectMBO/cardano-node/blob/c6b574229f76627a058a7e559599d2fc3f40575d/doc/reference/simple-scripts.md).\n\n`mkdir policy`\n\nWe don't navigate into this directory, and everything is done from our working directory.\n\nFirst of all, we — again — need some key pairs:\n\n`cardano-cli address key-gen \\  \n --verification-key-file policy/policy.vkey \\  \n --signing-key-file policy/policy.skey`\n\nUse the `echo` command to create a `policy.script` (the first line uses `>` instead of `>>`, to create the file if not present and clear any existing contents):\n\n`echo`\n`policy.script`\n`>`\n`>>`\n`echo \"{\" > policy/policy.script   \necho \" \\\"keyHash\\\": \\\"$(cardano-cli address key-hash --payment-verification-key-file policy/policy.vkey)\\\",\" >> policy/policy.script   \necho \" \\\"type\\\": \\\"sig\\\"\" >> policy/policy.script   \necho \"}\" >> policy/policy.script`\n\nThe second echo uses a sub-shell command to generate the so-called key-hash. But, of course, you could also do that by hand.\n\nWe now have a simple script file that defines the policy verification key as a witness to sign the minting transaction. There are no further constraints such as token locking or requiring specific signatures to successfully submit a transaction with this minting policy.\n\n### Asset minting[​](#asset-minting \"Direct link to Asset minting\")\n\nTo mint the native assets, we need to generate the policy ID from the script file we created.\n\n`cardano-cli conway transaction policyid --script-file ./policy/policy.script > policy/policyID`\n\nThe output gets saved to the file `policyID` as we need to reference it later on.\n\n`policyID`\n\n### Build the raw transaction to send to oneself[​](#build-the-raw-transaction-to-send-to-oneself \"Direct link to Build the raw transaction to send to oneself\")\n\nTo mint the tokens, we will make a transaction using our previously generated and funded address.\n\n#### A quick word about transactions in Cardano[​](#a-quick-word-about-transactions-in-cardano \"Direct link to A quick word about transactions in Cardano\")\n\nEach transaction in Cardano requires the payment of a fee which — as of now — will mostly be determined by the size of what we want to transmit.\nThe more bytes get sent, the higher the fee.\n\nThat's why making a transaction in Cardano is a three-way process.\n\n`raw`\n\nAnother thing to keep in mind is the model of how transactions and \"balances\" are designed in Cardano.\nEach transaction has one (or multiple) inputs (the source of your funds, like which bill you'd like to use in your wallet to pay) and one or multiple outputs.\nIn our minting example, the input and output will be the same - **our own address**.\n\nBefore we start, we will again need some setup to make the transaction building easier.\nFirst, query your payment address and take note of the different values present.\n\n`cardano-cli query utxo --address $address $testnet`\n\nYour output should look something like this (fictional example):\n\n `TxHash TxIx Amount  \n--------------------------------------------------------------------------------------  \nb35a4ba9ef3ce21adcd6879d08553642224304704d206c74d3ffb3e6eed3ca28 0 1000000000 lovelace`\n\nSince we need each of those values in our transaction, we will store them individually in a corresponding variable.\n\n`txhash=\"insert your txhash here\"  \ntxix=\"insert your TxIx here\"  \nfunds=\"insert Amount here\"  \npolicyid=$(cat policy/policyID)`\n\nFor our fictional example, this would result in the following output - **please adjust your values accordingly**:\n\n`$ txhash=\"b35a4ba9ef3ce21adcd6879d08553642224304704d206c74d3ffb3e6eed3ca28\"  \n$ txix=\"0\"  \n$ funds=\"1000000000\"  \n$ policyid=$(cat policy/policyID)`\n\nAlso, transactions only used to calculate fees must still have a fee set, though it doesn't have to be exact. The calculated fee will be included *the second time* this transaction is built (i.e. the transaction to sign and submit). This first time, only the fee parameter *length* matters, so here we choose a maximum value ([note](https://github.com/cardano-foundation/developer-portal/pull/283#discussion_r705612888)):\n\n`$ fee=\"300000\"`\n\nNow we are ready to build the first transaction to calculate our fee and save it in a file called *matx.raw*.\nWe will reference the variables in our transaction to improve readability because we saved almost all of the needed values in variables.\nThis is what our transaction looks like:\n\n`cardano-cli conway transaction build-raw \\  \n --fee $fee \\  \n --tx-in $txhash#$txix \\  \n --tx-out $address+$output+\"$tokenamount $policyid.$tokenname1 + $tokenamount $policyid.$tokenname2\" \\  \n --mint \"$tokenamount $policyid.$tokenname1 + $tokenamount $policyid.$tokenname2\" \\  \n --minting-script-file policy/policy.script \\  \n --out-file matx.raw`\n\nIn later versions of cardano-cli (at least from >1.31.0) **the tokennames must be base16 encoded or you will receive an error**\n\n`option --tx-out:   \nunexpected 'T'  \nexpecting alphanumeric asset name, white space, \"+\" or end of input`\n\nYou can fix this by redefining the tokennames. In this tutorial the equivalent base16 token names are:\n\n`tokenname1=\"54657374746F6B656E\"  \ntokenname2=\"5365636F6E6454657374746F6B656E\"`\n\n#### Syntax breakdown[​](#syntax-breakdown \"Direct link to Syntax breakdown\")\n\nHere's a breakdown of the syntax as to which parameters we define in our minting transaction:\n\n`--fee: $fee`\n\nThe network fee we need to pay for our transaction. Fees will be calculated through the network parameters and depending on the size (in bytes) our transaction will have. The bigger the file size, the higher the fee.\n\n`--tx-in $txhash#$txix \\`\n\nThe hash of our address we use as the input for the transaction needs sufficient funds.\nSo the syntax is: the hash, followed by a hashtag, followed by the value of TxIx of the corresponding hash.\n\n`--tx-out $address+$output+\"$tokenamount $policyid.$tokenname1 + $tokenamount $policyid.$tokenname2\" \\`\n\nHere is where part one of the magic happens. For the *--tx-out*, we need to specify which address will receive our transaction.\nIn our case, we send the tokens to our own address.\n\nThe syntax is very important, so here it is word for word. There are no spaces unless explicitly stated:\n\n`--mint \"$tokenamount $policyid.$tokenname1 + $tokenamount $policyid.$tokenname2\" \\`\n\nAgain, the same syntax as specified in *--tx-out* but without the address and output.\n\n`--out-file matx.raw`\n\nWe save our transaction to a file that you can name however you want.\nJust be sure to reference the correct filename in upcoming commands. I chose to stick with the official docs and declared it as *matx.raw*.\n\nBased on this raw transaction we can calculate the minimal transaction fee and store it in the variable *$fee*. We get a bit fancy here and only store the value so we can use the variable for terminal based calculations:\n\n`fee=$(cardano-cli conway transaction calculate-min-fee --tx-body-file matx.raw --tx-in-count 1 --tx-out-count 1 --witness-count 2 $testnet --protocol-params-file protocol.json | cut -d \" \" -f1)`\n\nRemember, the transaction input and the output of ada must be equal, or otherwise, the transaction will fail. There can be no leftovers.\nTo calculate the remaining output we need to subtract the fee from our funds and save the result in our output variable.\n\n`output=$(expr $funds - $fee)`\n\nWe now have every value we need to re-build the transaction, ready to be signed. So we reissue the same command to re-build, the only difference being our variables now holding the correct values.\n\n`cardano-cli conway transaction build-raw \\  \n--fee $fee \\  \n--tx-in $txhash#$txix \\  \n--tx-out $address+$output+\"$tokenamount $policyid.$tokenname1 + $tokenamount $policyid.$tokenname2\" \\  \n--mint \"$tokenamount $policyid.$tokenname1 + $tokenamount $policyid.$tokenname2\" \\  \n--minting-script-file policy/policy.script \\  \n--out-file matx.raw`\n\nTransactions need to be signed to prove the authenticity and ownership of the policy key.\n\n`cardano-cli conway transaction sign \\  \n--signing-key-file payment.skey \\  \n--signing-key-file policy/policy.skey \\  \n$testnet --tx-body-file matx.raw \\  \n--out-file matx.signed`\n\nNow we are going to submit the transaction, therefore minting our native assets:\n\n`cardano-cli conway transaction submit --tx-file matx.signed $testnet`\n\nCongratulations, we have now successfully minted our own token.\nAfter a couple of seconds, we can check the output address\n\n`cardano-cli query utxo --address $address $testnet`\n\nand should see something like this (fictional example):\n\n `TxHash TxIx Amount  \n--------------------------------------------------------------------------------------  \nd82e82776b3588c1a2c75245a20a9703f971145d1ca9fba4ad11f50803a43190 0 999824071 lovelace + 10000000 45fb072eb2d45b8be940c13d1f235fa5a8263fc8ebe8c1af5194ea9c.5365636F6E6454657374746F6B656E + 10000000 45fb072eb2d45b8be940c13d1f235fa5a8263fc8ebe8c1af5194ea9c.54657374746F6B656E`\n\n## Sending token to a wallet[​](#sending-token-to-a-wallet \"Direct link to Sending token to a wallet\")\n\nTo send tokens to a wallet, we need to build another transaction - this time only without the minting parameter.\nWe will set up our variables accordingly.\n\n`fee=\"0\"  \nreceiver=\"Insert wallet address here\"  \nreceiver_output=\"10000000\"  \ntxhash=\"\"  \ntxix=\"\"  \nfunds=\"Amount of lovelace\"`\n\nAgain - here is an example of how it would look if we use our fictional example:\n\n`$ fee=\"0\"  \n$ receiver=\"addr_test1qp0al5v8mvwv9mzn77ls0tev3t838yp9ghvgxf9t5qa4sqlua2ywcygl3d356c34576elq5mcacg88gaevceyc5tulwsmk7s8v\"  \n$ receiver_output=\"10000000\"  \n$ txhash=\"d82e82776b3588c1a2c75245a20a9703f971145d1ca9fba4ad11f50803a43190\"  \n$ txix=\"0\"  \n$ funds=\"999824071\"`\n\nYou should still have access to the other variables from the minting process.\nPlease check if those variables are set:\n\n`echo Tokenname 1: $tokenname1  \necho Tokenname 2: $tokenname2  \necho Address: $address  \necho Policy ID: $policyid`\n\nWe will be sending 2 of our first tokens, `Testtoken`, to the foreign address.  \nA few things worth pointing out:\n\n`Testtoken`\n`receiver_output`\n`txhash`\n\nCheck the [Cardano ledger docs for further reading](https://cardano-ledger.readthedocs.io/en/latest/explanations/min-utxo-alonzo.html#example-min-ada-value-calculations-and-current-constants)\n\nSince we will send 2 of our first tokens to the remote address we are left with 999998 of the `Testtoken` as well as the additional 1000000 `SecondTesttoken`.\n\n`Testtoken`\n`SecondTesttoken`\n\nHere’s what the `raw` transaction looks like:\n\n`raw`\n`cardano-cli conway transaction build-raw \\  \n--fee $fee \\  \n--tx-in $txhash#$txix \\  \n--tx-out $receiver+$receiver_output+\"2 $policyid.$tokenname1\" \\  \n--tx-out $address+$output+\"9999998 $policyid.$tokenname1 + 10000000 $policyid.$tokenname2\" \\  \n--out-file rec_matx.raw`\n\nAgain we are going to calculate the fee and save it in a variable.\n\n`fee=$(cardano-cli conway transaction calculate-min-fee --tx-body-file rec_matx.raw --tx-in-count 1 --tx-out-count 2 --witness-count 1 $testnet --protocol-params-file protocol.json | cut -d \" \" -f1)`\n\nAs stated above, we need to calculate the leftovers that will get sent back to our address.\nThe logic being:\n`TxHash Amount` — `fee` — `min Send 10 ada in Lovelace` = `the output for our own address`\n\n`TxHash Amount`\n`fee`\n`min Send 10 ada in Lovelace`\n`the output for our own address`\n`output=$(expr $funds - $fee - 10000000)`\n\nLet’s update the transaction:\n\n`cardano-cli conway transaction build-raw \\  \n--fee $fee \\  \n--tx-in $txhash#$txix \\  \n--tx-out $receiver+$receiver_output+\"2 $policyid.$tokenname1\" \\  \n--tx-out $address+$output+\"9999998 $policyid.$tokenname1 + 10000000 $policyid.$tokenname2\" \\  \n--out-file rec_matx.raw`\n\nSign it:\n\n`cardano-cli conway transaction sign --signing-key-file payment.skey $testnet --tx-body-file rec_matx.raw --out-file rec_matx.signed`\n\nSend it:\n\n`cardano-cli conway transaction submit --tx-file rec_matx.signed $testnet`\n\nAfter a few seconds, you, the receiver, should have your tokens. For this example, a Daedalus testnet wallet is used.\n\n![img](/assets/images/daedalus_tokens_rec-4fcd849d35dec1207843b319292eeb89.PNG)\n\n![img](/assets/images/daedalus_tokens_rec-4fcd849d35dec1207843b319292eeb89.PNG)\n\n## Burning token[​](#burning-token \"Direct link to Burning token\")\n\nIn the last part of our token lifecycle, we will burn 5000 of our newly made tokens *SecondTesttoken*, thereby destroying them permanently.\n\nYou won't be surprised that this — again — will be done with a transaction.\nIf you've followed this guide up to this point, you should be familiar with the process, so let's start over.\n\nSet everything up and check our address:\n\n`cardano-cli query utxo --address $address $testnet`\n\nLet's set our variables accordingly (if not already set). Variables like address and the token names should also be set.\n\n`txhash=\"insert your txhash here\"  \ntxix=\"insert your TxIx here\"  \nfunds=\"insert Amount only in here\"  \nburnfee=\"0\"  \npolicyid=$(cat policy/policyID)  \nburnoutput=\"0\"`\n\nBurning tokens is fairly straightforward.\nYou will issue a new minting action, but this time with a **negative** input. This will essentially subtract the amount of token.\n\n`cardano-cli conway transaction build-raw \\  \n --fee $burnfee \\  \n --tx-in $txhash#$txix \\  \n --tx-out $address+$burnoutput+\"9999998 $policyid.$tokenname1 + 9995000 $policyid.$tokenname2\" \\  \n --mint=\"-5000 $policyid.$tokenname2\" \\  \n --minting-script-file policy/policy.script \\  \n --out-file burning.raw`\n\nWe also need to specify the amount of tokens left after destroying.\nThe math is:\n*amount of input token* — *amount of destroyed token* = *amount of output token*\n\nAs usual, we need to calculate the fee.\nTo make a better differentiation, we named the variable *burnfee*:\n\n`burnfee=$(cardano-cli conway transaction calculate-min-fee --tx-body-file burning.raw --tx-in-count 1 --tx-out-count 1 --witness-count 2 $testnet --protocol-params-file protocol.json | cut -d \" \" -f1)`\n\nCalculate the correct output value\n\n`burnoutput=$(expr $funds - $burnfee)`\n\nRe-build the transaction with the correct amounts\n\n`cardano-cli conway transaction build-raw \\  \n --fee $burnfee \\  \n --tx-in $txhash#$txix \\  \n --tx-out $address+$burnoutput+\"9999998 $policyid.$tokenname1 + 9995000 $policyid.$tokenname2\" \\  \n --mint=\"-5000 $policyid.$tokenname2\" \\  \n --minting-script-file policy/policy.script \\  \n --out-file burning.raw`\n\nSign the transaction:\n\n`cardano-cli conway transaction sign \\  \n--signing-key-file payment.skey \\  \n--signing-key-file policy/policy.skey \\  \n$testnet \\  \n--tx-body-file burning.raw \\  \n--out-file burning.signed`\n\nSend it:\n\n`cardano-cli conway transaction submit --tx-file burning.signed $testnet`\n\nCheck your address:\n\n`cardano-cli query utxo --address $address $testnet`\n\nYou should now have 5000 tokens less than before:\n\n `TxHash TxIx Amount  \n--------------------------------------------------------------------------------------  \nf56e2800b7b5980de6a57ebade086a54aaf0457ec517e13012571b712cf53fb3 1 989643170 lovelace + 9995000 45fb072eb2d45b8be940c13d1f235fa5a8263fc8ebe8c1af5194ea9c.5365636F6E6454657374746F6B656E + 9999998 45fb072eb2d45b8be940c13d1f235fa5a8263fc8ebe8c1af5194ea9c.54657374746F6B656E`",
  "images": [],
  "extraction_metadata": {
    "batch_number": 8,
    "extraction_timestamp": "2025-09-19T14:04:55.057544",
    "extraction_time": 2.1853792667388916,
    "source": "tavily_api_raw"
  }
}