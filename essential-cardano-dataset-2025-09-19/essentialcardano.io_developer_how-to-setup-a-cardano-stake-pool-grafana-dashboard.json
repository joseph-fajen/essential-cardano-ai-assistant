{
  "url": "https://www.essentialcardano.io/developer/how-to-setup-a-cardano-stake-pool-grafana-dashboard",
  "content": "# How to setup a Cardano stake pool Grafana Dashboard\n\n![](https://avatars.githubusercontent.com/u/80989645?v=4)\n![](data:image/svg+xml,%3csvg%20xmlns=%27http://www.w3.org/2000/svg%27%20version=%271.1%27%20width=%271016%27%20height=%27411%27/%3e)\n![How to setup a Cardano stake pool Grafana Dashboard](/_next/image?url=https%3A%2F%2Fucarecdn.com%2F55936d8b-bd09-401b-b098-313ec6c4b9d1%2F&w=2048&q=75)\n\nOnce you have sucessfully set-up a Cardano pool, then comes the most beautifull part - setting up your dashboard and alerts! You surely don't want to gaze at the PC the whole day, right?\n\nI found it difficult to get all the information in one place so I am writing this documentaion and hopeully it helps others as well. This tutorial is for educational and learning purpose only.\n\n## Prerequisites:\n\nUbuntu Server 20.04 LTS (for Ubuntu 18.04 LTS please follow the alternative steps)\n\nCardano Block Producer Node (PN) up and running\n\nCardano Relay Nodes (RN) up and running\n\n## 1. Install Prometheus node exporter [Permalink](https://sanskys.github.io/grafana/#1-install-prometheus-node-exporter)\n\nFirstly, install Prometheus node exporter on the Block Producing and all Relay Nodes.\n\nFor Ubuntu 20.04\n\n`$ sudo apt-get install -y prometheus-node-exporter\n$ sudo systemctl enable prometheus-node-exporter.service`\n\nFor Ubuntu 18.04, install node\\_exporter as prometheus-node-exporter does not expose all metrics.\n\n`$ cd $HOME/git\n$ wget https://github.com/prometheus/node_exporter/releases/download/v1.1.2/node_exporter-1.1.2.linux-amd64.tar.gz (choose your right server version)\n$ tar xvfz node_exporter-1.1.2.linux-amd64.tar.gz\n$ sudo cp node_exporter-1.1.2.linux-amd64/node_exporter /usr/local/bin\n$ chown node_exporter:node_exporter /usr/local/bin/node_exporter\n$ cd /etc/systemd/system\n$ sudo nano node_exporter.service`\n\nThen, paste the following configuration for your service.\n\n`[Unit]\nDescription=Node Exporter\nWants=network-online.target\nAfter=network-online.target\n[Service]\nUser=<your user name>\nExecStart=/usr/local/bin/node_exporter\n[Install]\nWantedBy=default.target`\n\nExit nano, reload your daemon, and start your service.\n\n`$ sudo systemctl daemon-reload\n$ sudo systemctl start node_exporter\n$ sudo systemctl enable node_exporter.service`\n\n**NOTE**\n\nFor Ubuntu 18.04 use from now on in the tutorial the <node_exporter.service> instead of <prometheus-node-exporter.service>.\n\nUpdate <mainnet-config.json> config files with new hasEKG and has Prometheus ports.\n\n`$ cd $NODE_HOME\n$ sed -i mainnet-config.json -e \"s/127.0.0.1/0.0.0.0/g\"\nOn PN you need to open ports 12798 and 9100\n$ sudo ufw allow proto tcp from <RN IP address> to any port 9100\n$ sudo ufw allow proto tcp from <RN IP address> to any port 12798\n$ sudo ufw reload`\n\nRestart the nodes.\n\n`$ sudo systemctl restart <your node name e.g. cnode>`\n\n## 2. Install Prometheus on Monitoring Node [Permalink](https://sanskys.github.io/grafana/#2-install-prometheus-on-monitoring-node)\n\nInstall Prometheus on the Monitoring Node - the node where the Grafana Server will run. This could be on of the Relay nodes or a separate dedicated node for monitoring.\n\n`$ sudo apt-get install -y prometheus`\n\n## 3. Install Grafana on Monitoring Node [Permalink](https://sanskys.github.io/grafana/#3-install-grafana-on-monitoring-node)\n\n`$ wget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -\n$ echo \"deb https://packages.grafana.com/oss/deb stable main\" > grafana.list\n$ sudo mv grafana.list /etc/apt/sources.list.d/grafana.list\n$ sudo apt-get update && sudo apt-get install -y grafana`\n\nEnable services so they start automatically.\n\n`$ sudo systemctl enable grafana-server.service\n$ sudo systemctl enable prometheus.service\n$ sudo systemctl enable prometheus-node-exporter.service`\n\nUpdate <prometheus.yml> located in /etc/prometheus/<prometheus.yml>.\n\nChange the *ip address* in the following command:\n\n`$ cat > prometheus.yml << EOF\nglobal:\nscrape_interval: 15s # By default, scrape targets every 15 seconds.\n# Attach these labels to any time series or alerts when communicating with\n# external systems (federation, remote storage, Alertmanager).\nexternal_labels:\nmonitor: 'codelab-monitor'\n# A scrape configuration containing exactly one endpoint to scrape:\n# Here it's Prometheus itself.\nscrape_configs:\n# The job name is added as a label job=<job_name> to any timeseries scraped from this config.\n- job_name: 'prometheus'\nstatic_configs:\n- targets: ['localhost:9100']\nlabels:\nalias: 'relaynode1'\ntype: 'cardano-node'\n- targets: ['<relay node 2 public ip address>:9100']\nlabels:\nalias: 'relaynode2'\ntype: 'cardano-node'\n- targets: ['<block producer public ip address>:9100']\nlabels:\nalias: 'block-producer-node'\ntype: 'cardano-node'\n- targets: ['localhost:12798']\nlabels:\nalias: 'relaynode1'\ntype: 'cardano-node'\n- targets: ['<relay node 2 public ip address>:12798']\nlabels:\nalias: 'relaynode2'\ntype: 'cardano-node'\n- targets: ['<block producer public ip address>:12798']\nlabels:\nalias: 'block-producer-node'\ntype: 'cardano-node'\nEOF`\n\nIf you have more than two RNs, add all your Relays as new “targets” in the config above.\n\n`$ sudo mv prometheus.yml /etc/prometheus/prometheus.yml`\n\nRestart the services.\n\n`$ sudo systemctl restart grafana-server.service\n$ sudo systemctl restart prometheus.service\n$ sudo systemctl restart prometheus-node-exporter.service`\n\nVerify that the services are running properly.\n\n`$ sudo systemctl status grafana-server.service prometheus.service prometheus-node-exporter.service`\n\nOn the Monitoring Node, open ports 3000 for Grafana.\n\n`$ sudo ufw allow from <your home IP address from where you plan to access Grafana> to any port 3000`\n\n**NOTE**\n\nPlease refer to [Grafana Labs Secuirty](https://grafana.com/docs/grafana/latest/administration/security/) for hardening e.g. by default the communication with the Grafana server is unencrypted.\n\n## 4. Setting up Grafana Dashboard [Permalink](https://sanskys.github.io/grafana/#4-setting-up-grafana-dashboard)\n\nOn RN, open http://localhost:3000 or http://*your relaynode ip address*:3000 in your local browser. Login with admin / admin Change password\n\n![Datasource](https://sanskys.github.io/assets/images/snsky_prometheus.jpg)\n\n![Datasource](https://sanskys.github.io/assets/images/snsky_prometheus.jpg)\n\nClick the configuration gear icon, then Add data Source Select Prometheus Set Name to “Prometheus” Set URL to http://localhost:9090 Click Save & Test.\n\nDownload my Dashboard that you see on the top of this page, from the following GitHub link and save the JSON file.\n\n[SNSKY Dashboard Example](https://github.com/sanskys/SNSKY/blob/main/SNSKY_Dashboard_v2.json)\n\nIn Grafana, Click Create + icon (in left Menu) > Import Add dashboard by Upload JSON file Click the Import button.\n\nIf your nodes are in several time zones, it is useful to add the Grafana Clock panel.\n\n`$ grafana-cli plugins install grafana-clock-panel`\n\nInstalled panels are available immediately in the Dashboards section in your Grafana main menu.\n\nTo see a list of installed panels, click the Plugins item in the main menu. Both core panels and installed panels will appear.\n\n## 5. Add data from ADApools to the Dashboard [Permalink](https://sanskys.github.io/grafana/#5-add-data-from-adapools-to-the-dashboard)\n\nCopy your JSON link or your Pool ID from Share/Promote Tab and JSON data outputs in <adapools.org>.\n\nPrometheus can work only with numeric data, so we must first trim non numeric strings which is returned from the JSON file. Lets create a shell script <getstat.sh> for the same.\n\n`cd /$NODE_HOME\nmkdir -p poolStat\ncd poolStat\necho \"curl https://js.adapools.org/pools/< YOUR POOL ID >/summary.json 2>/dev/null \\\n| jq '.data | del(.pool_id_bech32, .hist_bpe, .handles, .hist_roa, .db_ticker, .db_name, .db_url, .ticker_orig, .group_basic, .pool_id, .direct, .db_description, .tax_ratio_old, .tax_fix_old)' \\\n| tr -d \\\\\\\"{},: \\\n| awk NF \\\n| sed -e 's/^[ \\t]*/adapools_/' > poolStat.prom\" > getstats.sh\nchmod +x getstats.sh\n./getstats.sh`\n\nCheck the content of <adapools.prom> and it should not contain only numeric values.\n\n`$ nano poolStat.prom`\n\nConfigure <promethues-node-exporter.service> to grab data from <poolStat.prom> file.\n\n`$ sudo cp /lib/systemd/system/prometheus-node-exporter.service /lib/systemd/system/prometheus-node-exporter.service_backup\n$ sudo nano /lib/systemd/system/prometheus-node-exporter.service`\n\nChange ExecStart line to:\n\n`ExecStart=/usr/bin/prometheus-node-exporter --collector.textfile.directory=< YOUR NODE FULL PATH >/poolStat --collector.textfile`\n\nReload daemon and restart services.\n\n`$ sudo systemctl daemon-reload\n$ sudo systemctl restart prometheus-node-exporter.service\n$ sudo systemctl restart prometheus.service`\n\nNow you should see all ADApools statistics in the Dashboard.\n\nSince the statistics will change, lets set cron job to update data from ADApools everyday\n\n`$ crontab -e`\n`##############################\n#Get data from ADApools every day at 06:00\n0 6 * * * <YOUR NODE FULL PATH >/poolStat/getstats.sh\n##############################`\n\nDone!\n\n## 6. Last step: setup Grafana Alerting and Email Notifications [Permalink](https://sanskys.github.io/grafana/#6-as-last-step-lets-now-setup-grafana-alerting-and-email-notifications)\n\nSetup SMTP in Grafana.\n\n`$ sudo nano /etc/grafana/grafana.ini`\n\nEdit the SMTP section.\n\n`#############################\n[smtp]\nenabled = true\nhost = smtp.<email server>:465\nuser = <email user name>\n# If the password contains # or ; you have to wrap it with triple quotes. Ex \"\"\"#password;\"\"\"\npassword = <email password>\nfrom_address = sam@sanskys.de\nfrom_name = Grafana\n#############################`\n\nLogin to Grafana with username and password.\n\n![Email Alert](https://sanskys.github.io/assets/images/snsky_EmailAlert.jpg)\n\n![Email Alert](https://sanskys.github.io/assets/images/snsky_EmailAlert.jpg)\n\nClick on the “Bell” icon on the left sidebar.\n\nSelect “Notification channels.”\n\nClick on “Add Channel.” This will open a form for adding new notification channel.\n\nGive a name to this channel. I am using “Alert”.\n\nSelect Email from “Type” as we want to send notifications over email.\n\nCheck the “Send on all alerts” in case you want email on all alerts.\n\nSelect the checkbox of “Include image” in case you want to include the image of the panel as the body in the notification email.\n\nAdd the target email in “Email addresses” text area. You can use multiple email address separated by “;”\n\nClick on “Send Test” if you want to verify your settings. This will send a sample email using the SMTP details we configured earlier.\n\nClick on “Save” to add this channel.\n\nCreate an Alert if Block Producer is not reachable.\n\n![Peer Alert](https://sanskys.github.io/assets/images/snsky_PeerAlert.jpg)\n\n![Peer Alert](https://sanskys.github.io/assets/images/snsky_PeerAlert.jpg)\n\nPlease not that Alerts can only be created for “Graph” panels!\n\nNow we create an Alert to get an email if the PN is not reachable\n\nIn the “Connected Peers” panel go to Alerts.\n\nDefine the Rule “Connected Peer Alert” Evaluate every “1m” For “2m”.\n\nCondition\n\n`WHEN \"last()\" OF \"query(A, 1m, now)\" \"HAS NO VALUE\"`\n\nNo Data & Error Handling\n\nIf no data or all values are null SET STATE TO “No Data”.\n\nIf execution error or timeout SET STATE TO “Alerting”.\n\nNotifications\n\nSend To - Choose your notofication channel, which in my case is “Alert”.\n\nMessage - type in your alert message that should appear in the email.\n\nPress on “test Rule” to ensure that the Alert is correct and has no issues.\n\nNow you are done! Stop you PN and you should get an Alert within 4min.\n\n**NOTE**\n\nIf everything works, now you should have a smile on your face! And if you wish to support the Tutorial work, you could donate or delegate to my pool - SNSKY.\n\n`Donation Address\naddr1qyyhd8cpv4gmhr5axerhezhtzldrw4rp9ayf0fc6arnme4cg46du2qg366943uy0dw5yjmna7arfw265lu4r2fjccl4scf7xrw\nSNSKY Pool ID\n075578defd7ee97cbeaa2937e5819099cb3835ac9f9c8b1a2c3a3578`\n\n## 7. Recommended: disabling Grafana registrations and Anonymous Access [Permalink](https://sanskys.github.io/grafana/#7-recommended-disabling-grafana-registrations-and-anonymous-access)\n\nWe should make Grafana a bit more secure and to do so lets change two settings:\n\n`$ sudo nano /etc/grafana/grafana.ini`\n\nLocate the following allow\\_sign\\_up directive under the [users] heading and change the line to as follows:\n\n`##########\n[users] # disable user signup / registration\nallow_sign_up = false\n##########`\n\nNext, locate the following enabled directive under the [<auth.anonymous>] heading and change the line to as follows:\n\n`[auth.anonymous]\nenabled = false`\n\nSave the file and exit your text editor and to activate the changes, restart Grafana.\n\n`$ sudo systemctl restart grafana-server`\n\n## 8. Advanced users: Slot Leader Panel [Permalink](https://sanskys.github.io/grafana/#8-advanced-users-slot-leader-panel)\n\n![Leader Panel](https://sanskys.github.io/assets/images/6b7f55bc225c4e30f346bf154cb39f22_1300x246.jpeg)\n\n![Leader Panel](https://sanskys.github.io/assets/images/6b7f55bc225c4e30f346bf154cb39f22_1300x246.jpeg)\n\nOnce your Pool gets big and is regularly minting blocks, it becomes diffcult to keep track of all Leader Slots and also to identify the available gaps for pool maintainance. This Slot Leader Panel is quite helpful as it gives a good overview of all scheduled Slots in TimeSeries.\n\nUse cardano-cli to query the leadership schedule. Since the result has to interpreted by Grafana, we need to format the query output to a CSV readable syntax.\n\n**NOTE**\n\nThe cardano-cli query requires addtional RAM. I needed 16GB RAM + 8GB SWAP and it took several minutes to query the leadership schedule.\n\nThe whole script can be copied from here:\n\n[Slot Leader Script](https://github.com/sanskys/SNSKY/blob/main/SlotLeader/script.sh)\n\nIn case the <slot.csv> file is on a different node, copy it to your Grafana Monitoring node manually. This step could be automated but I don't wish to open extra ports for this so I just copy and paste the content of the <slot.csv> file.\n\nNext, we add the CSV Plugin to Grafana. Please follow the instructions under the section “Installing on a local Grafana:”.\n\n[Grafana CSV Plugin](https://grafana.com/grafana/plugins/marcusolsson-csv-datasource/?tab=installation)\n\nAfter the installation, in Data Sources now the CSV Plugin should be listed. Configure the CSV Plugin by specifying the location of the <slot.csv> file. Save & Test and if all steps were followed correctly, you should get the green sucess messsage.\n\nThe final step is to add the Slot Leader Panel to your dashboard. For that click on the “Add Panel” and “Add New Panel” icons.\n\nThen click on “Query inspector” and “JSON” buttons.\n\nDelete the existing JSON code and replace it with the following:\n\n[Slot Leader Panel](https://github.com/sanskys/SNSKY/blob/main/SlotLeader/LeaderPanel.json)\n\nNow click on “Apply” and that's it! You should be able to see all your Leader Slots from last 6 Hrs to next 18 Hrs and this time window shifts automaically.\n\n## 2 contributors\n\n![](https://avatars.githubusercontent.com/u/102920475?v=4)\n![](https://avatars.githubusercontent.com/u/80989645?v=4)\n\n## Would you like to suggest changes to this developer resource?\n\nWe encourage you to actively participate in the creation and moderation of our content—your contributions are invaluable. All content is reviewed by another community member.\n\n##### Resources\n\n##### Legal\n\n##### Subscribe to our newsletter",
  "images": [],
  "extraction_metadata": {
    "batch_number": 15,
    "extraction_timestamp": "2025-09-19T10:03:02.107256",
    "extraction_time": 2.458281993865967,
    "source": "tavily_api_raw"
  }
}