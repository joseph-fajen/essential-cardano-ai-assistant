{
  "url": "https://www.essentialcardano.io/article/concurrency-and-all-that-cardano-smart-contracts-and-the-eutxo-model",
  "content": "# Concurrency and all that: Cardano smart contracts and the EUTXO model\n\n![](https://avatars.githubusercontent.com/u/102920475?v=4)\n![](data:image/svg+xml,%3csvg%20xmlns=%27http://www.w3.org/2000/svg%27%20version=%271.1%27%20width=%27800%27%20height=%27640%27/%3e)\n![Concurrency and all that: Cardano smart contracts and the EUTXO model](/_next/image?url=https%3A%2F%2Fucarecdn.com%2F692a35a5-098a-4b8c-a14a-2be597031a6e%2F&w=1920&q=75)\n\n**Original author:**\n\n[Olga Hryniuk](https://iohk.io/en/team/olga-hryniuk) - Technical Writer\n\nOriginally published on [IOHK.io](https://iohk.io/en/blog/posts/2021/09/10/concurrency-and-all-that-cardano-smart-contracts-and-the-eutxo-model/): September 10, 2021\n\n**Summary**:\n\nCardano’s EUTXO model provides a secure and versatile environment to process multiple operations without system failures\n\n**Article**:\n\nCardano is a UTXO-based blockchain, which utilizes a different programming paradigm for decentralized applications (DApps) from other account-based blockchains like Ethereum. The specific flavor Cardano uses is the [Extended Unspent Transaction Output (EUTXO) model](https://iohk.io/en/blog/posts/2021/03/11/cardanos-extended-utxo-accounting-model/) introduced by the Alonzo upgrade. EUTXO offers greater security allowing for smart contract execution cost predictability (without unpleasant surprises) and, as a result, offers a different approach to parallelization.\n\nEUTXO inherits the per-branches design of the UTXO (Bitcoin) model, where one branch is by definition a sequence of transactions that requires a sequence of validations. To split the logic across different branches and enforce more parallelism, it is essential to build DApps and other solutions using *multiple UTXOs*. This provides benefits in terms of scaling, just like developing Bitcoin services prerequisites splitting one wallet into sub wallets.\n\nDApps built on Cardano are **not limited** to one transaction per block. In fact, the block budget (that is the maximum number of transactions it can hold) allows the execution of hundreds of simple transactions and several complex scripts. However, the EUTXO model allows spending a transaction output only once. Given that users can face contention issues trying to access the same UTXO, it is important to use many different UTXOs. Note that this is important unless such a design would benefit from a strict ordering of clients. Sets of UTXOs can be used to implement design patterns that include semaphores. In addition, different users can interact with one smart contract without any concurrency failure. That is because a smart contract can handle *a number of different UTXOs* that make up its current state and off-chain metadata that allows interpreting those UTXOs.\n\n## Doing things in parallel\n\nBlockchains achieve immutability and transparency of transaction processing differently. Any blockchain system should have a set of properties to meet the ever-growing need for secure yet swift operation processing, namely:\n\n**Throughput** – the number of operations a system can perform within a certain time period. This relates, for example, to the number of transactions or smart contracts processed in one second.\n\n**Performance** – how fast the system works. Performance measures the time of transaction or smart contract execution.\n\n**Scalability** – the ability of the system to perform multiple operations without overloading the network or influencing performance properties.\n\nBy increasing parallelism, we can ultimately improve the throughput of the system while keeping the performance of individual operations the same, but this sort of scalability will always be limited by the degree of contention.\n\nWhen it comes to scalability, we also distinguish such system properties as *concurrency*, *parallelism*, and *contention*. Concurrency is essential to allow multiple actors to progress on a certain task without interfering with each other. Parallelism allows such progress *at the same time* without any interference. Contention occurs when those multiple actors interfere with each other while working either concurrently or in parallel.\n\n## Understanding concurrency\n\nConcurrency may or may not improve a system’s performance, throughput, or responsiveness. The amount of concurrency limits the maximum number of simultaneous operations that can be performed.\n\nTo obtain *actual* performance improvements in a UTXO-based blockchain, processors or other actors should be able to perform multiple actions simultaneously. The higher the level of concurrency, the higher the maximum possible parallelism. Such an approach then translates to performance improvements and throughput. It also provides significant advantages over account-based systems (like Ethereum).\n\n## Deploying DApps on UTXO ledgers *is different*\n\nCardano’s approach to DApp deployment is different and thus it requires a learning curve and a different approach. This is like working with different programming languages: there is one goal – to deploy a solution, but so many programming languages to use for this purpose.\n\nMaximizing concurrency is a skill that needs to be learned: developers need to write code in a way that severely restricts the opportunities for contention (e.g., by avoiding shared states and accidental dependencies). The system must then translate this concurrency into parallelism. A number of developers have already identified ways to approach this, while others are still developing solutions. Simply transplanting lessons learned on one blockchain will not work; while the learning curve is a little steeper, the results make this worthwhile.\n\nEither way, it is important to understand that to deploy a scalable DApp on Cardano, a developer can’t just use an adapted Ethereum contract. Cardano is based on the UTXO model; it is not account-based. And this means that a single on-chain state will not meet the concurrency property on Cardano. Instead, DApps should split up their on-chain state across many UTXOs. This will increase the concurrency in their application, thereby allowing higher throughput.\n\nOur education team has previously shared a simple AMM-style DEX implementation in the Plutus Pioneer course. While this is useful for teaching purposes, this architecture would not directly support a commercial DEX where an order book approach and additional concurrency are required. A developer looking to deploy on the Cardano mainnet would need to improve the scalability of the architecture accordingly.\n\nWe proposed a solution within our recent [Djed stablecoin paper](https://iohk.io/en/research/library/papers/djeda-formally-verified-crypto-backed-pegged-algorithmic-stablecoin/). For the Djed implementation on Cardano, an order book modeling pattern is favored whereby an order maker is responsible for forwarding any minting or burning order to the stablecoin smart contract, with an additional incentive fee imposed on each would-be buyer or seller of stablecoins and reserve coins. Several security mechanisms – via the extensive use of non-fungible tokens (NFTs) – are also used to guarantee the uniqueness of transactions, the correctness of each submitted order, and to prevent front-running attacks. NFT tokens are also used to report successful or failed minting and burning orders. We’ll publish a fuller article on this shortly.\n\nTo learn more about scalability, you can read [how to design a scalable Plutus application](https://plutus.readthedocs.io/en/latest/plutus/howtos/writing-a-scalable-app.html) and find out how to organize DApps on Cardano using [order book patterns](https://plutus.readthedocs.io/en/latest/plutus/explanations/order-book-pattern.html). Developers have also presented [concurrent and deterministic approaches to the EUTXO smart contract architecture](https://medium.com/meld-labs/concurrent-deterministic-batching-on-the-utxo-ledger-99040f809706) that might be regarded as a generalization of the parallel state machine steps introduced in the [Hydra paper](https://iohk.io/en/research/library/papers/hydrafast-isomorphic-state-channels/) to realize multi-step state machines. A number of other [developers](https://twitter.com/ErgoDex/status/1434241104015151105?s=20) and community members have also published papers, [videos](https://youtube.com/watch?v=TxnvYsBnLjQ), [articles](https://sundaeswap-finance.medium.com/concurrency-state-cardano-c160f8c07575), and useful [threads](https://twitter.com/CardanoMaladex/status/1434960813006200835) on Twitter outlining their approaches. It’s a brilliant lesson in how the community will continue to develop its own innovative solutions, as approaches become more standardized with platform maturity.\n\n## Moving forward\n\nThe Alonzo hard fork event will introduce the core building blocks of Plutus 1.0. This is the beginning of ecosystem growth. Although it is still early, the Alonzo testnet allows our developers to assess system properties and build scalable DApps in advance – preparing for their mainnet launch. Dozens of projects have already been working with local instances of Plutus environments. With the main public testnet soon supporting smart contracts, we expect a significant ramping up of activity over the next few weeks and in the months ahead. Later this month, the Cardano summit (25-26 September) will showcase many of these projects, plus provide important updates on the smart contracts roadmap and the ongoing evolution of the technology stack. Developer events, hackathons, and, of course, the results of Project Catalyst will continue to bring new tools and abstractions to this fast-growing developer ecosystem.\n\nIf you are a developer, make sure to join our [Discord community](https://discord.gg/ScxDkrxpBg) and get involved with [Project Catalyst](https://cardano.ideascale.com/a/index) if you are looking to fund your project.\n\n*I'd like to acknowledge* [Lars Brünjes](https://github.com/brunjlar), [Jann Müller](https://github.com/j-mueller), and [Manuel Chakravarty](https://github.com/mchakravarty) for their technical input and support during the blog post preparation.\n\n## 2 contributors\n\n![](https://ucarecdn.com/4f580f1c-e076-45b2-8a8d-af75d20c0cfd/)\n![](https://avatars.githubusercontent.com/u/102920475?v=4)\n\n## Would you like to suggest changes to this article?\n\nWe encourage you to actively participate in the creation and moderation of our content—your contributions are invaluable. All content is reviewed by another community member.\n\n##### Resources\n\n##### Legal\n\n##### Subscribe to our newsletter",
  "images": [],
  "extraction_metadata": {
    "batch_number": 5,
    "extraction_timestamp": "2025-09-19T10:02:10.020538",
    "extraction_time": 1.5749921798706055,
    "source": "tavily_api_raw"
  }
}