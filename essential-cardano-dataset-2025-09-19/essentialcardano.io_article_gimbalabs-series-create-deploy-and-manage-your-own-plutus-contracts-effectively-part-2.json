{
  "url": "https://www.essentialcardano.io/article/gimbalabs-series-create-deploy-and-manage-your-own-plutus-contracts-effectively-part-2",
  "content": "# Gimbalabs series: Create, Deploy, and Manage your own Plutus contracts effectively - Part 2\n\n![](https://ucarecdn.com/525aaddb-0680-430e-9e83-696922568ba4/)\n![](data:image/svg+xml,%3csvg%20xmlns=%27http://www.w3.org/2000/svg%27%20version=%271.1%27%20width=%271366%27%20height=%27768%27/%3e)\n![Gimbalabs series: Create, Deploy, and Manage your own Plutus contracts effectively - Part 2](/_next/image?url=https%3A%2F%2Fucarecdn.com%2F4f5d7e8a-f8c6-4b6c-bcd6-6436759f318d%2F&w=3840&q=75)\n\n日本語版はスクロールダウンしてください。  \n![6a8a03ba11a6c9509414a7f9628efdbc9be356a7_2_1000x569](https://global.discourse-cdn.com/business4/uploads/cardano/original/3X/3/1/31a18c164b092b94e56b24769fd482927ae75665.png)  \nFig 1. Gimbalabs Plutus Project-Based Learning\n\n![6a8a03ba11a6c9509414a7f9628efdbc9be356a7_2_1000x569](https://global.discourse-cdn.com/business4/uploads/cardano/original/3X/3/1/31a18c164b092b94e56b24769fd482927ae75665.png)\n\n**In the second part of this comprehensive three-part series, created and taught by our always beloved Gimbalabs instructor, Professor Mix (**[M. Ali Modiri](https://github.com/input-output-hk/Certification-working-group/blob/vuln-from-audits/Cardano%20Threat%20Intelligence/Vulnerabilities/CTI-2023-ADA-11-04.md)), as part of the [Gimbalabs Plutus Project-Based Learning](https://plutuspbl.io/), we will continue our journey into your understanding of how to create, deploy, and manage your own Plutus contracts effectively.\n\n## **Student Learning Targets (SLT)**\n\nI can plan and implement my own Plutus contracts\n\nI can create, update and maintain a Plutus project.\n\nI understand how time works on Plutus (POSIXTime) and Ledger (Slot Number).\n\nIn the [first part of the series](https://forum.cardano.org/t/gimbalabs-series-create-deploy-and-manage-your-own-plutus-contracts-effectively-part-1/127780), we covered the first SLT: *I can plan and implement my own Plutus contracts*. Today, in this second part, we will focus on the next SLT:\n\n## ***I can create, update and maintain a Plutus project.***\n\n![Fig 2. Gimbalabs Plutus PBL Japanese - SLT 302.2](https://global.discourse-cdn.com/business4/uploads/cardano/optimized/3X/d/4/d40c0921607a4a3c3ba04d19cc3a3c75aef05e46_2_1000x562.png)Fig 2. [Gimbalabs Plutus PBL - SLT 302.2](https://plutuspbl.io/modules/302/3022)\n\n![Fig 2. Gimbalabs Plutus PBL Japanese - SLT 302.2](https://global.discourse-cdn.com/business4/uploads/cardano/optimized/3X/d/4/d40c0921607a4a3c3ba04d19cc3a3c75aef05e46_2_1000x562.png)\n\nSo, let’s earn that “I can”.\n\n---\n\nHere, you will learn the process of creating your Plutus project from scratch, the essential steps, such as project structure, file organization, and setting up the development environment.\n\nLearning how to utilize version control systems effectively, enabling you to manage and track changes to your Plutus projects seamlessly.\n\nYou will gain expertise in keeping your projects up-to-date with the latest advancements in the Cardano ecosystem.\n\n# Creating Your Plutus Project: Step-by-Step Guide\n\nTo initiate your Plutus project effectively, follow these comprehensive steps to create your cabal.project file and set up your development environment:\n\n### Step 1: Navigate to the Plutus-Apps Repository\n\n![](https://global.discourse-cdn.com/business4/uploads/cardano/optimized/3X/5/3/53bcc98ea4ecfc54c0aa62b961dc17cda7771248_2_1000x562.jpeg)\n\n![](https://global.discourse-cdn.com/business4/uploads/cardano/optimized/3X/5/3/53bcc98ea4ecfc54c0aa62b961dc17cda7771248_2_1000x562.jpeg)\n\n### [✂️ Why Plutus-Apps?](https://www.youtube.com/clip/UgkxF3xhx9Ec6H7OdZW8o9cEkOkHiW-fE62u?si=X_261nzdGB-De_Oj)\n\n60 seconds · Clipped by Sebastian Pabon · Original video \"Plutus PBL Live Coding 2023-09-28\" by Gimbalabs\n\n### Step 2: Choose a Version\n\nYou have the option to choose either a *specific release version* or a *commit hash*.\n\nFor a release version, click on [release/tags](https://github.com/input-output-hk/plutus-apps/tags), and select the version you prefer.\n\nIf you prefer a specific commit hash, go to the [commit](https://github.com/input-output-hk/plutus-apps/commits/main) page and find the hash you want to use.\n\n![](https://global.discourse-cdn.com/business4/uploads/cardano/optimized/3X/5/3/53bcc98ea4ecfc54c0aa62b961dc17cda7771248_2_1000x562.jpeg)\n\n![](https://global.discourse-cdn.com/business4/uploads/cardano/optimized/3X/5/3/53bcc98ea4ecfc54c0aa62b961dc17cda7771248_2_1000x562.jpeg)\n\n### [✂️ The importance of choosing right plutus-apps \"flavor\" (a.k.a. version)](https://www.youtube.com/clip/UgkxfCulrbrFawAXhWJwb9PCBh6hAOfPHIlH?si=v6t8VSuLbuLsE9AZ)\n\n60 seconds · Clipped by Sebastian Pabon · Original video \"Plutus PBL Live Coding 2023-09-28\" by Gimbalabs\n\n![](https://global.discourse-cdn.com/business4/uploads/cardano/optimized/3X/5/3/53bcc98ea4ecfc54c0aa62b961dc17cda7771248_2_1000x562.jpeg)\n\n![](https://global.discourse-cdn.com/business4/uploads/cardano/optimized/3X/5/3/53bcc98ea4ecfc54c0aa62b961dc17cda7771248_2_1000x562.jpeg)\n\n### [✂️ Choosing a plutus-apps version](https://www.youtube.com/clip/UgkxpdqB8l2UzWrXdDLbQMrAKFobOlkd9ii2?si=eE90wDbHkbK0hTJ-)\n\n60 seconds · Clipped by Sebastian Pabon · Original video \"Plutus PBL Live Coding 2023-09-28\" by Gimbalabs\n\n### Step 3: Clone the Plutus-Apps Repository\n\n`git clone`\n\n### Step 4: Set Up the Nix Development Environment\n\n`$ cd plutus-apps`\n`$ git pull\n$ git checkout <TAG_OR_COMMIT_HASH>`\n`$ nix develop`\n\n#### *More info on execution of steps 3 and 4,* [here](https://plutuspbl.io/modules/101/1014).\n\n### Step 5: Create Your Plutus Project Folder\n\n`YOUR_PROJECT_NAME`\n`$ mkdir YOUR_PROJECT_NAME\n$ cd YOUR_PROJECT_NAME`\n`cabal.project`\n`$ touch cabal.project`\n\n### Step 6: Populate Your `cabal.project` File\n\n`cabal.project`\n\nNow, you need to populate your `cabal.project` file with package information based on the Plutus-Apps version you selected.\n\n`cabal.project`\n\nFor a release version:\n\nFor a commit hash:\n\n`repo:IntersectMBO/plutus-apps <COMMIT_HASH>`\n\nClick on the search result that corresponds to the commit.\n\nLocate the “Browse files” button in the top right corner and click it.\n\nIn either case, you will reach the version of Plutus-Apps associated with your selected tag or commit hash.\n\nFind the `cabal.project` file in that page and click on it.\n\n`cabal.project`\n\nClick the “Raw” button to obtain the content of the `cabal.project` file.\n\n`cabal.project`\n\nCopy the content.\n\n### Step 7: Edit Your cabal.project File\n\nPaste the copied content inside your `cabal.project` file within your project folder. At the end of the copied content, add the following lines, replacing `<THE_TAG_OR_COMMIT_HASH_YOU_HAVE_CHOOSE>` with your selected tag or commit hash:\n\n`cabal.project`\n`<THE_TAG_OR_COMMIT_HASH_YOU_HAVE_CHOOSE>`\n`source-repository-package\ntype: git\nlocation: https://github.com/input-output-hk/plutus-apps.git\ntag: <THE_TAG_OR_COMMIT_HASH_YOU_HAVE_CHOOSE>\nsubdir:`\n\nFind the `packages:` section in your `cabal.project` file.\n\n`packages:`\n`cabal.project`\n\nCut the `packages:` line from its current position and paste it beneath or under the `subdir` line within the `source-repository-package` section you added.\n\n`packages:`\n`subdir`\n`source-repository-package`\n\nWith these steps completed, you will have successfully initiated your Plutus project, configured your development environment, and set up your `cabal.project` file with the required package information. This prepares you for next step which creation of your project `.cabal` file.\n\n`cabal.project`\n`.cabal`\n\n![](https://global.discourse-cdn.com/business4/uploads/cardano/optimized/3X/5/3/53bcc98ea4ecfc54c0aa62b961dc17cda7771248_2_1000x562.jpeg)\n\n![](https://global.discourse-cdn.com/business4/uploads/cardano/optimized/3X/5/3/53bcc98ea4ecfc54c0aa62b961dc17cda7771248_2_1000x562.jpeg)\n\n### [✂️ Setting the cabal.project file of your project](https://www.youtube.com/clip/Ugkxljhk4nHfz2G-jTD-ZaJTCuC5d4GBnLMf?si=9DuPe9UharmzaULg)\n\n60 seconds · Clipped by Sebastian Pabon · Original video \"Plutus PBL Live Coding 2023-09-28\" by Gimbalabs\n\n# Creation of Cabal file\n\nNow that we have our `cabal.project` file in place, we can proceed to create the `.cabal` file for your Plutus project. The `.cabal` file is essential for specifying project metadata and configurations. Below is a step-by-step guide:\n\n`cabal.project`\n`.cabal`\n`.cabal`\n\n### Step 1: create `.cabal` file:\n\n`.cabal`\n\nOpen your terminal and navigate to your project directory.\n\nCreate a `.cabal` file, replacing `<YOUR_PROJECT_NAME>` with the name of your project:\n\n`.cabal`\n`<YOUR_PROJECT_NAME>`\n`$ touch <YOUR_PROJECT_NAME>.cabal`\n\n### Step 2: Define Project Metadata\n\nThis section is dedicated to defining important metadata about your project, providing crucial information for its management and distribution. Here’s a template for this section:\n\n`-- Specifies the version of the Cabal specification used for this project.\nCabal-Version: 3.0\n-- The name of the Plutus project, in this case, \"token-vesting\".\nName: token-vesting\n-- The version number of the project. This helps in managing different versions of your project.\nVersion: 1.0.0\n-- The author or organization responsible for creating the project, in this case, \"Gimbalabs\".\nAuthor: Gimbalabs\n-- Indicates the build type, \"Simple\" in this case, which is suitable for most projects.\nBuild-Type: Simple\n-- Specifies the project's license. Here, it's licensed under GPL version 3.0 or later.\nLicense: GPL-3.0-or-later\n-- References the file that contains the full text of the project's license for reference.\nLicense-file: LICENSE`\n\n### Step 3: Common Project Configuration\n\nIn this section, you can define common project configurations, such as language extensions and GHC (Glasgow Haskell Compiler) options.\n\nLanguage Extensions:\n\nLanguage extensions serve as a powerful tool for enabling specific language features in Haskell. They allow you to enhance the capabilities of your code when needed. You can selectively enable these extensions in your smart contract files using the LANGUAGE pragma: `{-# LANGUAGE <Extension>, <Extension> #-}`.\n\n`{-# LANGUAGE <Extension>, <Extension> #-}`\n\nTo determine which language extensions are suitable for your project, you can refer to the extensive list of available extensions. Each extension provides unique functionalities that can be beneficial in particular scenarios, so researching and choosing the right ones can greatly enhance your project’s capabilities.\n\nGHC Options (Compiler Flags):\n\nGHC options, also known as compiler flags, provide fine-grained control over various aspects of the Glasgow Haskell Compiler (GHC) and the compilation process.\n\nThese options allow you to tailor how your Haskell code is compiled and executed. You can use them to optimize performance, enable debugging, or configure other compiler-related behaviors.\n\n`Common project-config\ndefault-language: Haskell2010\ndefault-extensions: NoImplicitPrelude\nOverloadedStrings\nExplicitForAll\nScopedTypeVariables\nDeriveGeneric\nStandaloneDeriving\nDeriveLift\nGeneralizedNewtypeDeriving\nDeriveFunctor\nDeriveFoldable\nDeriveTraversable\nLambdaCase\nMultiParamTypeClasses\nTypeOperators\nFlexibleInstances\nNamedFieldPuns\nTypeFamilies\nFlexibleContexts\nDeriveAnyClass\nDerivingStrategies\nDerivingVia\nDataKinds\nPatternGuards\nOverloadedRecordFields\nGADTs\nImportQualifiedPost\nMultiWayIf\nRankNTypes\nRecordWildCards\nTemplateHaskell\nTypeApplications\nUndecidableInstances\nDuplicateRecordFields\nghc-options: -Wall\n-Wcompat\n-Wincomplete-record-updates\n-Wnoncanonical-monad-instances\n-Wredundant-constraints\n-Wincomplete-uni-patterns\n-Wunused-packages\n-Widentities\n-fno-ignore-interface-pragmas\n-fno-omit-interface-pragmas\n-fobject-code\n-fno-specialise\n-fno-spec-constr\n-fno-strictness`\n\n### Step 4: Library Configuration (Replace with Your Specifics)\n\n`Library\nimport: project-config\nhs-source-dirs: <MODULE_FOLDERS_OR_FILES_DIRECTORY_NAME>\nexposed-modules:\n<MODULE_NAME>.<SUB_MODULE_NAME>.<NAME_OF_THE_FILE>\nbuild-depends:\n<PACKAGE_NAME_1>\n, <PACKAGE_NAME_2>\n, <PACKAGE_NAME_3>\n, ...`\n\n### Step 5: Executable Configuration (Replace with Your Specifics)\n\n`executable <EXECUTABLE_FILE_NAME>\ndefault-language: Haskell2010\nmain-is: <EXECUTABLE_FILE_NAME>.hs\nhs-source-dirs: <EXECUTABLE_FILE_DIRECTORY_NAME>\nghc-options: -threaded -rtsopts \"-with-rtsopts=-T\"\nbuild-depends: <PACKAGE_NAME_1>\n, <PACKAGE_NAME_2>\n, <PACKAGE_NAME_3>\n, ...`\n\n![](https://global.discourse-cdn.com/business4/uploads/cardano/optimized/3X/5/3/53bcc98ea4ecfc54c0aa62b961dc17cda7771248_2_1000x562.jpeg)\n\n![](https://global.discourse-cdn.com/business4/uploads/cardano/optimized/3X/5/3/53bcc98ea4ecfc54c0aa62b961dc17cda7771248_2_1000x562.jpeg)\n\n### [✂️ Setting the myproject.cabal file of your project](https://www.youtube.com/clip/UgkxNzwzherQ2gjy-AOD0UpT-ynYdUIq3nwf?si=B8x7pkdWl3_LR0-C)\n\n60 seconds · Clipped by Sebastian Pabon · Original video \"Plutus PBL Live Coding 2023-09-28\" by Gimbalabs\n\n---\n\nFind [here](https://plutuspbl.io/modules/302/3022) the original lesson (including the video lesson)\n\nFollow [Gimbalabs](https://twitter.com/gimbalabs) for further announcements.\n\nCome to Gimbalabs [Discord](https://discord.gg/nCq8sSChBN) and start interacting with the Gimbalabs community.\n\n---\n\n## **自分自身のPlutusコントラクトを効果的に作成し、デプロイし、管理する方法 - パート2**\n\n![Fig 1. Gimbalabs Plutus PBL - Japanese version](https://global.discourse-cdn.com/business4/uploads/cardano/optimized/3X/7/4/748351f128af0719e14052cd56b5344fb6a4cb59_2_1000x562.png)Fig 1. Gimbalabs Plutus PBL - Japanese version\n\n![Fig 1. Gimbalabs Plutus PBL - Japanese version](https://global.discourse-cdn.com/business4/uploads/cardano/optimized/3X/7/4/748351f128af0719e14052cd56b5344fb6a4cb59_2_1000x562.png)\n\n**この包括的な3部作シリーズの第2部は、私たちの愛される Gimbalabs の講師、Professor Mix (**[M. Ali Modiri](https://github.com/input-output-hk/Certification-working-group/blob/vuln-from-audits/Cardano%20Threat%20Intelligence/Vulnerabilities/CTI-2023-ADA-11-04.md))によって[Gimbalabs Plutus Project-Based Learning](https://ja.plutuspbl.io/)のために作成され、教えられます。このシリーズでは、自分自身のPlutus契約を効果的に作成、展開、管理する方法についての理解を深めるための旅を続けます。\n\n## **Student Learning Targets (SLT)**\n\n私は自分自身のPlutus契約を計画し、実装することができます。\n\n私はPlutusプロジェクトを作成し、更新し、メンテナンスすることができます。\n\n以下のシナリオで時間がどのように機能するかを理解しています：Plutus（‘POSIXTime’）、‘Ledger’（‘Slot Number’）。\n\nシリーズの[第1部](https://forum.cardano.org/t/gimbalabs-series-create-deploy-and-manage-your-own-plutus-contracts-effectively-part-1/127780)では、最初の**SLT**：***私は自分自身のPlutus契約を計画し、実装することができます***をカバーしました。そして、今日のこの第2部では、次のSLTに焦点を当てます：\n\n## ***私はPlutusプロジェクトを作成し、更新し、メンテナンスすることができます。***\n\n[![Fig 2. Gimbalabs Plutus PBL Japanese - SLT 302.2](https://global.discourse-cdn.com/business4/uploads/cardano/optimized/3X/d/4/d40c0921607a4a3c3ba04d19cc3a3c75aef05e46_2_1000x562.png)Fig 2. Gimbalabs Plutus PBL Japanese - SLT 302.2](https://plutuspbl.io/modules/302/3022)\n\n![Fig 2. Gimbalabs Plutus PBL Japanese - SLT 302.2](https://global.discourse-cdn.com/business4/uploads/cardano/optimized/3X/d/4/d40c0921607a4a3c3ba04d19cc3a3c75aef05e46_2_1000x562.png)\n\nでは、「私ができる」という実感を得ましょう。\n\n---\n\nあなたは、Plutusプロジェクトをゼロから作成するプロセスを学びます。プロジェクトの構造やファイルの組織、開発環境のセットアップなど、重要なステップについて学びます。\n\n効果的にバージョン管理システムを利用する方法を学び、Plutusプロジェクトの変更をシームレスに管理および追跡する能力を身につけます。\n\nあなたは、Cardanoエコシステムの最新の進歩に常に追従し、プロジェクトを最新の状態に保つことに関する専門知識を身につけます。\n\n# Plutusプロジェクトの作成：ステップバイステップガイド\n\nPlutusプロジェクトを効果的に開始するには、次の包括的な手順に従って、`cabal.project`ファイルを作成し、開発環境をセットアップしてください。\n\n`cabal.project`\n\n### ステップ1：`Plutus-Apps`リポジトリに移動します。\n\n`Plutus-Apps`\n\n![](https://global.discourse-cdn.com/business4/uploads/cardano/optimized/3X/5/3/53bcc98ea4ecfc54c0aa62b961dc17cda7771248_2_1000x562.jpeg)\n\n![](https://global.discourse-cdn.com/business4/uploads/cardano/optimized/3X/5/3/53bcc98ea4ecfc54c0aa62b961dc17cda7771248_2_1000x562.jpeg)\n\n### [✂️ Why Plutus-Apps?](https://www.youtube.com/clip/UgkxF3xhx9Ec6H7OdZW8o9cEkOkHiW-fE62u?si=X_261nzdGB-De_Oj)\n\n60 seconds · Clipped by Sebastian Pabon · Original video \"Plutus PBL Live Coding 2023-09-28\" by Gimbalabs\n\n### ステップ2：バージョンを選択します。\n\nあなたは、特定の`Plutus-Apps`リリースバージョンまたは特定の`Plutus-Apps` commit hash を選択するオプションがあります。\n\n`Plutus-Apps`\n`Plutus-Apps`\n\nリリースバージョンの場合は、[release/tags](https://github.com/input-output-hk/plutus-apps/tags)をクリックし、好みのバージョンを選択してください。\n\n特定のcommit hashを希望する場合は、[commit](https://github.com/input-output-hk/plutus-apps/commits/main)ページに移動し、使用したいhashを見つけます。\n\n![](https://global.discourse-cdn.com/business4/uploads/cardano/optimized/3X/5/3/53bcc98ea4ecfc54c0aa62b961dc17cda7771248_2_1000x562.jpeg)\n\n![](https://global.discourse-cdn.com/business4/uploads/cardano/optimized/3X/5/3/53bcc98ea4ecfc54c0aa62b961dc17cda7771248_2_1000x562.jpeg)\n\n### [✂️ The importance of choosing right plutus-apps \"flavor\" (a.k.a. version)](https://www.youtube.com/clip/UgkxfCulrbrFawAXhWJwb9PCBh6hAOfPHIlH?si=v6t8VSuLbuLsE9AZ)\n\n60 seconds · Clipped by Sebastian Pabon · Original video \"Plutus PBL Live Coding 2023-09-28\" by Gimbalabs\n\n![](https://global.discourse-cdn.com/business4/uploads/cardano/optimized/3X/5/3/53bcc98ea4ecfc54c0aa62b961dc17cda7771248_2_1000x562.jpeg)\n\n![](https://global.discourse-cdn.com/business4/uploads/cardano/optimized/3X/5/3/53bcc98ea4ecfc54c0aa62b961dc17cda7771248_2_1000x562.jpeg)\n\n### [✂️ Choosing a plutus-apps version](https://www.youtube.com/clip/UgkxpdqB8l2UzWrXdDLbQMrAKFobOlkd9ii2?si=eE90wDbHkbK0hTJ-)\n\n60 seconds · Clipped by Sebastian Pabon · Original video \"Plutus PBL Live Coding 2023-09-28\" by Gimbalabs\n\n### ステップ3：Plutus-Appsリポジトリをクローンします。\n\n`git clone`\n`Plutus-Apps`\n\n### ステップ4：Nix開発環境をセットアップします。\n\n`Plutus-Apps`\n`$ cd plutus-apps`\n`$ git pull\n$ git checkout <TAG_OR_COMMIT_HASH>`\n`$ nix develop`\n\n#### *ステップ3と4の実行に関する詳細は、*[こちら](https://ja.plutuspbl.io/modules/101/1014)でご確認ください。\n\n### ステップ5：あなたのPlutusプロジェクトフォルダーを作成します。\n\n`YOUR_PROJECT_NAME`\n`$ mkdir YOUR_PROJECT_NAME\n$ cd YOUR_PROJECT_NAME`\n`cabal.project`\n`$ touch cabal.project`\n\n### ステップ6：`cabal.project`ファイルを記入してください。\n\n`cabal.project`\n\n今、選択したPlutus-Appsのバージョンに基づいて、`cabal.project`ファイルにパッケージ情報を含める必要があります。\n\n`cabal.project`\n\nリリースバージョンの場合:\n\ncommit hashの場合：\n\n`repo:IntersectMBO/plutus-apps <COMMIT_HASH>`\n\ncommitに対応する検索結果をクリックしてください。\n\n右上隅にある「Browse Files」ボタンを見つけ、クリックします。\n\nいずれの場合も、選択したtagまたはcommit hashに関連するPlutus-Appsのバージョンに到達します。\n\nそのページで`cabal.project`ファイルを見つけ、それをクリックします。\n\n`cabal.project`\n\n「Raw」ボタンをクリックして、`cabal.project`ファイルの内容を取得します。\n\n`cabal.project`\n\n内容をコピーします。\n\n### ステップ7：cabal.projectファイルを編集します。\n\nコピーした内容を、プロジェクトフォルダ内の`cabal.project`ファイルに貼り付けます。 コピーした内容の最後に、以下の行を追加します。`<THE_TAG_OR_COMMIT_HASH_YOU_HAVE_CHOOSE>`を選択したtagまたはcommit hashに置き換えます。\n\n`cabal.project`\n`<THE_TAG_OR_COMMIT_HASH_YOU_HAVE_CHOOSE>`\n`source-repository-package\ntype: git\nlocation: https://github.com/input-output-hk/plutus-apps.git\ntag: <THE_TAG_OR_COMMIT_HASH_YOU_HAVE_CHOOSE>\nsubdir:`\n\n`cabal.project`ファイル内の`packages:`セクションを見つけます。\n\n`cabal.project`\n`packages:`\n\n`packages:`セクションの内容を切り取ります。それを、追加した`source-repository-package`セクション内の`subdir`行の下に貼り付けます。\n\n`packages:`\n`source-repository-package`\n`subdir`\n\nこれらの手順を完了すると、Plutusプロジェクトの開始、開発環境の設定、および必要なパッケージ情報を含む`cabal.project`ファイルのセットアップが成功します。次のステップは、プロジェクトの`.cabal`ファイルを作成することです。\n\n`cabal.project`\n`.cabal`\n\n![](https://global.discourse-cdn.com/business4/uploads/cardano/optimized/3X/5/3/53bcc98ea4ecfc54c0aa62b961dc17cda7771248_2_1000x562.jpeg)\n\n![](https://global.discourse-cdn.com/business4/uploads/cardano/optimized/3X/5/3/53bcc98ea4ecfc54c0aa62b961dc17cda7771248_2_1000x562.jpeg)\n\n### [✂️ Setting the cabal.project file of your project](https://www.youtube.com/clip/Ugkxljhk4nHfz2G-jTD-ZaJTCuC5d4GBnLMf?si=9DuPe9UharmzaULg)\n\n60 seconds · Clipped by Sebastian Pabon · Original video \"Plutus PBL Live Coding 2023-09-28\" by Gimbalabs\n\n# Cabalファイルの作成\n\n`cabal.project`ファイルが準備されたので、Plutusプロジェクトの`.cabal`ファイルを作成する準備が整いました。 `.cabal`ファイルは、プロジェクトのメタデータや設定を指定するために重要です。以下はステップバイステップのガイドです：\n\n`cabal.project`\n`.cabal`\n`.cabal`\n\n### ステップ1：`.cabal`ファイルを作成します。\n\n`.cabal`\n\nターミナルを開き、プロジェクトディレクトリに移動します。\n\n`<YOUR_PROJECT_NAME>`をプロジェクトの名前に置き換えて、`.cabal`ファイルを作成します。\n\n`<YOUR_PROJECT_NAME>`\n`.cabal`\n`$ touch <YOUR_PROJECT_NAME>.cabal`\n\n### ステップ2：プロジェクトのメタデータを定義します。\n\nこのセクションは、プロジェクトに関する重要なメタデータを定義し、その管理や配布に必要な情報を提供するために用意されています。このセクションのテンプレートを以下に示します。\n\n`-- Specifies the version of the Cabal specification used for this project.\nCabal-Version: 3.0\n-- The name of the Plutus project, in this case, \"token-vesting\".\nName: token-vesting\n-- The version number of the project. This helps in managing different versions of your project.\nVersion: 1.0.0\n-- The author or organization responsible for creating the project, in this case, \"Gimbalabs\".\nAuthor: Gimbalabs\n-- Indicates the build type, \"Simple\" in this case, which is suitable for most projects.\nBuild-Type: Simple\n-- Specifies the project's license. Here, it's licensed under GPL version 3.0 or later.\nLicense: GPL-3.0-or-later\n-- References the file that contains the full text of the project's license for reference.\nLicense-file: LICENSE`\n\n### ステップ3：Common Project Config\n\nこのセクションでは、Language ExtensionsやGHC (Glasgow Haskell Compiler) Optionsなどの一般的なプロジェクトの設定を定義できます。\n\nLanguage Extensions:\n\nLanguage Extensionsは、Haskellで特定の言語機能を有効にする強力なツールです。必要に応じてコードの機能を拡張することができます。スマートコントラクトファイルでこれらの拡張機能を選択的に有効にするには、LANGUAGE pragmaを使用します：`{-# LANGUAGE <Extension>, <Extension> #-}`。\n\n`{-# LANGUAGE <Extension>, <Extension> #-}`\n\nプロジェクトに適したlanguage extensionsを特定するには、利用可能な拡張機能の詳細なリストを参照できます。各拡張機能には、特定のシナリオで有益な独自の機能が提供されていますので、適切な拡張機能を調査して選択することで、プロジェクトの機能を大幅に向上させることができます。\n\nGHC Options (Compiler Flags):\n\nGHC options、またはcompiler flagsは、Glasgow Haskell Compiler (GHC)とコンパイルプロセスのさまざまな側面に対して細かい制御を提供します。\n\nこれらのオプションを使用すると、Haskellコードのコンパイルと実行方法をカスタマイズできます。これらを使用して、パフォーマンスの最適化、デバッグの有効化、または他のコンパイラ関連の動作の設定を行うことができます。\n\n`Common project-config\ndefault-language: Haskell2010\ndefault-extensions: NoImplicitPrelude\nOverloadedStrings\nExplicitForAll\nScopedTypeVariables\nDeriveGeneric\nStandaloneDeriving\nDeriveLift\nGeneralizedNewtypeDeriving\nDeriveFunctor\nDeriveFoldable\nDeriveTraversable\nLambdaCase\nMultiParamTypeClasses\nTypeOperators\nFlexibleInstances\nNamedFieldPuns\nTypeFamilies\nFlexibleContexts\nDeriveAnyClass\nDerivingStrategies\nDerivingVia\nDataKinds\nPatternGuards\nOverloadedRecordFields\nGADTs\nImportQualifiedPost\nMultiWayIf\nRankNTypes\nRecordWildCards\nTemplateHaskell\nTypeApplications\nUndecidableInstances\nDuplicateRecordFields\nghc-options: -Wall\n-Wcompat\n-Wincomplete-record-updates\n-Wnoncanonical-monad-instances\n-Wredundant-constraints\n-Wincomplete-uni-patterns\n-Wunused-packages\n-Widentities\n-fno-ignore-interface-pragmas\n-fno-omit-interface-pragmas\n-fobject-code\n-fno-specialise\n-fno-spec-constr\n-fno-strictness`\n\n### ステップ4：Libraryの設定（あなたの具体的な内容に置き換えてください）\n\n`Library\nimport: project-config\nhs-source-dirs: <MODULE_FOLDERS_OR_FILES_DIRECTORY_NAME>\nexposed-modules:\n<MODULE_NAME>.<SUB_MODULE_NAME>.<NAME_OF_THE_FILE>\nbuild-depends:\n<PACKAGE_NAME_1>\n, <PACKAGE_NAME_2>\n, <PACKAGE_NAME_3>\n, ...`\n\n### ステップ5：Executableの設定（あなたの具体的な内容に置き換えてください）\n\n`executable <EXECUTABLE_FILE_NAME>\ndefault-language: Haskell2010\nmain-is: <EXECUTABLE_FILE_NAME>.hs\nhs-source-dirs: <EXECUTABLE_FILE_DIRECTORY_NAME>\nghc-options: -threaded -rtsopts \"-with-rtsopts=-T\"\nbuild-depends: <PACKAGE_NAME_1>\n, <PACKAGE_NAME_2>\n, <PACKAGE_NAME_3>\n, ...`\n\n![](https://global.discourse-cdn.com/business4/uploads/cardano/optimized/3X/5/3/53bcc98ea4ecfc54c0aa62b961dc17cda7771248_2_1000x562.jpeg)\n\n![](https://global.discourse-cdn.com/business4/uploads/cardano/optimized/3X/5/3/53bcc98ea4ecfc54c0aa62b961dc17cda7771248_2_1000x562.jpeg)\n\n### [✂️ Setting the myproject.cabal file of your project](https://www.youtube.com/clip/UgkxNzwzherQ2gjy-AOD0UpT-ynYdUIq3nwf?si=B8x7pkdWl3_LR0-C)\n\n60 seconds · Clipped by Sebastian Pabon · Original video \"Plutus PBL Live Coding 2023-09-28\" by Gimbalabs\n\n---\n\nオリジナルのレッスン（ビデオレッスンを含む）は[こちら](https://ja.plutuspbl.io/modules/302/3022)からご覧いただけます。\n\n今後のお知らせについては、[Gimbalabs](https://twitter.com/gimbalabs)をフォローしてください。\n\nGimbalabsの[Discord](https://discord.gg/nCq8sSChBN)に参加して、Gimbalabsコミュニティとのやり取りを始めましょう。  \n![:man_bowing:](https://emoji.discourse-cdn.com/apple/man_bowing.png?v=12 \":man_bowing:\")\n\n![:man_bowing:](https://emoji.discourse-cdn.com/apple/man_bowing.png?v=12 \":man_bowing:\")\n\n## 1 contributors\n\n![](https://ucarecdn.com/525aaddb-0680-430e-9e83-696922568ba4/)\n\n## Would you like to suggest changes to this article?\n\nWe encourage you to actively participate in the creation and moderation of our content—your contributions are invaluable. All content is reviewed by another community member.\n\n##### Resources\n\n##### Legal\n\n##### Subscribe to our newsletter",
  "images": [],
  "extraction_metadata": {
    "batch_number": 7,
    "extraction_timestamp": "2025-09-19T10:02:20.101487",
    "extraction_time": 1.775825023651123,
    "source": "tavily_api_raw"
  }
}