{
  "url": "https://iohk.io/en/research/library/papers/scrape-scalable-randomness-attested-by-public-entities/",
  "content": "![IOHK logo](https://ucarecdn.com/a3d997dc-1781-445f-ad59-ad0e58c24cf3/-/resize/200/)\n\n![English](https://ucarecdn.com/c7b0ab3c-801b-48c4-af03-9ddee986dba6/-/resize/10/)English\n\n![English](https://ucarecdn.com/c7b0ab3c-801b-48c4-af03-9ddee986dba6/-/resize/10/)\n\n[Library](/en/research/library/) > SCRAPE: Scalable Randomness Attested by Public Entities\n\n# [SCRAPE: Scalable Randomness Attested by Public Entities](https://eprint.iacr.org/2017/216.pdf)\n\nJuly/2017, ACNS\n\nCRYPTOCRYPTOGRAPHYHASHPROTOCOL\n\nUniform randomness beacons whose output can be publicly attested to be unbiased are required in several cryptographic protocols.\n\nA common approach to building such beacons is having a number of parties run a coin tossing protocol with guaranteed output delivery (so that adversaries cannot simply keep honest parties from obtaining randomness, consequently halting protocols that rely on it). However, current constructions face serious scalability issues due to high computational and communication overheads. We present a coin tossing protocol for a honest majority that allows for any entity to verify that an output was honestly generated by observing publicly available information (even after the execution is complete), while achieving both guaranteed output delivery and scalability. The main building block of our construction is the first Publicly Verifiable Secret Sharing scheme for threshold access structures that requires only O(n) exponentiations. Previous schemes required O(nt) exponentiations (where t is the threshold) from each of the parties involved, making them unfit for scalable distributed randomness generation, which requires t=n/2 and thus O(n2) exponentiations.\n\nView full paper\n\n![IOHK logo black and white](https://ucarecdn.com/306dc384-d0ae-479a-9b7e-2814fbeaea9b/-/resize/200/)\n\n##### Products\n\n##### Media\n\n##### Courses\n\n##### Legal\n\n##### Social",
  "images": [],
  "extraction_metadata": {
    "batch_number": 35,
    "extraction_timestamp": "2025-09-19T14:20:04.186825",
    "extraction_time": 1.8284108638763428,
    "source": "tavily_api_raw"
  }
}