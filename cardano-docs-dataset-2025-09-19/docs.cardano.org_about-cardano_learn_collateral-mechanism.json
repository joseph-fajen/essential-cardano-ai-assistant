{
  "url": "https://docs.cardano.org/about-cardano/learn/collateral-mechanism",
  "content": "Opens in a new window Opens an external website Opens an external website in a new window\n\nThis website utilizes technologies such as cookies to enable essential site functionality, as well as for analytics, personalization, and targeted advertising. To learn more, view the following link:    [Privacy Policy](https://static.iohk.io/terms/iog-privacy-policy.pdf)[Cookie Policy](https://static.iohk.io/terms/iog-cookie-policy.pdf)\n\n[Skip to main content](#__docusaurus_skipToContent_fallback)\n\n# About the collateral mechanism\n\nThe collateral mechanism is an important feature that has been designed to\nensure successful smart contract execution.\n\nRelying on the guarantees provided by the deterministic design of the ledger,\nCardano implements a two-phase validation scheme. The main reason for\ntwo-phase validation is to limit the amount of uncompensated\nvalidation work by nodes. Each phase serves a purpose in achieving this goal:\n\n* The first phase checks whether the transaction is constructed correctly and\n  can pay its processing fee\n* The second phase runs the scripts included in the transaction.\n\nIf the transaction is *phase-1 valid*, phase-2 scripts run. If phase-1 fails, no\nscripts run, and the transaction is immediately discarded.\n\nCollateral is used to guarantee that nodes are compensated for their work in\ncase phase-2 validation fails. Thus, collateral is the monetary guarantee a user\ngives to assure that the contract has been carefully designed and thoroughly\ntested. The collateral amount is specified at the time of constructing the\ntransaction. Not directly, but by adding collateral inputs to the transaction.\nThe total balance in the UTXOs corresponding to these specially marked inputs is\nthe transaction’s collateral amount. If the user fulfills the conditions of the\nguarantee, and a contract gets executed, the collateral is safe.\n\n## The scenario[​](#the-scenario \"Direct link to The scenario\")\n\nWithout collateral, the user is not charged if a smart contract fails. However,\nby the time the transaction fails, the network has already incurred some costs\nto initiate and validate the transaction. This means that a malicious actor\ncould flood the network with invalid transactions, denying service to other\nusers at little cost.\n\n## The solution[​](#the-solution \"Direct link to The solution\")\n\nWhen a user initiates a transaction, they commit enough ada to cover its\nexecution cost. On Cardano, transactions that call and use non-native smart\ncontracts (known as phase-2 contracts) also need enough collateral to cover\ncosts related to potential transaction failures. This amount can be small, but\nit is sufficient to make a denial of service (DOS) attack prohibitively\nexpensive.\n\nCollateral fees are collected only if a transaction fails validation. If the\ncontract passes validation, the transaction fees are collected, but the\ncollateral is not.\n\n## The reasoning[​](#the-reasoning \"Direct link to The reasoning\")\n\nAn honest user is *never* at risk of losing their collateral.\n\nThe [Cardano](https://cardano.org/) blockchain is deterministic with respect to\ntransaction costs because these costs depend only on local values and local\nstate. That means a user can calculate the execution cost (in ada) of a\ntransaction before submitting it. This feature is different from other\nblockchains, including Ethereum, where other network activity can influence the\ngas cost. The required amount of collateral depends only on the execution cost.\n\nThe Cardano testnet\nprovides a safe environment with free test ada, so decentralized application\n(DApp) developers can thoroughly test their smart contracts before deploying them to\nmainnet. If transactions succeed on testnet, the developer can be\nperfectly sure that all the scripts will indeed succeed.\n\nIf the on-chain conditions have changed since the transaction was constructed,\nthat transaction will be rejected entirely, and no fees will be charged. If a\nsignature is missing, for example, no collateral would be charged.\n\n## Technical details[​](#technical-details \"Direct link to Technical details\")\n\nThe term collateral refers to the total ada contained in the UTXOs referenced by\ncollateral inputs. A transaction uses collateral inputs to cover its fees if a\nphase-2 script fails.\n\nThe Shelley formal specification introduced the concept of 'multi-signature'\nscripts. Phase-1 scripts, such as these, are captured entirely by the ledger\nrules. Execution costs can therefore be easily assessed before they are\nprocessed by the implementation, and any fees can be calculated directly within\nthe ledger rule implementation, based on the size of the transaction that\nincludes the script, for example.\n\nIn contrast, phase-2 scripts can perform arbitrary (and, in principle,\nTuring-complete) computations. Cardano requires transactions that use phase-2 scripts\nto have a budget in terms of a number of abstract ExUnits. This budget gives a\nquantitative bound on resource usage in terms of a number of specific metrics,\nincluding memory usage or abstract execution steps. The budget is then used as\npart of the transaction fee calculation.\n\nAfter the Vasil upgrade, DApp developers can also specify a\nchange address for the script collateral. This means that in case the script\nfails phase-2 validation, only the right amount will be taken, and the remaining\nfunds will be sent to the provided change address. The\n[how to use collateral outputs](https://github.com/perturbing/vasil-tests/blob/main/collateral-output-cip-40.md)\ntutorial provides more details.\n\nOn this page\n\n* [The scenario](#the-scenario)\n* [The solution](#the-solution)\n* [The reasoning](#the-reasoning)\n* [Technical details](#technical-details)",
  "images": [],
  "extraction_metadata": {
    "batch_number": 2,
    "extraction_timestamp": "2025-09-19T13:29:08.434392",
    "extraction_time": 1.0740139484405518,
    "source": "tavily_api_raw"
  }
}