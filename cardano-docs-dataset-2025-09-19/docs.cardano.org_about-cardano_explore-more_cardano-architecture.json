{
  "url": "https://docs.cardano.org/about-cardano/explore-more/cardano-architecture",
  "content": "Opens in a new window Opens an external website Opens an external website in a new window\n\nThis website utilizes technologies such as cookies to enable essential site functionality, as well as for analytics, personalization, and targeted advertising. To learn more, view the following link:    [Privacy Policy](https://static.iohk.io/terms/iog-privacy-policy.pdf)[Cookie Policy](https://static.iohk.io/terms/iog-cookie-policy.pdf)\n\n[Skip to main content](#__docusaurus_skipToContent_fallback)\n\n# Cardano architecture\n\nThis section describes the high-level architecture of Cardano, providing details\non the core components and their interactions.\n\nThe following diagram outlines the interaction between the system components of\nCardano:\n\n## System components[​](#system-components \"Direct link to System components\")\n\nThe *current* implementation of Cardano is highly modular. It includes the\nfollowing components (different deployment use cases will use different\ncombinations of components):\n\n* [Node](https://github.com/input-output-hk/cardano-node)\n* [Command line interface (CLI)](https://github.com/IntersectMBO/cardano-cli)\n* [Cardano wallet](https://github.com/input-output-hk/cardano-wallet)\n* [Cardano db-sync](https://github.com/input-output-hk/cardano-db-sync)\n* [GraphQL](https://github.com/input-output-hk/cardano-graphql) API server\n  (Apollo)\n* [SMASH server](https://github.com/IntersectMBO/cardano-db-sync/tree/master/cardano-smash-server).\n\n## Nodes and remote nodes[​](#nodes-and-remote-nodes \"Direct link to Nodes and remote nodes\")\n\nA blockchain system consists of a set of nodes distributed across a network that\ncommunicate with each other to achieve\n[consensus](/about-cardano/learn/consensus-explained) about the system’s state.\n\nNodes are responsible for:\n\n* Executing the\n  [Ouroboros](https://github.com/IntersectMBO/ouroboros-network?tab=readme-ov-file#ouroboros-network)\n  protocol\n* Validating and relaying blocks\n* Producing blocks (some nodes)\n* Providing information about the state of the blockchain to other local\n  clients.\n\n### Node process[​](#node-process \"Direct link to Node process\")\n\nThe `cardano-node` is the top level Cardano component that consists of the other\nsubsystems, of which the most significant are\n[consensus](https://github.com/IntersectMBO/ouroboros-consensus?tab=readme-ov-file#ouroboros-consensus),\n[ledger](https://github.com/IntersectMBO/cardano-ledger?tab=readme-ov-file#cardano-ledger),\nand\n[networking](https://github.com/IntersectMBO/ouroboros-network?tab=readme-ov-file#ouroboros-network)\nwith ancillary configuration, CLI, logging, and monitoring.\n\n### Node-to-node IPC protocol[​](#node-to-node-ipc-protocol \"Direct link to Node-to-node IPC protocol\")\n\nThe purpose of the node-to-node Inter-Process Communication (IPC) protocol is to\nallow for the exchange of blocks and transactions between nodes as part of the\nOuroboros consensus algorithm.\n\nThe node-to-node protocol is a composite protocol, consisting of three\nmini-protocols:\n\n* **chain-sync**: used for following the chain and getting block headers\n* **block-fetch**: used for getting block bodies\n* **tx-submission**: used for forwarding transactions.\n\nThese mini-protocols are multiplexed on a single long-running Transmission\nControl Protocol (TCP) connection between nodes. They can be run in *both*\ndirections on the same TCP connection to allow for peer-to-peer (P2P) settings.\n\nThe overall protocol – and each mini-protocol – is designed for a trustless\nsetting where both sides need to guard against Denial-of-Service (DoS) attacks.\nFor example, each mini-protocol uses consumer-driven control flow, so a node\nonly requests more work when it is ready, rather than having work *pushed* upon\nit.\n\nThe protocol design is modular and evolvable: version negotiation is used to\nagree on the set of mini-protocols to use, which allows additional or updated\nmini-protocols to be added over time without causing compatibility issues.\n\n### Node-to-client IPC[​](#node-to-client-ipc \"Direct link to Node-to-client IPC\")\n\nThe purpose of the node-to-client IPC protocol is to allow local applications to\ninteract with the blockchain via the node. This includes applications such as\nwallet backends or blockchain explorers. The node-to-client protocol enables\nthese applications to access the raw chain data and to query the current ledger\nstate. It also provides the ability to submit new transactions to the system.\n\nThe node-to-client protocol uses the same design as the node-to-node protocol,\nbut with a different set of mini-protocols, and local pipes rather than TCP\nconnections. As such, it is a relatively low-level narrow interface that exposes\nonly what the node can provide natively. For example, the node provides access\nto all the raw chain data but does not provide a way to query data on the chain.\nThe job of providing data services and more convenient higher level APIs is\ndelegated to dedicated clients, such as cardano-db-sync and the wallet backend.\n\nThe node-to-client protocol consists of three mini-protocols:\n\n* **chain-sync**: used for following the chain and getting blocks\n* **local-tx-submission**: used for submitting transactions\n* **local-state-query**: used for querying the ledger state.\n\nThe node-to-client version of chain sync uses *full* blocks, rather than just\nblock headers. This is why no separate block-fetch protocol is needed. The\nlocal-tx-submission protocol is like the node-to-node tx-submission protocol but\nsimpler, and it returns the details of transaction validation failures. The\nlocal state query protocol provides query access to the current ledger state,\nwhich contains a lot of interesting data that is *not* directly reflected on the\nchain itself.\n\ninfo\n\nRead more about the\n[networking protocol design here](/about-cardano/explore-more/cardano-network/networking-protocol).\n\n## Command line interface (CLI)[​](#command-line-interface-cli \"Direct link to Command line interface (CLI)\")\n\nThe node’s CLI tool is the 'swiss army knife' of the system. It can do almost\neverything, but it is quite low level and not very convenient because it’s\ntext-based and lacks a graphical user interface (GUI).\n\nThe CLI tool can:\n\n* query the node for information\n* submit transactions\n* build and sign transactions\n* manage cryptographic keys.\n\n## Daedalus wallet[​](#daedalus-wallet \"Direct link to Daedalus wallet\")\n\nDaedalus is a full node wallet that helps users to manage their ada, and can\nsend and receive payments on the Cardano blockchain. Daedalus consists of a\nwallet frontend and a backend. The frontend is the graphical application that\nusers see and interact with. The backend is a service process that monitors the\nstate of the user’s wallet and does all the 'heavy lifting', such as coin\nselection, transaction construction, and submission. The backend interacts with\na local node via the node-to-client IPC protocol, and interacts with the\nfrontend via a HTTP API. The backend also provides a CLI that enables\ninteraction with the wallet. The wallet backend can also be used on its own –\nwithout Daedalus – via its API. This is a convenient way for software developers\nto integrate Cardano with other applications and systems.\n\n## Cardano DB Sync[​](#cardano-db-sync \"Direct link to Cardano DB Sync\")\n\nThe Cardano node stores only the blockchain itself and the associated\ninformation needed to validate the blockchain. This design principle is about\nminimizing code complexity (and reducing computational cost and resource use) to\nkeep the node's local interfaces as minimal as possible and to use external\nclients to provide a variety of convenient interfaces and extra functionality.\nIn particular, the node does not provide a convenient query interface for\nhistorical information on the blockchain. This data service is provided by a\nseparate component using a Structured Query Language (SQL) database.\n\nLearn more about\n[Cardano DB Sync here](https://github.com/IntersectMBO/cardano-db-sync?tab=readme-ov-file#cardano-db-sync).\n\nOn this page\n\n* [System components](#system-components)\n* [Nodes and remote nodes](#nodes-and-remote-nodes)\n  + [Node process](#node-process)\n  + [Node-to-node IPC protocol](#node-to-node-ipc-protocol)\n  + [Node-to-client IPC](#node-to-client-ipc)\n* [Command line interface (CLI)](#command-line-interface-cli)\n* [Daedalus wallet](#daedalus-wallet)\n* [Cardano DB Sync](#cardano-db-sync)",
  "images": [],
  "extraction_metadata": {
    "batch_number": 1,
    "extraction_timestamp": "2025-09-19T13:29:04.354369",
    "extraction_time": 1.501661777496338,
    "source": "tavily_api_raw"
  }
}